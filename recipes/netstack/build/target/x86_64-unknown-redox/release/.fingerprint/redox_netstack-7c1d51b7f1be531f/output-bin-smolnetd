{"message":"unused import: `EventFlags`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/smolnetd/main.rs","byte_start":353,"byte_end":363,"line_start":18,"line_end":18,"column_start":33,"column_end":43,"is_primary":true,"text":[{"text":"use syscall::flag::{CloneFlags, EventFlags};","highlight_start":33,"highlight_end":43}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_imports)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove the unused import","code":null,"level":"help","spans":[{"file_name":"src/smolnetd/main.rs","byte_start":351,"byte_end":363,"line_start":18,"line_end":18,"column_start":31,"column_end":43,"is_primary":true,"text":[{"text":"use syscall::flag::{CloneFlags, EventFlags};","highlight_start":31,"highlight_end":43}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `EventFlags`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/smolnetd/main.rs:18:33\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m18\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0muse syscall::flag::{CloneFlags, EventFlags};\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_imports)]` on by default\u001b[0m\n\n"}
{"message":"anonymous parameters are deprecated and will be removed in the next edition","code":{"code":"anonymous_parameters","explanation":null},"level":"warning","spans":[{"file_name":"src/smolnetd/scheme/socket.rs","byte_start":4219,"byte_end":4221,"line_start":163,"line_end":163,"column_start":33,"column_end":35,"is_primary":true,"text":[{"text":"    fn set_hop_limit(&mut self, u8);","highlight_start":33,"highlight_end":35}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(anonymous_parameters)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #41686 <https://github.com/rust-lang/rust/issues/41686>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"try naming the parameter or explicitly ignoring it","code":null,"level":"help","spans":[{"file_name":"src/smolnetd/scheme/socket.rs","byte_start":4219,"byte_end":4221,"line_start":163,"line_end":163,"column_start":33,"column_end":35,"is_primary":true,"text":[{"text":"    fn set_hop_limit(&mut self, u8);","highlight_start":33,"highlight_end":35}],"label":null,"suggested_replacement":"_: u8","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: anonymous parameters are deprecated and will be removed in the next edition\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/smolnetd/scheme/socket.rs:163:33\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m163\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    fn set_hop_limit(&mut self, u8);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: try naming the parameter or explicitly ignoring it: `_: u8`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(anonymous_parameters)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #41686 <https://github.com/rust-lang/rust/issues/41686>\u001b[0m\n\n"}
{"message":"anonymous parameters are deprecated and will be removed in the next edition","code":{"code":"anonymous_parameters","explanation":null},"level":"warning","spans":[{"file_name":"src/smolnetd/scheme/socket.rs","byte_start":4244,"byte_end":4268,"line_start":165,"line_end":165,"column_start":20,"column_end":44,"is_primary":true,"text":[{"text":"    fn get_setting(&SocketFile<Self::DataT>, Self::SettingT, &mut [u8]) -> SyscallResult<usize>;","highlight_start":20,"highlight_end":44}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #41686 <https://github.com/rust-lang/rust/issues/41686>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"try naming the parameter or explicitly ignoring it","code":null,"level":"help","spans":[{"file_name":"src/smolnetd/scheme/socket.rs","byte_start":4244,"byte_end":4268,"line_start":165,"line_end":165,"column_start":20,"column_end":44,"is_primary":true,"text":[{"text":"    fn get_setting(&SocketFile<Self::DataT>, Self::SettingT, &mut [u8]) -> SyscallResult<usize>;","highlight_start":20,"highlight_end":44}],"label":null,"suggested_replacement":"_: &SocketFile<Self::DataT>","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: anonymous parameters are deprecated and will be removed in the next edition\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/smolnetd/scheme/socket.rs:165:20\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m165\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    fn get_setting(&SocketFile<Self::DataT>, Self::SettingT, &mut [u8]) -> SyscallResult<usize>;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: try naming the parameter or explicitly ignoring it: `_: &SocketFile<Self::DataT>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #41686 <https://github.com/rust-lang/rust/issues/41686>\u001b[0m\n\n"}
{"message":"anonymous parameters are deprecated and will be removed in the next edition","code":{"code":"anonymous_parameters","explanation":null},"level":"warning","spans":[{"file_name":"src/smolnetd/scheme/socket.rs","byte_start":4270,"byte_end":4284,"line_start":165,"line_end":165,"column_start":46,"column_end":60,"is_primary":true,"text":[{"text":"    fn get_setting(&SocketFile<Self::DataT>, Self::SettingT, &mut [u8]) -> SyscallResult<usize>;","highlight_start":46,"highlight_end":60}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #41686 <https://github.com/rust-lang/rust/issues/41686>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"try naming the parameter or explicitly ignoring it","code":null,"level":"help","spans":[{"file_name":"src/smolnetd/scheme/socket.rs","byte_start":4270,"byte_end":4284,"line_start":165,"line_end":165,"column_start":46,"column_end":60,"is_primary":true,"text":[{"text":"    fn get_setting(&SocketFile<Self::DataT>, Self::SettingT, &mut [u8]) -> SyscallResult<usize>;","highlight_start":46,"highlight_end":60}],"label":null,"suggested_replacement":"_: Self::SettingT","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: anonymous parameters are deprecated and will be removed in the next edition\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/smolnetd/scheme/socket.rs:165:46\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m165\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    fn get_setting(&SocketFile<Self::DataT>, Self::SettingT, &mut [u8]) -> SyscallResult<usize>;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: try naming the parameter or explicitly ignoring it: `_: Self::SettingT`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #41686 <https://github.com/rust-lang/rust/issues/41686>\u001b[0m\n\n"}
{"message":"anonymous parameters are deprecated and will be removed in the next edition","code":{"code":"anonymous_parameters","explanation":null},"level":"warning","spans":[{"file_name":"src/smolnetd/scheme/socket.rs","byte_start":4286,"byte_end":4295,"line_start":165,"line_end":165,"column_start":62,"column_end":71,"is_primary":true,"text":[{"text":"    fn get_setting(&SocketFile<Self::DataT>, Self::SettingT, &mut [u8]) -> SyscallResult<usize>;","highlight_start":62,"highlight_end":71}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #41686 <https://github.com/rust-lang/rust/issues/41686>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"try naming the parameter or explicitly ignoring it","code":null,"level":"help","spans":[{"file_name":"src/smolnetd/scheme/socket.rs","byte_start":4286,"byte_end":4295,"line_start":165,"line_end":165,"column_start":62,"column_end":71,"is_primary":true,"text":[{"text":"    fn get_setting(&SocketFile<Self::DataT>, Self::SettingT, &mut [u8]) -> SyscallResult<usize>;","highlight_start":62,"highlight_end":71}],"label":null,"suggested_replacement":"_: &mut [u8]","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: anonymous parameters are deprecated and will be removed in the next edition\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/smolnetd/scheme/socket.rs:165:62\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m165\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    fn get_setting(&SocketFile<Self::DataT>, Self::SettingT, &mut [u8]) -> SyscallResult<usize>;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: try naming the parameter or explicitly ignoring it: `_: &mut [u8]`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #41686 <https://github.com/rust-lang/rust/issues/41686>\u001b[0m\n\n"}
{"message":"anonymous parameters are deprecated and will be removed in the next edition","code":{"code":"anonymous_parameters","explanation":null},"level":"warning","spans":[{"file_name":"src/smolnetd/scheme/socket.rs","byte_start":4341,"byte_end":4369,"line_start":166,"line_end":166,"column_start":20,"column_end":48,"is_primary":true,"text":[{"text":"    fn set_setting(&mut SocketFile<Self::DataT>, Self::SettingT, &[u8]) -> SyscallResult<usize>;","highlight_start":20,"highlight_end":48}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #41686 <https://github.com/rust-lang/rust/issues/41686>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"try naming the parameter or explicitly ignoring it","code":null,"level":"help","spans":[{"file_name":"src/smolnetd/scheme/socket.rs","byte_start":4341,"byte_end":4369,"line_start":166,"line_end":166,"column_start":20,"column_end":48,"is_primary":true,"text":[{"text":"    fn set_setting(&mut SocketFile<Self::DataT>, Self::SettingT, &[u8]) -> SyscallResult<usize>;","highlight_start":20,"highlight_end":48}],"label":null,"suggested_replacement":"_: &mut SocketFile<Self::DataT>","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: anonymous parameters are deprecated and will be removed in the next edition\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/smolnetd/scheme/socket.rs:166:20\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m166\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    fn set_setting(&mut SocketFile<Self::DataT>, Self::SettingT, &[u8]) -> SyscallResult<usize>;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: try naming the parameter or explicitly ignoring it: `_: &mut SocketFile<Self::DataT>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #41686 <https://github.com/rust-lang/rust/issues/41686>\u001b[0m\n\n"}
{"message":"anonymous parameters are deprecated and will be removed in the next edition","code":{"code":"anonymous_parameters","explanation":null},"level":"warning","spans":[{"file_name":"src/smolnetd/scheme/socket.rs","byte_start":4371,"byte_end":4385,"line_start":166,"line_end":166,"column_start":50,"column_end":64,"is_primary":true,"text":[{"text":"    fn set_setting(&mut SocketFile<Self::DataT>, Self::SettingT, &[u8]) -> SyscallResult<usize>;","highlight_start":50,"highlight_end":64}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #41686 <https://github.com/rust-lang/rust/issues/41686>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"try naming the parameter or explicitly ignoring it","code":null,"level":"help","spans":[{"file_name":"src/smolnetd/scheme/socket.rs","byte_start":4371,"byte_end":4385,"line_start":166,"line_end":166,"column_start":50,"column_end":64,"is_primary":true,"text":[{"text":"    fn set_setting(&mut SocketFile<Self::DataT>, Self::SettingT, &[u8]) -> SyscallResult<usize>;","highlight_start":50,"highlight_end":64}],"label":null,"suggested_replacement":"_: Self::SettingT","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: anonymous parameters are deprecated and will be removed in the next edition\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/smolnetd/scheme/socket.rs:166:50\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m166\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    fn set_setting(&mut SocketFile<Self::DataT>, Self::SettingT, &[u8]) -> SyscallResult<usize>;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: try naming the parameter or explicitly ignoring it: `_: Self::SettingT`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #41686 <https://github.com/rust-lang/rust/issues/41686>\u001b[0m\n\n"}
{"message":"anonymous parameters are deprecated and will be removed in the next edition","code":{"code":"anonymous_parameters","explanation":null},"level":"warning","spans":[{"file_name":"src/smolnetd/scheme/socket.rs","byte_start":4387,"byte_end":4392,"line_start":166,"line_end":166,"column_start":66,"column_end":71,"is_primary":true,"text":[{"text":"    fn set_setting(&mut SocketFile<Self::DataT>, Self::SettingT, &[u8]) -> SyscallResult<usize>;","highlight_start":66,"highlight_end":71}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #41686 <https://github.com/rust-lang/rust/issues/41686>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"try naming the parameter or explicitly ignoring it","code":null,"level":"help","spans":[{"file_name":"src/smolnetd/scheme/socket.rs","byte_start":4387,"byte_end":4392,"line_start":166,"line_end":166,"column_start":66,"column_end":71,"is_primary":true,"text":[{"text":"    fn set_setting(&mut SocketFile<Self::DataT>, Self::SettingT, &[u8]) -> SyscallResult<usize>;","highlight_start":66,"highlight_end":71}],"label":null,"suggested_replacement":"_: &[u8]","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: anonymous parameters are deprecated and will be removed in the next edition\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/smolnetd/scheme/socket.rs:166:66\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m166\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    fn set_setting(&mut SocketFile<Self::DataT>, Self::SettingT, &[u8]) -> SyscallResult<usize>;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: try naming the parameter or explicitly ignoring it: `_: &[u8]`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #41686 <https://github.com/rust-lang/rust/issues/41686>\u001b[0m\n\n"}
{"message":"anonymous parameters are deprecated and will be removed in the next edition","code":{"code":"anonymous_parameters","explanation":null},"level":"warning","spans":[{"file_name":"src/smolnetd/scheme/socket.rs","byte_start":4447,"byte_end":4461,"line_start":169,"line_end":169,"column_start":9,"column_end":23,"is_primary":true,"text":[{"text":"        &mut SocketSet,","highlight_start":9,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #41686 <https://github.com/rust-lang/rust/issues/41686>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"try naming the parameter or explicitly ignoring it","code":null,"level":"help","spans":[{"file_name":"src/smolnetd/scheme/socket.rs","byte_start":4447,"byte_end":4461,"line_start":169,"line_end":169,"column_start":9,"column_end":23,"is_primary":true,"text":[{"text":"        &mut SocketSet,","highlight_start":9,"highlight_end":23}],"label":null,"suggested_replacement":"_: &mut SocketSet","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: anonymous parameters are deprecated and will be removed in the next edition\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/smolnetd/scheme/socket.rs:169:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m169\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        &mut SocketSet,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: try naming the parameter or explicitly ignoring it: `_: &mut SocketSet`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #41686 <https://github.com/rust-lang/rust/issues/41686>\u001b[0m\n\n"}
{"message":"anonymous parameters are deprecated and will be removed in the next edition","code":{"code":"anonymous_parameters","explanation":null},"level":"warning","spans":[{"file_name":"src/smolnetd/scheme/socket.rs","byte_start":4471,"byte_end":4475,"line_start":170,"line_end":170,"column_start":9,"column_end":13,"is_primary":true,"text":[{"text":"        &str,","highlight_start":9,"highlight_end":13}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #41686 <https://github.com/rust-lang/rust/issues/41686>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"try naming the parameter or explicitly ignoring it","code":null,"level":"help","spans":[{"file_name":"src/smolnetd/scheme/socket.rs","byte_start":4471,"byte_end":4475,"line_start":170,"line_end":170,"column_start":9,"column_end":13,"is_primary":true,"text":[{"text":"        &str,","highlight_start":9,"highlight_end":13}],"label":null,"suggested_replacement":"_: &str","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: anonymous parameters are deprecated and will be removed in the next edition\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/smolnetd/scheme/socket.rs:170:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m170\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        &str,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: try naming the parameter or explicitly ignoring it: `_: &str`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #41686 <https://github.com/rust-lang/rust/issues/41686>\u001b[0m\n\n"}
{"message":"anonymous parameters are deprecated and will be removed in the next edition","code":{"code":"anonymous_parameters","explanation":null},"level":"warning","spans":[{"file_name":"src/smolnetd/scheme/socket.rs","byte_start":4485,"byte_end":4488,"line_start":171,"line_end":171,"column_start":9,"column_end":12,"is_primary":true,"text":[{"text":"        u32,","highlight_start":9,"highlight_end":12}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #41686 <https://github.com/rust-lang/rust/issues/41686>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"try naming the parameter or explicitly ignoring it","code":null,"level":"help","spans":[{"file_name":"src/smolnetd/scheme/socket.rs","byte_start":4485,"byte_end":4488,"line_start":171,"line_end":171,"column_start":9,"column_end":12,"is_primary":true,"text":[{"text":"        u32,","highlight_start":9,"highlight_end":12}],"label":null,"suggested_replacement":"_: u32","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: anonymous parameters are deprecated and will be removed in the next edition\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/smolnetd/scheme/socket.rs:171:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m171\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        u32,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: try naming the parameter or explicitly ignoring it: `_: u32`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #41686 <https://github.com/rust-lang/rust/issues/41686>\u001b[0m\n\n"}
{"message":"anonymous parameters are deprecated and will be removed in the next edition","code":{"code":"anonymous_parameters","explanation":null},"level":"warning","spans":[{"file_name":"src/smolnetd/scheme/socket.rs","byte_start":4498,"byte_end":4520,"line_start":172,"line_end":172,"column_start":9,"column_end":31,"is_primary":true,"text":[{"text":"        &mut Self::SchemeDataT,","highlight_start":9,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #41686 <https://github.com/rust-lang/rust/issues/41686>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"try naming the parameter or explicitly ignoring it","code":null,"level":"help","spans":[{"file_name":"src/smolnetd/scheme/socket.rs","byte_start":4498,"byte_end":4520,"line_start":172,"line_end":172,"column_start":9,"column_end":31,"is_primary":true,"text":[{"text":"        &mut Self::SchemeDataT,","highlight_start":9,"highlight_end":31}],"label":null,"suggested_replacement":"_: &mut Self::SchemeDataT","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: anonymous parameters are deprecated and will be removed in the next edition\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/smolnetd/scheme/socket.rs:172:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m172\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        &mut Self::SchemeDataT,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: try naming the parameter or explicitly ignoring it: `_: &mut Self::SchemeDataT`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #41686 <https://github.com/rust-lang/rust/issues/41686>\u001b[0m\n\n"}
{"message":"anonymous parameters are deprecated and will be removed in the next edition","code":{"code":"anonymous_parameters","explanation":null},"level":"warning","spans":[{"file_name":"src/smolnetd/scheme/socket.rs","byte_start":4601,"byte_end":4618,"line_start":175,"line_end":175,"column_start":26,"column_end":43,"is_primary":true,"text":[{"text":"    fn close_file(&self, &SchemeFile<Self>, &mut Self::SchemeDataT) -> SyscallResult<()>;","highlight_start":26,"highlight_end":43}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #41686 <https://github.com/rust-lang/rust/issues/41686>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"try naming the parameter or explicitly ignoring it","code":null,"level":"help","spans":[{"file_name":"src/smolnetd/scheme/socket.rs","byte_start":4601,"byte_end":4618,"line_start":175,"line_end":175,"column_start":26,"column_end":43,"is_primary":true,"text":[{"text":"    fn close_file(&self, &SchemeFile<Self>, &mut Self::SchemeDataT) -> SyscallResult<()>;","highlight_start":26,"highlight_end":43}],"label":null,"suggested_replacement":"_: &SchemeFile<Self>","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: anonymous parameters are deprecated and will be removed in the next edition\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/smolnetd/scheme/socket.rs:175:26\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m175\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    fn close_file(&self, &SchemeFile<Self>, &mut Self::SchemeDataT) -> SyscallResult<()>;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: try naming the parameter or explicitly ignoring it: `_: &SchemeFile<Self>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #41686 <https://github.com/rust-lang/rust/issues/41686>\u001b[0m\n\n"}
{"message":"anonymous parameters are deprecated and will be removed in the next edition","code":{"code":"anonymous_parameters","explanation":null},"level":"warning","spans":[{"file_name":"src/smolnetd/scheme/socket.rs","byte_start":4620,"byte_end":4642,"line_start":175,"line_end":175,"column_start":45,"column_end":67,"is_primary":true,"text":[{"text":"    fn close_file(&self, &SchemeFile<Self>, &mut Self::SchemeDataT) -> SyscallResult<()>;","highlight_start":45,"highlight_end":67}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #41686 <https://github.com/rust-lang/rust/issues/41686>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"try naming the parameter or explicitly ignoring it","code":null,"level":"help","spans":[{"file_name":"src/smolnetd/scheme/socket.rs","byte_start":4620,"byte_end":4642,"line_start":175,"line_end":175,"column_start":45,"column_end":67,"is_primary":true,"text":[{"text":"    fn close_file(&self, &SchemeFile<Self>, &mut Self::SchemeDataT) -> SyscallResult<()>;","highlight_start":45,"highlight_end":67}],"label":null,"suggested_replacement":"_: &mut Self::SchemeDataT","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: anonymous parameters are deprecated and will be removed in the next edition\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/smolnetd/scheme/socket.rs:175:45\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m175\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    fn close_file(&self, &SchemeFile<Self>, &mut Self::SchemeDataT) -> SyscallResult<()>;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: try naming the parameter or explicitly ignoring it: `_: &mut Self::SchemeDataT`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #41686 <https://github.com/rust-lang/rust/issues/41686>\u001b[0m\n\n"}
{"message":"anonymous parameters are deprecated and will be removed in the next edition","code":{"code":"anonymous_parameters","explanation":null},"level":"warning","spans":[{"file_name":"src/smolnetd/scheme/socket.rs","byte_start":4695,"byte_end":4723,"line_start":177,"line_end":177,"column_start":29,"column_end":57,"is_primary":true,"text":[{"text":"    fn write_buf(&mut self, &mut SocketFile<Self::DataT>, buf: &[u8]) -> SyscallResult<Option<usize>>;","highlight_start":29,"highlight_end":57}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #41686 <https://github.com/rust-lang/rust/issues/41686>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"try naming the parameter or explicitly ignoring it","code":null,"level":"help","spans":[{"file_name":"src/smolnetd/scheme/socket.rs","byte_start":4695,"byte_end":4723,"line_start":177,"line_end":177,"column_start":29,"column_end":57,"is_primary":true,"text":[{"text":"    fn write_buf(&mut self, &mut SocketFile<Self::DataT>, buf: &[u8]) -> SyscallResult<Option<usize>>;","highlight_start":29,"highlight_end":57}],"label":null,"suggested_replacement":"_: &mut SocketFile<Self::DataT>","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: anonymous parameters are deprecated and will be removed in the next edition\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/smolnetd/scheme/socket.rs:177:29\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m177\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    fn write_buf(&mut self, &mut SocketFile<Self::DataT>, buf: &[u8]) -> SyscallResult<Option<usize>>;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: try naming the parameter or explicitly ignoring it: `_: &mut SocketFile<Self::DataT>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #41686 <https://github.com/rust-lang/rust/issues/41686>\u001b[0m\n\n"}
{"message":"anonymous parameters are deprecated and will be removed in the next edition","code":{"code":"anonymous_parameters","explanation":null},"level":"warning","spans":[{"file_name":"src/smolnetd/scheme/socket.rs","byte_start":4798,"byte_end":4826,"line_start":179,"line_end":179,"column_start":28,"column_end":56,"is_primary":true,"text":[{"text":"    fn read_buf(&mut self, &mut SocketFile<Self::DataT>, buf: &mut [u8]) -> SyscallResult<Option<usize>>;","highlight_start":28,"highlight_end":56}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #41686 <https://github.com/rust-lang/rust/issues/41686>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"try naming the parameter or explicitly ignoring it","code":null,"level":"help","spans":[{"file_name":"src/smolnetd/scheme/socket.rs","byte_start":4798,"byte_end":4826,"line_start":179,"line_end":179,"column_start":28,"column_end":56,"is_primary":true,"text":[{"text":"    fn read_buf(&mut self, &mut SocketFile<Self::DataT>, buf: &mut [u8]) -> SyscallResult<Option<usize>>;","highlight_start":28,"highlight_end":56}],"label":null,"suggested_replacement":"_: &mut SocketFile<Self::DataT>","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: anonymous parameters are deprecated and will be removed in the next edition\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/smolnetd/scheme/socket.rs:179:28\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m179\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    fn read_buf(&mut self, &mut SocketFile<Self::DataT>, buf: &mut [u8]) -> SyscallResult<Option<usize>>;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: try naming the parameter or explicitly ignoring it: `_: &mut SocketFile<Self::DataT>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #41686 <https://github.com/rust-lang/rust/issues/41686>\u001b[0m\n\n"}
{"message":"anonymous parameters are deprecated and will be removed in the next edition","code":{"code":"anonymous_parameters","explanation":null},"level":"warning","spans":[{"file_name":"src/smolnetd/scheme/socket.rs","byte_start":4898,"byte_end":4915,"line_start":181,"line_end":181,"column_start":21,"column_end":38,"is_primary":true,"text":[{"text":"    fn fpath(&self, &SchemeFile<Self>, &mut [u8]) -> SyscallResult<usize>;","highlight_start":21,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #41686 <https://github.com/rust-lang/rust/issues/41686>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"try naming the parameter or explicitly ignoring it","code":null,"level":"help","spans":[{"file_name":"src/smolnetd/scheme/socket.rs","byte_start":4898,"byte_end":4915,"line_start":181,"line_end":181,"column_start":21,"column_end":38,"is_primary":true,"text":[{"text":"    fn fpath(&self, &SchemeFile<Self>, &mut [u8]) -> SyscallResult<usize>;","highlight_start":21,"highlight_end":38}],"label":null,"suggested_replacement":"_: &SchemeFile<Self>","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: anonymous parameters are deprecated and will be removed in the next edition\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/smolnetd/scheme/socket.rs:181:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m181\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    fn fpath(&self, &SchemeFile<Self>, &mut [u8]) -> SyscallResult<usize>;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: try naming the parameter or explicitly ignoring it: `_: &SchemeFile<Self>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #41686 <https://github.com/rust-lang/rust/issues/41686>\u001b[0m\n\n"}
{"message":"anonymous parameters are deprecated and will be removed in the next edition","code":{"code":"anonymous_parameters","explanation":null},"level":"warning","spans":[{"file_name":"src/smolnetd/scheme/socket.rs","byte_start":4917,"byte_end":4926,"line_start":181,"line_end":181,"column_start":40,"column_end":49,"is_primary":true,"text":[{"text":"    fn fpath(&self, &SchemeFile<Self>, &mut [u8]) -> SyscallResult<usize>;","highlight_start":40,"highlight_end":49}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #41686 <https://github.com/rust-lang/rust/issues/41686>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"try naming the parameter or explicitly ignoring it","code":null,"level":"help","spans":[{"file_name":"src/smolnetd/scheme/socket.rs","byte_start":4917,"byte_end":4926,"line_start":181,"line_end":181,"column_start":40,"column_end":49,"is_primary":true,"text":[{"text":"    fn fpath(&self, &SchemeFile<Self>, &mut [u8]) -> SyscallResult<usize>;","highlight_start":40,"highlight_end":49}],"label":null,"suggested_replacement":"_: &mut [u8]","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: anonymous parameters are deprecated and will be removed in the next edition\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/smolnetd/scheme/socket.rs:181:40\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m181\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    fn fpath(&self, &SchemeFile<Self>, &mut [u8]) -> SyscallResult<usize>;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: try naming the parameter or explicitly ignoring it: `_: &mut [u8]`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #41686 <https://github.com/rust-lang/rust/issues/41686>\u001b[0m\n\n"}
{"message":"anonymous parameters are deprecated and will be removed in the next edition","code":{"code":"anonymous_parameters","explanation":null},"level":"warning","spans":[{"file_name":"src/smolnetd/scheme/socket.rs","byte_start":4974,"byte_end":4988,"line_start":184,"line_end":184,"column_start":9,"column_end":23,"is_primary":true,"text":[{"text":"        &mut SocketSet,","highlight_start":9,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #41686 <https://github.com/rust-lang/rust/issues/41686>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"try naming the parameter or explicitly ignoring it","code":null,"level":"help","spans":[{"file_name":"src/smolnetd/scheme/socket.rs","byte_start":4974,"byte_end":4988,"line_start":184,"line_end":184,"column_start":9,"column_end":23,"is_primary":true,"text":[{"text":"        &mut SocketSet,","highlight_start":9,"highlight_end":23}],"label":null,"suggested_replacement":"_: &mut SocketSet","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: anonymous parameters are deprecated and will be removed in the next edition\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/smolnetd/scheme/socket.rs:184:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m184\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        &mut SocketSet,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: try naming the parameter or explicitly ignoring it: `_: &mut SocketSet`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #41686 <https://github.com/rust-lang/rust/issues/41686>\u001b[0m\n\n"}
{"message":"anonymous parameters are deprecated and will be removed in the next edition","code":{"code":"anonymous_parameters","explanation":null},"level":"warning","spans":[{"file_name":"src/smolnetd/scheme/socket.rs","byte_start":4998,"byte_end":5019,"line_start":185,"line_end":185,"column_start":9,"column_end":30,"is_primary":true,"text":[{"text":"        &mut SchemeFile<Self>,","highlight_start":9,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #41686 <https://github.com/rust-lang/rust/issues/41686>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"try naming the parameter or explicitly ignoring it","code":null,"level":"help","spans":[{"file_name":"src/smolnetd/scheme/socket.rs","byte_start":4998,"byte_end":5019,"line_start":185,"line_end":185,"column_start":9,"column_end":30,"is_primary":true,"text":[{"text":"        &mut SchemeFile<Self>,","highlight_start":9,"highlight_end":30}],"label":null,"suggested_replacement":"_: &mut SchemeFile<Self>","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: anonymous parameters are deprecated and will be removed in the next edition\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/smolnetd/scheme/socket.rs:185:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m185\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        &mut SchemeFile<Self>,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: try naming the parameter or explicitly ignoring it: `_: &mut SchemeFile<Self>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #41686 <https://github.com/rust-lang/rust/issues/41686>\u001b[0m\n\n"}
{"message":"anonymous parameters are deprecated and will be removed in the next edition","code":{"code":"anonymous_parameters","explanation":null},"level":"warning","spans":[{"file_name":"src/smolnetd/scheme/socket.rs","byte_start":5029,"byte_end":5033,"line_start":186,"line_end":186,"column_start":9,"column_end":13,"is_primary":true,"text":[{"text":"        &str,","highlight_start":9,"highlight_end":13}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #41686 <https://github.com/rust-lang/rust/issues/41686>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"try naming the parameter or explicitly ignoring it","code":null,"level":"help","spans":[{"file_name":"src/smolnetd/scheme/socket.rs","byte_start":5029,"byte_end":5033,"line_start":186,"line_end":186,"column_start":9,"column_end":13,"is_primary":true,"text":[{"text":"        &str,","highlight_start":9,"highlight_end":13}],"label":null,"suggested_replacement":"_: &str","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: anonymous parameters are deprecated and will be removed in the next edition\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/smolnetd/scheme/socket.rs:186:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m186\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        &str,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: try naming the parameter or explicitly ignoring it: `_: &str`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #41686 <https://github.com/rust-lang/rust/issues/41686>\u001b[0m\n\n"}
{"message":"anonymous parameters are deprecated and will be removed in the next edition","code":{"code":"anonymous_parameters","explanation":null},"level":"warning","spans":[{"file_name":"src/smolnetd/scheme/socket.rs","byte_start":5043,"byte_end":5065,"line_start":187,"line_end":187,"column_start":9,"column_end":31,"is_primary":true,"text":[{"text":"        &mut Self::SchemeDataT,","highlight_start":9,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #41686 <https://github.com/rust-lang/rust/issues/41686>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"try naming the parameter or explicitly ignoring it","code":null,"level":"help","spans":[{"file_name":"src/smolnetd/scheme/socket.rs","byte_start":5043,"byte_end":5065,"line_start":187,"line_end":187,"column_start":9,"column_end":31,"is_primary":true,"text":[{"text":"        &mut Self::SchemeDataT,","highlight_start":9,"highlight_end":31}],"label":null,"suggested_replacement":"_: &mut Self::SchemeDataT","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: anonymous parameters are deprecated and will be removed in the next edition\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/smolnetd/scheme/socket.rs:187:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m187\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        &mut Self::SchemeDataT,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: try naming the parameter or explicitly ignoring it: `_: &mut Self::SchemeDataT`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #41686 <https://github.com/rust-lang/rust/issues/41686>\u001b[0m\n\n"}
{"message":"anonymous parameters are deprecated and will be removed in the next edition","code":{"code":"anonymous_parameters","explanation":null},"level":"warning","spans":[{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":209,"byte_end":213,"line_start":9,"line_end":9,"column_start":30,"column_end":34,"is_primary":true,"text":[{"text":"    fn write_line(&mut self, &str) -> SyscallResult<()> {","highlight_start":30,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #41686 <https://github.com/rust-lang/rust/issues/41686>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"try naming the parameter or explicitly ignoring it","code":null,"level":"help","spans":[{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":209,"byte_end":213,"line_start":9,"line_end":9,"column_start":30,"column_end":34,"is_primary":true,"text":[{"text":"    fn write_line(&mut self, &str) -> SyscallResult<()> {","highlight_start":30,"highlight_end":34}],"label":null,"suggested_replacement":"_: &str","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: anonymous parameters are deprecated and will be removed in the next edition\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/smolnetd/scheme/netcfg/nodes.rs:9:30\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m9\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    fn write_line(&mut self, &str) -> SyscallResult<()> {\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: try naming the parameter or explicitly ignoring it: `_: &str`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #41686 <https://github.com/rust-lang/rust/issues/41686>\u001b[0m\n\n"}
{"message":"unnecessary trailing semicolon","code":{"code":"redundant_semicolons","explanation":null},"level":"warning","spans":[{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":5443,"byte_end":5444,"line_start":247,"line_end":247,"column_start":64,"column_end":65,"is_primary":true,"text":[{"text":"            $(#[allow(unused_variables)] let $c = $c.clone();)*;","highlight_start":64,"highlight_end":65}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":6209,"byte_end":6226,"line_start":266,"line_end":266,"column_start":42,"column_end":59,"is_primary":false,"text":[{"text":"            $(children.insert($e.into(), cfg_node!($($t)*));)*","highlight_start":42,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":6209,"byte_end":6226,"line_start":266,"line_end":266,"column_start":42,"column_end":59,"is_primary":false,"text":[{"text":"            $(children.insert($e.into(), cfg_node!($($t)*));)*","highlight_start":42,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/mod.rs","byte_start":1546,"byte_end":11568,"line_start":51,"line_end":273,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    cfg_node!{","highlight_start":5,"highlight_end":15},{"text":"        \"resolv\" => {","highlight_start":1,"highlight_end":22},{"text":"            \"nameserver\" => {","highlight_start":1,"highlight_end":30},{"text":"                rw [dns_config, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":70},{"text":"                || {","highlight_start":1,"highlight_end":21},{"text":"                    format!(\"{}\\n\", dns_config.borrow().name_server)","highlight_start":1,"highlight_end":69},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let ip = Ipv4Address::from_str(line.trim())","highlight_start":1,"highlight_end":68},{"text":"                            .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":79},{"text":"                        if !ip.is_unicast() {","highlight_start":1,"highlight_end":46},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(ip);","highlight_start":1,"highlight_end":47},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(ip) = *cur_value {","highlight_start":1,"highlight_end":51},{"text":"                        dns_config.borrow_mut().name_server = ip;","highlight_start":1,"highlight_end":66},{"text":"                        notifier.borrow_mut().schedule_notify(\"resolv/nameserver\");","highlight_start":1,"highlight_end":84},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    Ok(())","highlight_start":1,"highlight_end":27},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        \"route\" => {","highlight_start":1,"highlight_end":21},{"text":"            \"list\" => {","highlight_start":1,"highlight_end":24},{"text":"                ro [iface] || {","highlight_start":1,"highlight_end":32},{"text":"                    let mut gateway = None;","highlight_start":1,"highlight_end":44},{"text":"                    iface.borrow_mut().routes_mut().update(|map| {","highlight_start":1,"highlight_end":67},{"text":"                        gateway = map.get(&gateway_cidr()).map(|route| route.via_router);","highlight_start":1,"highlight_end":90},{"text":"                    });","highlight_start":1,"highlight_end":24},{"text":"                    if let Some(ip) = gateway {","highlight_start":1,"highlight_end":48},{"text":"                        format!(\"default via {}\\n\", ip)","highlight_start":1,"highlight_end":56},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        String::new()","highlight_start":1,"highlight_end":38},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            \"add\" => {","highlight_start":1,"highlight_end":23},{"text":"                wo [iface, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":65},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let default_gw = parse_default_gw(line)?;","highlight_start":1,"highlight_end":66},{"text":"                        if !default_gw.is_unicast() {","highlight_start":1,"highlight_end":54},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(default_gw);","highlight_start":1,"highlight_end":55},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(default_gw) = *cur_value {","highlight_start":1,"highlight_end":59},{"text":"                        if iface.borrow_mut().routes_mut().add_default_ipv4_route(default_gw).is_err() {","highlight_start":1,"highlight_end":105},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        notifier.borrow_mut().schedule_notify(\"route/list\");","highlight_start":1,"highlight_end":77},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            \"rm\" => {","highlight_start":1,"highlight_end":22},{"text":"                wo [iface, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":65},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let default_gw = parse_default_gw(line)?;","highlight_start":1,"highlight_end":66},{"text":"                        if !default_gw.is_unicast() {","highlight_start":1,"highlight_end":54},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(default_gw);","highlight_start":1,"highlight_end":55},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(default_gw) = *cur_value {","highlight_start":1,"highlight_end":59},{"text":"                        let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":60},{"text":"                        let mut gateway = None;","highlight_start":1,"highlight_end":48},{"text":"                        iface.routes_mut().update(|map| {","highlight_start":1,"highlight_end":58},{"text":"                            gateway = map.get(&gateway_cidr()).map(|route| route.via_router);","highlight_start":1,"highlight_end":94},{"text":"                        });","highlight_start":1,"highlight_end":28},{"text":"                        if gateway != Some(IpAddress::Ipv4(default_gw)) {","highlight_start":1,"highlight_end":74},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        iface.routes_mut().update(|map| {","highlight_start":1,"highlight_end":58},{"text":"                            map.remove(&gateway_cidr());","highlight_start":1,"highlight_end":57},{"text":"                        });","highlight_start":1,"highlight_end":28},{"text":"                        notifier.borrow_mut().schedule_notify(\"route/list\");","highlight_start":1,"highlight_end":77},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        \"ifaces\" => {","highlight_start":1,"highlight_end":22},{"text":"            \"eth0\" => {","highlight_start":1,"highlight_end":24},{"text":"                \"mac\" => {","highlight_start":1,"highlight_end":27},{"text":"                    rw [iface, notifier] (Option<EthernetAddress>, None)","highlight_start":1,"highlight_end":73},{"text":"                    || {","highlight_start":1,"highlight_end":25},{"text":"                        format!(\"{}\\n\", iface.borrow().ethernet_addr())","highlight_start":1,"highlight_end":72},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    |cur_value, line| {","highlight_start":1,"highlight_end":40},{"text":"                        if cur_value.is_none() {","highlight_start":1,"highlight_end":49},{"text":"                            let mac = EthernetAddress::from_str(line).","highlight_start":1,"highlight_end":71},{"text":"                                map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":82},{"text":"                            if !mac.is_unicast() {","highlight_start":1,"highlight_end":51},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            *cur_value = Some(mac);","highlight_start":1,"highlight_end":52},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        } else {","highlight_start":1,"highlight_end":33},{"text":"                            Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":68},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    |cur_value| {","highlight_start":1,"highlight_end":34},{"text":"                        if let Some(mac) = *cur_value {","highlight_start":1,"highlight_end":56},{"text":"                            iface.borrow_mut().set_ethernet_addr(mac);","highlight_start":1,"highlight_end":71},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/mac\");","highlight_start":1,"highlight_end":86},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"                \"addr\" => {","highlight_start":1,"highlight_end":28},{"text":"                    \"list\" => {","highlight_start":1,"highlight_end":32},{"text":"                        ro [iface]","highlight_start":1,"highlight_end":35},{"text":"                        || {","highlight_start":1,"highlight_end":29},{"text":"                            let mut ips = String::new();","highlight_start":1,"highlight_end":57},{"text":"                            for cidr in iface.borrow().ip_addrs() {","highlight_start":1,"highlight_end":68},{"text":"                                ips += &format!(\"{}\\n\", cidr);","highlight_start":1,"highlight_end":63},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            ips","highlight_start":1,"highlight_end":32},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"set\" => {","highlight_start":1,"highlight_end":31},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            if !cur_value.is_empty() {","highlight_start":1,"highlight_end":55},{"text":"                                let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":68},{"text":"                                let mut cidrs = vec![];","highlight_start":1,"highlight_end":56},{"text":"                                mem::swap(cur_value, &mut cidrs);","highlight_start":1,"highlight_end":66},{"text":"                                iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":60},{"text":"                                    *s = From::from(cidrs);","highlight_start":1,"highlight_end":60},{"text":"                                });","highlight_start":1,"highlight_end":36},{"text":"                                notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":96},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"add\" => {","highlight_start":1,"highlight_end":31},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":64},{"text":"                            let mut cidrs = iface.ip_addrs().to_vec();","highlight_start":1,"highlight_end":71},{"text":"                            for cidr in cur_value {","highlight_start":1,"highlight_end":52},{"text":"                                cidrs.insert(0, *cidr);","highlight_start":1,"highlight_end":56},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":56},{"text":"                                *s = From::from(cidrs);","highlight_start":1,"highlight_end":56},{"text":"                            });","highlight_start":1,"highlight_end":32},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":92},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"rm\" => {","highlight_start":1,"highlight_end":30},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":64},{"text":"                            let mut cidrs = iface.ip_addrs().to_vec();","highlight_start":1,"highlight_end":71},{"text":"                            for cidr in cur_value {","highlight_start":1,"highlight_end":52},{"text":"                                let pre_retain_len = cidrs.len();","highlight_start":1,"highlight_end":66},{"text":"                                cidrs.retain(|&c| c != *cidr);","highlight_start":1,"highlight_end":63},{"text":"                                if pre_retain_len == cidrs.len() {","highlight_start":1,"highlight_end":67},{"text":"                                    return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":84},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":56},{"text":"                                *s = From::from(cidrs);","highlight_start":1,"highlight_end":56},{"text":"                            });","highlight_start":1,"highlight_end":32},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":92},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"`#[warn(redundant_semicolons)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this semicolon","code":null,"level":"help","spans":[{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":5443,"byte_end":5444,"line_start":247,"line_end":247,"column_start":64,"column_end":65,"is_primary":true,"text":[{"text":"            $(#[allow(unused_variables)] let $c = $c.clone();)*;","highlight_start":64,"highlight_end":65}],"label":null,"suggested_replacement":"","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":6209,"byte_end":6226,"line_start":266,"line_end":266,"column_start":42,"column_end":59,"is_primary":false,"text":[{"text":"            $(children.insert($e.into(), cfg_node!($($t)*));)*","highlight_start":42,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":6209,"byte_end":6226,"line_start":266,"line_end":266,"column_start":42,"column_end":59,"is_primary":false,"text":[{"text":"            $(children.insert($e.into(), cfg_node!($($t)*));)*","highlight_start":42,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/mod.rs","byte_start":1546,"byte_end":11568,"line_start":51,"line_end":273,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    cfg_node!{","highlight_start":5,"highlight_end":15},{"text":"        \"resolv\" => {","highlight_start":1,"highlight_end":22},{"text":"            \"nameserver\" => {","highlight_start":1,"highlight_end":30},{"text":"                rw [dns_config, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":70},{"text":"                || {","highlight_start":1,"highlight_end":21},{"text":"                    format!(\"{}\\n\", dns_config.borrow().name_server)","highlight_start":1,"highlight_end":69},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let ip = Ipv4Address::from_str(line.trim())","highlight_start":1,"highlight_end":68},{"text":"                            .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":79},{"text":"                        if !ip.is_unicast() {","highlight_start":1,"highlight_end":46},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(ip);","highlight_start":1,"highlight_end":47},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(ip) = *cur_value {","highlight_start":1,"highlight_end":51},{"text":"                        dns_config.borrow_mut().name_server = ip;","highlight_start":1,"highlight_end":66},{"text":"                        notifier.borrow_mut().schedule_notify(\"resolv/nameserver\");","highlight_start":1,"highlight_end":84},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    Ok(())","highlight_start":1,"highlight_end":27},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        \"route\" => {","highlight_start":1,"highlight_end":21},{"text":"            \"list\" => {","highlight_start":1,"highlight_end":24},{"text":"                ro [iface] || {","highlight_start":1,"highlight_end":32},{"text":"                    let mut gateway = None;","highlight_start":1,"highlight_end":44},{"text":"                    iface.borrow_mut().routes_mut().update(|map| {","highlight_start":1,"highlight_end":67},{"text":"                        gateway = map.get(&gateway_cidr()).map(|route| route.via_router);","highlight_start":1,"highlight_end":90},{"text":"                    });","highlight_start":1,"highlight_end":24},{"text":"                    if let Some(ip) = gateway {","highlight_start":1,"highlight_end":48},{"text":"                        format!(\"default via {}\\n\", ip)","highlight_start":1,"highlight_end":56},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        String::new()","highlight_start":1,"highlight_end":38},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            \"add\" => {","highlight_start":1,"highlight_end":23},{"text":"                wo [iface, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":65},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let default_gw = parse_default_gw(line)?;","highlight_start":1,"highlight_end":66},{"text":"                        if !default_gw.is_unicast() {","highlight_start":1,"highlight_end":54},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(default_gw);","highlight_start":1,"highlight_end":55},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(default_gw) = *cur_value {","highlight_start":1,"highlight_end":59},{"text":"                        if iface.borrow_mut().routes_mut().add_default_ipv4_route(default_gw).is_err() {","highlight_start":1,"highlight_end":105},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        notifier.borrow_mut().schedule_notify(\"route/list\");","highlight_start":1,"highlight_end":77},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            \"rm\" => {","highlight_start":1,"highlight_end":22},{"text":"                wo [iface, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":65},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let default_gw = parse_default_gw(line)?;","highlight_start":1,"highlight_end":66},{"text":"                        if !default_gw.is_unicast() {","highlight_start":1,"highlight_end":54},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(default_gw);","highlight_start":1,"highlight_end":55},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(default_gw) = *cur_value {","highlight_start":1,"highlight_end":59},{"text":"                        let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":60},{"text":"                        let mut gateway = None;","highlight_start":1,"highlight_end":48},{"text":"                        iface.routes_mut().update(|map| {","highlight_start":1,"highlight_end":58},{"text":"                            gateway = map.get(&gateway_cidr()).map(|route| route.via_router);","highlight_start":1,"highlight_end":94},{"text":"                        });","highlight_start":1,"highlight_end":28},{"text":"                        if gateway != Some(IpAddress::Ipv4(default_gw)) {","highlight_start":1,"highlight_end":74},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        iface.routes_mut().update(|map| {","highlight_start":1,"highlight_end":58},{"text":"                            map.remove(&gateway_cidr());","highlight_start":1,"highlight_end":57},{"text":"                        });","highlight_start":1,"highlight_end":28},{"text":"                        notifier.borrow_mut().schedule_notify(\"route/list\");","highlight_start":1,"highlight_end":77},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        \"ifaces\" => {","highlight_start":1,"highlight_end":22},{"text":"            \"eth0\" => {","highlight_start":1,"highlight_end":24},{"text":"                \"mac\" => {","highlight_start":1,"highlight_end":27},{"text":"                    rw [iface, notifier] (Option<EthernetAddress>, None)","highlight_start":1,"highlight_end":73},{"text":"                    || {","highlight_start":1,"highlight_end":25},{"text":"                        format!(\"{}\\n\", iface.borrow().ethernet_addr())","highlight_start":1,"highlight_end":72},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    |cur_value, line| {","highlight_start":1,"highlight_end":40},{"text":"                        if cur_value.is_none() {","highlight_start":1,"highlight_end":49},{"text":"                            let mac = EthernetAddress::from_str(line).","highlight_start":1,"highlight_end":71},{"text":"                                map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":82},{"text":"                            if !mac.is_unicast() {","highlight_start":1,"highlight_end":51},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            *cur_value = Some(mac);","highlight_start":1,"highlight_end":52},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        } else {","highlight_start":1,"highlight_end":33},{"text":"                            Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":68},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    |cur_value| {","highlight_start":1,"highlight_end":34},{"text":"                        if let Some(mac) = *cur_value {","highlight_start":1,"highlight_end":56},{"text":"                            iface.borrow_mut().set_ethernet_addr(mac);","highlight_start":1,"highlight_end":71},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/mac\");","highlight_start":1,"highlight_end":86},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"                \"addr\" => {","highlight_start":1,"highlight_end":28},{"text":"                    \"list\" => {","highlight_start":1,"highlight_end":32},{"text":"                        ro [iface]","highlight_start":1,"highlight_end":35},{"text":"                        || {","highlight_start":1,"highlight_end":29},{"text":"                            let mut ips = String::new();","highlight_start":1,"highlight_end":57},{"text":"                            for cidr in iface.borrow().ip_addrs() {","highlight_start":1,"highlight_end":68},{"text":"                                ips += &format!(\"{}\\n\", cidr);","highlight_start":1,"highlight_end":63},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            ips","highlight_start":1,"highlight_end":32},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"set\" => {","highlight_start":1,"highlight_end":31},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            if !cur_value.is_empty() {","highlight_start":1,"highlight_end":55},{"text":"                                let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":68},{"text":"                                let mut cidrs = vec![];","highlight_start":1,"highlight_end":56},{"text":"                                mem::swap(cur_value, &mut cidrs);","highlight_start":1,"highlight_end":66},{"text":"                                iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":60},{"text":"                                    *s = From::from(cidrs);","highlight_start":1,"highlight_end":60},{"text":"                                });","highlight_start":1,"highlight_end":36},{"text":"                                notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":96},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"add\" => {","highlight_start":1,"highlight_end":31},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":64},{"text":"                            let mut cidrs = iface.ip_addrs().to_vec();","highlight_start":1,"highlight_end":71},{"text":"                            for cidr in cur_value {","highlight_start":1,"highlight_end":52},{"text":"                                cidrs.insert(0, *cidr);","highlight_start":1,"highlight_end":56},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":56},{"text":"                                *s = From::from(cidrs);","highlight_start":1,"highlight_end":56},{"text":"                            });","highlight_start":1,"highlight_end":32},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":92},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"rm\" => {","highlight_start":1,"highlight_end":30},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":64},{"text":"                            let mut cidrs = iface.ip_addrs().to_vec();","highlight_start":1,"highlight_end":71},{"text":"                            for cidr in cur_value {","highlight_start":1,"highlight_end":52},{"text":"                                let pre_retain_len = cidrs.len();","highlight_start":1,"highlight_end":66},{"text":"                                cidrs.retain(|&c| c != *cidr);","highlight_start":1,"highlight_end":63},{"text":"                                if pre_retain_len == cidrs.len() {","highlight_start":1,"highlight_end":67},{"text":"                                    return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":84},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":56},{"text":"                                *s = From::from(cidrs);","highlight_start":1,"highlight_end":56},{"text":"                            });","highlight_start":1,"highlight_end":32},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":92},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unnecessary trailing semicolon\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/smolnetd/scheme/netcfg/nodes.rs:247:64\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m247\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m            $(#[allow(unused_variables)] let $c = $c.clone();)*;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this semicolon\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0msrc/smolnetd/scheme/netcfg/mod.rs:51:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m51\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    cfg_node!{\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m52\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        \"resolv\" => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m53\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            \"nameserver\" => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m54\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                rw [dns_config, notifier] (Option<Ipv4Address>, None)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m272\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m273\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_____-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(redundant_semicolons)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `cfg_node` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"unnecessary trailing semicolon","code":{"code":"redundant_semicolons","explanation":null},"level":"warning","spans":[{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":5329,"byte_end":5330,"line_start":244,"line_end":244,"column_start":68,"column_end":69,"is_primary":true,"text":[{"text":"                $(#[allow(unused_variables)] let $c = $c.clone();)*;","highlight_start":68,"highlight_end":69}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":6209,"byte_end":6226,"line_start":266,"line_end":266,"column_start":42,"column_end":59,"is_primary":false,"text":[{"text":"            $(children.insert($e.into(), cfg_node!($($t)*));)*","highlight_start":42,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":6209,"byte_end":6226,"line_start":266,"line_end":266,"column_start":42,"column_end":59,"is_primary":false,"text":[{"text":"            $(children.insert($e.into(), cfg_node!($($t)*));)*","highlight_start":42,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/mod.rs","byte_start":1546,"byte_end":11568,"line_start":51,"line_end":273,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    cfg_node!{","highlight_start":5,"highlight_end":15},{"text":"        \"resolv\" => {","highlight_start":1,"highlight_end":22},{"text":"            \"nameserver\" => {","highlight_start":1,"highlight_end":30},{"text":"                rw [dns_config, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":70},{"text":"                || {","highlight_start":1,"highlight_end":21},{"text":"                    format!(\"{}\\n\", dns_config.borrow().name_server)","highlight_start":1,"highlight_end":69},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let ip = Ipv4Address::from_str(line.trim())","highlight_start":1,"highlight_end":68},{"text":"                            .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":79},{"text":"                        if !ip.is_unicast() {","highlight_start":1,"highlight_end":46},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(ip);","highlight_start":1,"highlight_end":47},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(ip) = *cur_value {","highlight_start":1,"highlight_end":51},{"text":"                        dns_config.borrow_mut().name_server = ip;","highlight_start":1,"highlight_end":66},{"text":"                        notifier.borrow_mut().schedule_notify(\"resolv/nameserver\");","highlight_start":1,"highlight_end":84},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    Ok(())","highlight_start":1,"highlight_end":27},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        \"route\" => {","highlight_start":1,"highlight_end":21},{"text":"            \"list\" => {","highlight_start":1,"highlight_end":24},{"text":"                ro [iface] || {","highlight_start":1,"highlight_end":32},{"text":"                    let mut gateway = None;","highlight_start":1,"highlight_end":44},{"text":"                    iface.borrow_mut().routes_mut().update(|map| {","highlight_start":1,"highlight_end":67},{"text":"                        gateway = map.get(&gateway_cidr()).map(|route| route.via_router);","highlight_start":1,"highlight_end":90},{"text":"                    });","highlight_start":1,"highlight_end":24},{"text":"                    if let Some(ip) = gateway {","highlight_start":1,"highlight_end":48},{"text":"                        format!(\"default via {}\\n\", ip)","highlight_start":1,"highlight_end":56},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        String::new()","highlight_start":1,"highlight_end":38},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            \"add\" => {","highlight_start":1,"highlight_end":23},{"text":"                wo [iface, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":65},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let default_gw = parse_default_gw(line)?;","highlight_start":1,"highlight_end":66},{"text":"                        if !default_gw.is_unicast() {","highlight_start":1,"highlight_end":54},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(default_gw);","highlight_start":1,"highlight_end":55},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(default_gw) = *cur_value {","highlight_start":1,"highlight_end":59},{"text":"                        if iface.borrow_mut().routes_mut().add_default_ipv4_route(default_gw).is_err() {","highlight_start":1,"highlight_end":105},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        notifier.borrow_mut().schedule_notify(\"route/list\");","highlight_start":1,"highlight_end":77},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            \"rm\" => {","highlight_start":1,"highlight_end":22},{"text":"                wo [iface, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":65},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let default_gw = parse_default_gw(line)?;","highlight_start":1,"highlight_end":66},{"text":"                        if !default_gw.is_unicast() {","highlight_start":1,"highlight_end":54},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(default_gw);","highlight_start":1,"highlight_end":55},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(default_gw) = *cur_value {","highlight_start":1,"highlight_end":59},{"text":"                        let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":60},{"text":"                        let mut gateway = None;","highlight_start":1,"highlight_end":48},{"text":"                        iface.routes_mut().update(|map| {","highlight_start":1,"highlight_end":58},{"text":"                            gateway = map.get(&gateway_cidr()).map(|route| route.via_router);","highlight_start":1,"highlight_end":94},{"text":"                        });","highlight_start":1,"highlight_end":28},{"text":"                        if gateway != Some(IpAddress::Ipv4(default_gw)) {","highlight_start":1,"highlight_end":74},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        iface.routes_mut().update(|map| {","highlight_start":1,"highlight_end":58},{"text":"                            map.remove(&gateway_cidr());","highlight_start":1,"highlight_end":57},{"text":"                        });","highlight_start":1,"highlight_end":28},{"text":"                        notifier.borrow_mut().schedule_notify(\"route/list\");","highlight_start":1,"highlight_end":77},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        \"ifaces\" => {","highlight_start":1,"highlight_end":22},{"text":"            \"eth0\" => {","highlight_start":1,"highlight_end":24},{"text":"                \"mac\" => {","highlight_start":1,"highlight_end":27},{"text":"                    rw [iface, notifier] (Option<EthernetAddress>, None)","highlight_start":1,"highlight_end":73},{"text":"                    || {","highlight_start":1,"highlight_end":25},{"text":"                        format!(\"{}\\n\", iface.borrow().ethernet_addr())","highlight_start":1,"highlight_end":72},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    |cur_value, line| {","highlight_start":1,"highlight_end":40},{"text":"                        if cur_value.is_none() {","highlight_start":1,"highlight_end":49},{"text":"                            let mac = EthernetAddress::from_str(line).","highlight_start":1,"highlight_end":71},{"text":"                                map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":82},{"text":"                            if !mac.is_unicast() {","highlight_start":1,"highlight_end":51},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            *cur_value = Some(mac);","highlight_start":1,"highlight_end":52},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        } else {","highlight_start":1,"highlight_end":33},{"text":"                            Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":68},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    |cur_value| {","highlight_start":1,"highlight_end":34},{"text":"                        if let Some(mac) = *cur_value {","highlight_start":1,"highlight_end":56},{"text":"                            iface.borrow_mut().set_ethernet_addr(mac);","highlight_start":1,"highlight_end":71},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/mac\");","highlight_start":1,"highlight_end":86},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"                \"addr\" => {","highlight_start":1,"highlight_end":28},{"text":"                    \"list\" => {","highlight_start":1,"highlight_end":32},{"text":"                        ro [iface]","highlight_start":1,"highlight_end":35},{"text":"                        || {","highlight_start":1,"highlight_end":29},{"text":"                            let mut ips = String::new();","highlight_start":1,"highlight_end":57},{"text":"                            for cidr in iface.borrow().ip_addrs() {","highlight_start":1,"highlight_end":68},{"text":"                                ips += &format!(\"{}\\n\", cidr);","highlight_start":1,"highlight_end":63},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            ips","highlight_start":1,"highlight_end":32},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"set\" => {","highlight_start":1,"highlight_end":31},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            if !cur_value.is_empty() {","highlight_start":1,"highlight_end":55},{"text":"                                let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":68},{"text":"                                let mut cidrs = vec![];","highlight_start":1,"highlight_end":56},{"text":"                                mem::swap(cur_value, &mut cidrs);","highlight_start":1,"highlight_end":66},{"text":"                                iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":60},{"text":"                                    *s = From::from(cidrs);","highlight_start":1,"highlight_end":60},{"text":"                                });","highlight_start":1,"highlight_end":36},{"text":"                                notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":96},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"add\" => {","highlight_start":1,"highlight_end":31},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":64},{"text":"                            let mut cidrs = iface.ip_addrs().to_vec();","highlight_start":1,"highlight_end":71},{"text":"                            for cidr in cur_value {","highlight_start":1,"highlight_end":52},{"text":"                                cidrs.insert(0, *cidr);","highlight_start":1,"highlight_end":56},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":56},{"text":"                                *s = From::from(cidrs);","highlight_start":1,"highlight_end":56},{"text":"                            });","highlight_start":1,"highlight_end":32},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":92},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"rm\" => {","highlight_start":1,"highlight_end":30},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":64},{"text":"                            let mut cidrs = iface.ip_addrs().to_vec();","highlight_start":1,"highlight_end":71},{"text":"                            for cidr in cur_value {","highlight_start":1,"highlight_end":52},{"text":"                                let pre_retain_len = cidrs.len();","highlight_start":1,"highlight_end":66},{"text":"                                cidrs.retain(|&c| c != *cidr);","highlight_start":1,"highlight_end":63},{"text":"                                if pre_retain_len == cidrs.len() {","highlight_start":1,"highlight_end":67},{"text":"                                    return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":84},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":56},{"text":"                                *s = From::from(cidrs);","highlight_start":1,"highlight_end":56},{"text":"                            });","highlight_start":1,"highlight_end":32},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":92},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"remove this semicolon","code":null,"level":"help","spans":[{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":5329,"byte_end":5330,"line_start":244,"line_end":244,"column_start":68,"column_end":69,"is_primary":true,"text":[{"text":"                $(#[allow(unused_variables)] let $c = $c.clone();)*;","highlight_start":68,"highlight_end":69}],"label":null,"suggested_replacement":"","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":6209,"byte_end":6226,"line_start":266,"line_end":266,"column_start":42,"column_end":59,"is_primary":false,"text":[{"text":"            $(children.insert($e.into(), cfg_node!($($t)*));)*","highlight_start":42,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":6209,"byte_end":6226,"line_start":266,"line_end":266,"column_start":42,"column_end":59,"is_primary":false,"text":[{"text":"            $(children.insert($e.into(), cfg_node!($($t)*));)*","highlight_start":42,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/mod.rs","byte_start":1546,"byte_end":11568,"line_start":51,"line_end":273,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    cfg_node!{","highlight_start":5,"highlight_end":15},{"text":"        \"resolv\" => {","highlight_start":1,"highlight_end":22},{"text":"            \"nameserver\" => {","highlight_start":1,"highlight_end":30},{"text":"                rw [dns_config, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":70},{"text":"                || {","highlight_start":1,"highlight_end":21},{"text":"                    format!(\"{}\\n\", dns_config.borrow().name_server)","highlight_start":1,"highlight_end":69},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let ip = Ipv4Address::from_str(line.trim())","highlight_start":1,"highlight_end":68},{"text":"                            .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":79},{"text":"                        if !ip.is_unicast() {","highlight_start":1,"highlight_end":46},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(ip);","highlight_start":1,"highlight_end":47},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(ip) = *cur_value {","highlight_start":1,"highlight_end":51},{"text":"                        dns_config.borrow_mut().name_server = ip;","highlight_start":1,"highlight_end":66},{"text":"                        notifier.borrow_mut().schedule_notify(\"resolv/nameserver\");","highlight_start":1,"highlight_end":84},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    Ok(())","highlight_start":1,"highlight_end":27},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        \"route\" => {","highlight_start":1,"highlight_end":21},{"text":"            \"list\" => {","highlight_start":1,"highlight_end":24},{"text":"                ro [iface] || {","highlight_start":1,"highlight_end":32},{"text":"                    let mut gateway = None;","highlight_start":1,"highlight_end":44},{"text":"                    iface.borrow_mut().routes_mut().update(|map| {","highlight_start":1,"highlight_end":67},{"text":"                        gateway = map.get(&gateway_cidr()).map(|route| route.via_router);","highlight_start":1,"highlight_end":90},{"text":"                    });","highlight_start":1,"highlight_end":24},{"text":"                    if let Some(ip) = gateway {","highlight_start":1,"highlight_end":48},{"text":"                        format!(\"default via {}\\n\", ip)","highlight_start":1,"highlight_end":56},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        String::new()","highlight_start":1,"highlight_end":38},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            \"add\" => {","highlight_start":1,"highlight_end":23},{"text":"                wo [iface, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":65},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let default_gw = parse_default_gw(line)?;","highlight_start":1,"highlight_end":66},{"text":"                        if !default_gw.is_unicast() {","highlight_start":1,"highlight_end":54},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(default_gw);","highlight_start":1,"highlight_end":55},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(default_gw) = *cur_value {","highlight_start":1,"highlight_end":59},{"text":"                        if iface.borrow_mut().routes_mut().add_default_ipv4_route(default_gw).is_err() {","highlight_start":1,"highlight_end":105},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        notifier.borrow_mut().schedule_notify(\"route/list\");","highlight_start":1,"highlight_end":77},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            \"rm\" => {","highlight_start":1,"highlight_end":22},{"text":"                wo [iface, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":65},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let default_gw = parse_default_gw(line)?;","highlight_start":1,"highlight_end":66},{"text":"                        if !default_gw.is_unicast() {","highlight_start":1,"highlight_end":54},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(default_gw);","highlight_start":1,"highlight_end":55},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(default_gw) = *cur_value {","highlight_start":1,"highlight_end":59},{"text":"                        let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":60},{"text":"                        let mut gateway = None;","highlight_start":1,"highlight_end":48},{"text":"                        iface.routes_mut().update(|map| {","highlight_start":1,"highlight_end":58},{"text":"                            gateway = map.get(&gateway_cidr()).map(|route| route.via_router);","highlight_start":1,"highlight_end":94},{"text":"                        });","highlight_start":1,"highlight_end":28},{"text":"                        if gateway != Some(IpAddress::Ipv4(default_gw)) {","highlight_start":1,"highlight_end":74},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        iface.routes_mut().update(|map| {","highlight_start":1,"highlight_end":58},{"text":"                            map.remove(&gateway_cidr());","highlight_start":1,"highlight_end":57},{"text":"                        });","highlight_start":1,"highlight_end":28},{"text":"                        notifier.borrow_mut().schedule_notify(\"route/list\");","highlight_start":1,"highlight_end":77},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        \"ifaces\" => {","highlight_start":1,"highlight_end":22},{"text":"            \"eth0\" => {","highlight_start":1,"highlight_end":24},{"text":"                \"mac\" => {","highlight_start":1,"highlight_end":27},{"text":"                    rw [iface, notifier] (Option<EthernetAddress>, None)","highlight_start":1,"highlight_end":73},{"text":"                    || {","highlight_start":1,"highlight_end":25},{"text":"                        format!(\"{}\\n\", iface.borrow().ethernet_addr())","highlight_start":1,"highlight_end":72},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    |cur_value, line| {","highlight_start":1,"highlight_end":40},{"text":"                        if cur_value.is_none() {","highlight_start":1,"highlight_end":49},{"text":"                            let mac = EthernetAddress::from_str(line).","highlight_start":1,"highlight_end":71},{"text":"                                map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":82},{"text":"                            if !mac.is_unicast() {","highlight_start":1,"highlight_end":51},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            *cur_value = Some(mac);","highlight_start":1,"highlight_end":52},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        } else {","highlight_start":1,"highlight_end":33},{"text":"                            Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":68},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    |cur_value| {","highlight_start":1,"highlight_end":34},{"text":"                        if let Some(mac) = *cur_value {","highlight_start":1,"highlight_end":56},{"text":"                            iface.borrow_mut().set_ethernet_addr(mac);","highlight_start":1,"highlight_end":71},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/mac\");","highlight_start":1,"highlight_end":86},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"                \"addr\" => {","highlight_start":1,"highlight_end":28},{"text":"                    \"list\" => {","highlight_start":1,"highlight_end":32},{"text":"                        ro [iface]","highlight_start":1,"highlight_end":35},{"text":"                        || {","highlight_start":1,"highlight_end":29},{"text":"                            let mut ips = String::new();","highlight_start":1,"highlight_end":57},{"text":"                            for cidr in iface.borrow().ip_addrs() {","highlight_start":1,"highlight_end":68},{"text":"                                ips += &format!(\"{}\\n\", cidr);","highlight_start":1,"highlight_end":63},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            ips","highlight_start":1,"highlight_end":32},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"set\" => {","highlight_start":1,"highlight_end":31},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            if !cur_value.is_empty() {","highlight_start":1,"highlight_end":55},{"text":"                                let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":68},{"text":"                                let mut cidrs = vec![];","highlight_start":1,"highlight_end":56},{"text":"                                mem::swap(cur_value, &mut cidrs);","highlight_start":1,"highlight_end":66},{"text":"                                iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":60},{"text":"                                    *s = From::from(cidrs);","highlight_start":1,"highlight_end":60},{"text":"                                });","highlight_start":1,"highlight_end":36},{"text":"                                notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":96},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"add\" => {","highlight_start":1,"highlight_end":31},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":64},{"text":"                            let mut cidrs = iface.ip_addrs().to_vec();","highlight_start":1,"highlight_end":71},{"text":"                            for cidr in cur_value {","highlight_start":1,"highlight_end":52},{"text":"                                cidrs.insert(0, *cidr);","highlight_start":1,"highlight_end":56},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":56},{"text":"                                *s = From::from(cidrs);","highlight_start":1,"highlight_end":56},{"text":"                            });","highlight_start":1,"highlight_end":32},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":92},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"rm\" => {","highlight_start":1,"highlight_end":30},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":64},{"text":"                            let mut cidrs = iface.ip_addrs().to_vec();","highlight_start":1,"highlight_end":71},{"text":"                            for cidr in cur_value {","highlight_start":1,"highlight_end":52},{"text":"                                let pre_retain_len = cidrs.len();","highlight_start":1,"highlight_end":66},{"text":"                                cidrs.retain(|&c| c != *cidr);","highlight_start":1,"highlight_end":63},{"text":"                                if pre_retain_len == cidrs.len() {","highlight_start":1,"highlight_end":67},{"text":"                                    return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":84},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":56},{"text":"                                *s = From::from(cidrs);","highlight_start":1,"highlight_end":56},{"text":"                            });","highlight_start":1,"highlight_end":32},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":92},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unnecessary trailing semicolon\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/smolnetd/scheme/netcfg/nodes.rs:244:68\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m244\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m                $(#[allow(unused_variables)] let $c = $c.clone();)*;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this semicolon\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0msrc/smolnetd/scheme/netcfg/mod.rs:51:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m51\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    cfg_node!{\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m52\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        \"resolv\" => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m53\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            \"nameserver\" => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m54\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                rw [dns_config, notifier] (Option<Ipv4Address>, None)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m272\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m273\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_____-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `cfg_node` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"unnecessary trailing semicolon","code":{"code":"redundant_semicolons","explanation":null},"level":"warning","spans":[{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":5609,"byte_end":5610,"line_start":250,"line_end":250,"column_start":72,"column_end":73,"is_primary":true,"text":[{"text":"                    $(#[allow(unused_variables)] let $c = $c.clone();)*;","highlight_start":72,"highlight_end":73}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":6209,"byte_end":6226,"line_start":266,"line_end":266,"column_start":42,"column_end":59,"is_primary":false,"text":[{"text":"            $(children.insert($e.into(), cfg_node!($($t)*));)*","highlight_start":42,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":6209,"byte_end":6226,"line_start":266,"line_end":266,"column_start":42,"column_end":59,"is_primary":false,"text":[{"text":"            $(children.insert($e.into(), cfg_node!($($t)*));)*","highlight_start":42,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/mod.rs","byte_start":1546,"byte_end":11568,"line_start":51,"line_end":273,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    cfg_node!{","highlight_start":5,"highlight_end":15},{"text":"        \"resolv\" => {","highlight_start":1,"highlight_end":22},{"text":"            \"nameserver\" => {","highlight_start":1,"highlight_end":30},{"text":"                rw [dns_config, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":70},{"text":"                || {","highlight_start":1,"highlight_end":21},{"text":"                    format!(\"{}\\n\", dns_config.borrow().name_server)","highlight_start":1,"highlight_end":69},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let ip = Ipv4Address::from_str(line.trim())","highlight_start":1,"highlight_end":68},{"text":"                            .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":79},{"text":"                        if !ip.is_unicast() {","highlight_start":1,"highlight_end":46},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(ip);","highlight_start":1,"highlight_end":47},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(ip) = *cur_value {","highlight_start":1,"highlight_end":51},{"text":"                        dns_config.borrow_mut().name_server = ip;","highlight_start":1,"highlight_end":66},{"text":"                        notifier.borrow_mut().schedule_notify(\"resolv/nameserver\");","highlight_start":1,"highlight_end":84},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    Ok(())","highlight_start":1,"highlight_end":27},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        \"route\" => {","highlight_start":1,"highlight_end":21},{"text":"            \"list\" => {","highlight_start":1,"highlight_end":24},{"text":"                ro [iface] || {","highlight_start":1,"highlight_end":32},{"text":"                    let mut gateway = None;","highlight_start":1,"highlight_end":44},{"text":"                    iface.borrow_mut().routes_mut().update(|map| {","highlight_start":1,"highlight_end":67},{"text":"                        gateway = map.get(&gateway_cidr()).map(|route| route.via_router);","highlight_start":1,"highlight_end":90},{"text":"                    });","highlight_start":1,"highlight_end":24},{"text":"                    if let Some(ip) = gateway {","highlight_start":1,"highlight_end":48},{"text":"                        format!(\"default via {}\\n\", ip)","highlight_start":1,"highlight_end":56},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        String::new()","highlight_start":1,"highlight_end":38},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            \"add\" => {","highlight_start":1,"highlight_end":23},{"text":"                wo [iface, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":65},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let default_gw = parse_default_gw(line)?;","highlight_start":1,"highlight_end":66},{"text":"                        if !default_gw.is_unicast() {","highlight_start":1,"highlight_end":54},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(default_gw);","highlight_start":1,"highlight_end":55},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(default_gw) = *cur_value {","highlight_start":1,"highlight_end":59},{"text":"                        if iface.borrow_mut().routes_mut().add_default_ipv4_route(default_gw).is_err() {","highlight_start":1,"highlight_end":105},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        notifier.borrow_mut().schedule_notify(\"route/list\");","highlight_start":1,"highlight_end":77},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            \"rm\" => {","highlight_start":1,"highlight_end":22},{"text":"                wo [iface, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":65},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let default_gw = parse_default_gw(line)?;","highlight_start":1,"highlight_end":66},{"text":"                        if !default_gw.is_unicast() {","highlight_start":1,"highlight_end":54},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(default_gw);","highlight_start":1,"highlight_end":55},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(default_gw) = *cur_value {","highlight_start":1,"highlight_end":59},{"text":"                        let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":60},{"text":"                        let mut gateway = None;","highlight_start":1,"highlight_end":48},{"text":"                        iface.routes_mut().update(|map| {","highlight_start":1,"highlight_end":58},{"text":"                            gateway = map.get(&gateway_cidr()).map(|route| route.via_router);","highlight_start":1,"highlight_end":94},{"text":"                        });","highlight_start":1,"highlight_end":28},{"text":"                        if gateway != Some(IpAddress::Ipv4(default_gw)) {","highlight_start":1,"highlight_end":74},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        iface.routes_mut().update(|map| {","highlight_start":1,"highlight_end":58},{"text":"                            map.remove(&gateway_cidr());","highlight_start":1,"highlight_end":57},{"text":"                        });","highlight_start":1,"highlight_end":28},{"text":"                        notifier.borrow_mut().schedule_notify(\"route/list\");","highlight_start":1,"highlight_end":77},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        \"ifaces\" => {","highlight_start":1,"highlight_end":22},{"text":"            \"eth0\" => {","highlight_start":1,"highlight_end":24},{"text":"                \"mac\" => {","highlight_start":1,"highlight_end":27},{"text":"                    rw [iface, notifier] (Option<EthernetAddress>, None)","highlight_start":1,"highlight_end":73},{"text":"                    || {","highlight_start":1,"highlight_end":25},{"text":"                        format!(\"{}\\n\", iface.borrow().ethernet_addr())","highlight_start":1,"highlight_end":72},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    |cur_value, line| {","highlight_start":1,"highlight_end":40},{"text":"                        if cur_value.is_none() {","highlight_start":1,"highlight_end":49},{"text":"                            let mac = EthernetAddress::from_str(line).","highlight_start":1,"highlight_end":71},{"text":"                                map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":82},{"text":"                            if !mac.is_unicast() {","highlight_start":1,"highlight_end":51},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            *cur_value = Some(mac);","highlight_start":1,"highlight_end":52},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        } else {","highlight_start":1,"highlight_end":33},{"text":"                            Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":68},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    |cur_value| {","highlight_start":1,"highlight_end":34},{"text":"                        if let Some(mac) = *cur_value {","highlight_start":1,"highlight_end":56},{"text":"                            iface.borrow_mut().set_ethernet_addr(mac);","highlight_start":1,"highlight_end":71},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/mac\");","highlight_start":1,"highlight_end":86},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"                \"addr\" => {","highlight_start":1,"highlight_end":28},{"text":"                    \"list\" => {","highlight_start":1,"highlight_end":32},{"text":"                        ro [iface]","highlight_start":1,"highlight_end":35},{"text":"                        || {","highlight_start":1,"highlight_end":29},{"text":"                            let mut ips = String::new();","highlight_start":1,"highlight_end":57},{"text":"                            for cidr in iface.borrow().ip_addrs() {","highlight_start":1,"highlight_end":68},{"text":"                                ips += &format!(\"{}\\n\", cidr);","highlight_start":1,"highlight_end":63},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            ips","highlight_start":1,"highlight_end":32},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"set\" => {","highlight_start":1,"highlight_end":31},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            if !cur_value.is_empty() {","highlight_start":1,"highlight_end":55},{"text":"                                let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":68},{"text":"                                let mut cidrs = vec![];","highlight_start":1,"highlight_end":56},{"text":"                                mem::swap(cur_value, &mut cidrs);","highlight_start":1,"highlight_end":66},{"text":"                                iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":60},{"text":"                                    *s = From::from(cidrs);","highlight_start":1,"highlight_end":60},{"text":"                                });","highlight_start":1,"highlight_end":36},{"text":"                                notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":96},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"add\" => {","highlight_start":1,"highlight_end":31},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":64},{"text":"                            let mut cidrs = iface.ip_addrs().to_vec();","highlight_start":1,"highlight_end":71},{"text":"                            for cidr in cur_value {","highlight_start":1,"highlight_end":52},{"text":"                                cidrs.insert(0, *cidr);","highlight_start":1,"highlight_end":56},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":56},{"text":"                                *s = From::from(cidrs);","highlight_start":1,"highlight_end":56},{"text":"                            });","highlight_start":1,"highlight_end":32},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":92},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"rm\" => {","highlight_start":1,"highlight_end":30},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":64},{"text":"                            let mut cidrs = iface.ip_addrs().to_vec();","highlight_start":1,"highlight_end":71},{"text":"                            for cidr in cur_value {","highlight_start":1,"highlight_end":52},{"text":"                                let pre_retain_len = cidrs.len();","highlight_start":1,"highlight_end":66},{"text":"                                cidrs.retain(|&c| c != *cidr);","highlight_start":1,"highlight_end":63},{"text":"                                if pre_retain_len == cidrs.len() {","highlight_start":1,"highlight_end":67},{"text":"                                    return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":84},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":56},{"text":"                                *s = From::from(cidrs);","highlight_start":1,"highlight_end":56},{"text":"                            });","highlight_start":1,"highlight_end":32},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":92},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"remove this semicolon","code":null,"level":"help","spans":[{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":5609,"byte_end":5610,"line_start":250,"line_end":250,"column_start":72,"column_end":73,"is_primary":true,"text":[{"text":"                    $(#[allow(unused_variables)] let $c = $c.clone();)*;","highlight_start":72,"highlight_end":73}],"label":null,"suggested_replacement":"","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":6209,"byte_end":6226,"line_start":266,"line_end":266,"column_start":42,"column_end":59,"is_primary":false,"text":[{"text":"            $(children.insert($e.into(), cfg_node!($($t)*));)*","highlight_start":42,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":6209,"byte_end":6226,"line_start":266,"line_end":266,"column_start":42,"column_end":59,"is_primary":false,"text":[{"text":"            $(children.insert($e.into(), cfg_node!($($t)*));)*","highlight_start":42,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/mod.rs","byte_start":1546,"byte_end":11568,"line_start":51,"line_end":273,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    cfg_node!{","highlight_start":5,"highlight_end":15},{"text":"        \"resolv\" => {","highlight_start":1,"highlight_end":22},{"text":"            \"nameserver\" => {","highlight_start":1,"highlight_end":30},{"text":"                rw [dns_config, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":70},{"text":"                || {","highlight_start":1,"highlight_end":21},{"text":"                    format!(\"{}\\n\", dns_config.borrow().name_server)","highlight_start":1,"highlight_end":69},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let ip = Ipv4Address::from_str(line.trim())","highlight_start":1,"highlight_end":68},{"text":"                            .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":79},{"text":"                        if !ip.is_unicast() {","highlight_start":1,"highlight_end":46},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(ip);","highlight_start":1,"highlight_end":47},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(ip) = *cur_value {","highlight_start":1,"highlight_end":51},{"text":"                        dns_config.borrow_mut().name_server = ip;","highlight_start":1,"highlight_end":66},{"text":"                        notifier.borrow_mut().schedule_notify(\"resolv/nameserver\");","highlight_start":1,"highlight_end":84},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    Ok(())","highlight_start":1,"highlight_end":27},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        \"route\" => {","highlight_start":1,"highlight_end":21},{"text":"            \"list\" => {","highlight_start":1,"highlight_end":24},{"text":"                ro [iface] || {","highlight_start":1,"highlight_end":32},{"text":"                    let mut gateway = None;","highlight_start":1,"highlight_end":44},{"text":"                    iface.borrow_mut().routes_mut().update(|map| {","highlight_start":1,"highlight_end":67},{"text":"                        gateway = map.get(&gateway_cidr()).map(|route| route.via_router);","highlight_start":1,"highlight_end":90},{"text":"                    });","highlight_start":1,"highlight_end":24},{"text":"                    if let Some(ip) = gateway {","highlight_start":1,"highlight_end":48},{"text":"                        format!(\"default via {}\\n\", ip)","highlight_start":1,"highlight_end":56},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        String::new()","highlight_start":1,"highlight_end":38},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            \"add\" => {","highlight_start":1,"highlight_end":23},{"text":"                wo [iface, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":65},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let default_gw = parse_default_gw(line)?;","highlight_start":1,"highlight_end":66},{"text":"                        if !default_gw.is_unicast() {","highlight_start":1,"highlight_end":54},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(default_gw);","highlight_start":1,"highlight_end":55},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(default_gw) = *cur_value {","highlight_start":1,"highlight_end":59},{"text":"                        if iface.borrow_mut().routes_mut().add_default_ipv4_route(default_gw).is_err() {","highlight_start":1,"highlight_end":105},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        notifier.borrow_mut().schedule_notify(\"route/list\");","highlight_start":1,"highlight_end":77},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            \"rm\" => {","highlight_start":1,"highlight_end":22},{"text":"                wo [iface, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":65},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let default_gw = parse_default_gw(line)?;","highlight_start":1,"highlight_end":66},{"text":"                        if !default_gw.is_unicast() {","highlight_start":1,"highlight_end":54},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(default_gw);","highlight_start":1,"highlight_end":55},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(default_gw) = *cur_value {","highlight_start":1,"highlight_end":59},{"text":"                        let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":60},{"text":"                        let mut gateway = None;","highlight_start":1,"highlight_end":48},{"text":"                        iface.routes_mut().update(|map| {","highlight_start":1,"highlight_end":58},{"text":"                            gateway = map.get(&gateway_cidr()).map(|route| route.via_router);","highlight_start":1,"highlight_end":94},{"text":"                        });","highlight_start":1,"highlight_end":28},{"text":"                        if gateway != Some(IpAddress::Ipv4(default_gw)) {","highlight_start":1,"highlight_end":74},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        iface.routes_mut().update(|map| {","highlight_start":1,"highlight_end":58},{"text":"                            map.remove(&gateway_cidr());","highlight_start":1,"highlight_end":57},{"text":"                        });","highlight_start":1,"highlight_end":28},{"text":"                        notifier.borrow_mut().schedule_notify(\"route/list\");","highlight_start":1,"highlight_end":77},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        \"ifaces\" => {","highlight_start":1,"highlight_end":22},{"text":"            \"eth0\" => {","highlight_start":1,"highlight_end":24},{"text":"                \"mac\" => {","highlight_start":1,"highlight_end":27},{"text":"                    rw [iface, notifier] (Option<EthernetAddress>, None)","highlight_start":1,"highlight_end":73},{"text":"                    || {","highlight_start":1,"highlight_end":25},{"text":"                        format!(\"{}\\n\", iface.borrow().ethernet_addr())","highlight_start":1,"highlight_end":72},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    |cur_value, line| {","highlight_start":1,"highlight_end":40},{"text":"                        if cur_value.is_none() {","highlight_start":1,"highlight_end":49},{"text":"                            let mac = EthernetAddress::from_str(line).","highlight_start":1,"highlight_end":71},{"text":"                                map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":82},{"text":"                            if !mac.is_unicast() {","highlight_start":1,"highlight_end":51},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            *cur_value = Some(mac);","highlight_start":1,"highlight_end":52},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        } else {","highlight_start":1,"highlight_end":33},{"text":"                            Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":68},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    |cur_value| {","highlight_start":1,"highlight_end":34},{"text":"                        if let Some(mac) = *cur_value {","highlight_start":1,"highlight_end":56},{"text":"                            iface.borrow_mut().set_ethernet_addr(mac);","highlight_start":1,"highlight_end":71},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/mac\");","highlight_start":1,"highlight_end":86},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"                \"addr\" => {","highlight_start":1,"highlight_end":28},{"text":"                    \"list\" => {","highlight_start":1,"highlight_end":32},{"text":"                        ro [iface]","highlight_start":1,"highlight_end":35},{"text":"                        || {","highlight_start":1,"highlight_end":29},{"text":"                            let mut ips = String::new();","highlight_start":1,"highlight_end":57},{"text":"                            for cidr in iface.borrow().ip_addrs() {","highlight_start":1,"highlight_end":68},{"text":"                                ips += &format!(\"{}\\n\", cidr);","highlight_start":1,"highlight_end":63},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            ips","highlight_start":1,"highlight_end":32},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"set\" => {","highlight_start":1,"highlight_end":31},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            if !cur_value.is_empty() {","highlight_start":1,"highlight_end":55},{"text":"                                let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":68},{"text":"                                let mut cidrs = vec![];","highlight_start":1,"highlight_end":56},{"text":"                                mem::swap(cur_value, &mut cidrs);","highlight_start":1,"highlight_end":66},{"text":"                                iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":60},{"text":"                                    *s = From::from(cidrs);","highlight_start":1,"highlight_end":60},{"text":"                                });","highlight_start":1,"highlight_end":36},{"text":"                                notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":96},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"add\" => {","highlight_start":1,"highlight_end":31},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":64},{"text":"                            let mut cidrs = iface.ip_addrs().to_vec();","highlight_start":1,"highlight_end":71},{"text":"                            for cidr in cur_value {","highlight_start":1,"highlight_end":52},{"text":"                                cidrs.insert(0, *cidr);","highlight_start":1,"highlight_end":56},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":56},{"text":"                                *s = From::from(cidrs);","highlight_start":1,"highlight_end":56},{"text":"                            });","highlight_start":1,"highlight_end":32},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":92},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"rm\" => {","highlight_start":1,"highlight_end":30},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":64},{"text":"                            let mut cidrs = iface.ip_addrs().to_vec();","highlight_start":1,"highlight_end":71},{"text":"                            for cidr in cur_value {","highlight_start":1,"highlight_end":52},{"text":"                                let pre_retain_len = cidrs.len();","highlight_start":1,"highlight_end":66},{"text":"                                cidrs.retain(|&c| c != *cidr);","highlight_start":1,"highlight_end":63},{"text":"                                if pre_retain_len == cidrs.len() {","highlight_start":1,"highlight_end":67},{"text":"                                    return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":84},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":56},{"text":"                                *s = From::from(cidrs);","highlight_start":1,"highlight_end":56},{"text":"                            });","highlight_start":1,"highlight_end":32},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":92},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unnecessary trailing semicolon\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/smolnetd/scheme/netcfg/nodes.rs:250:72\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m250\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m                    $(#[allow(unused_variables)] let $c = $c.clone();)*;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this semicolon\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0msrc/smolnetd/scheme/netcfg/mod.rs:51:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m51\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    cfg_node!{\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m52\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        \"resolv\" => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m53\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            \"nameserver\" => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m54\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                rw [dns_config, notifier] (Option<Ipv4Address>, None)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m272\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m273\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_____-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `cfg_node` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"unnecessary trailing semicolon","code":{"code":"redundant_semicolons","explanation":null},"level":"warning","spans":[{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":5804,"byte_end":5805,"line_start":254,"line_end":254,"column_start":72,"column_end":73,"is_primary":true,"text":[{"text":"                    $(#[allow(unused_variables)] let $c = $c.clone();)*;","highlight_start":72,"highlight_end":73}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":6209,"byte_end":6226,"line_start":266,"line_end":266,"column_start":42,"column_end":59,"is_primary":false,"text":[{"text":"            $(children.insert($e.into(), cfg_node!($($t)*));)*","highlight_start":42,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":6209,"byte_end":6226,"line_start":266,"line_end":266,"column_start":42,"column_end":59,"is_primary":false,"text":[{"text":"            $(children.insert($e.into(), cfg_node!($($t)*));)*","highlight_start":42,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/mod.rs","byte_start":1546,"byte_end":11568,"line_start":51,"line_end":273,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    cfg_node!{","highlight_start":5,"highlight_end":15},{"text":"        \"resolv\" => {","highlight_start":1,"highlight_end":22},{"text":"            \"nameserver\" => {","highlight_start":1,"highlight_end":30},{"text":"                rw [dns_config, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":70},{"text":"                || {","highlight_start":1,"highlight_end":21},{"text":"                    format!(\"{}\\n\", dns_config.borrow().name_server)","highlight_start":1,"highlight_end":69},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let ip = Ipv4Address::from_str(line.trim())","highlight_start":1,"highlight_end":68},{"text":"                            .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":79},{"text":"                        if !ip.is_unicast() {","highlight_start":1,"highlight_end":46},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(ip);","highlight_start":1,"highlight_end":47},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(ip) = *cur_value {","highlight_start":1,"highlight_end":51},{"text":"                        dns_config.borrow_mut().name_server = ip;","highlight_start":1,"highlight_end":66},{"text":"                        notifier.borrow_mut().schedule_notify(\"resolv/nameserver\");","highlight_start":1,"highlight_end":84},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    Ok(())","highlight_start":1,"highlight_end":27},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        \"route\" => {","highlight_start":1,"highlight_end":21},{"text":"            \"list\" => {","highlight_start":1,"highlight_end":24},{"text":"                ro [iface] || {","highlight_start":1,"highlight_end":32},{"text":"                    let mut gateway = None;","highlight_start":1,"highlight_end":44},{"text":"                    iface.borrow_mut().routes_mut().update(|map| {","highlight_start":1,"highlight_end":67},{"text":"                        gateway = map.get(&gateway_cidr()).map(|route| route.via_router);","highlight_start":1,"highlight_end":90},{"text":"                    });","highlight_start":1,"highlight_end":24},{"text":"                    if let Some(ip) = gateway {","highlight_start":1,"highlight_end":48},{"text":"                        format!(\"default via {}\\n\", ip)","highlight_start":1,"highlight_end":56},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        String::new()","highlight_start":1,"highlight_end":38},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            \"add\" => {","highlight_start":1,"highlight_end":23},{"text":"                wo [iface, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":65},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let default_gw = parse_default_gw(line)?;","highlight_start":1,"highlight_end":66},{"text":"                        if !default_gw.is_unicast() {","highlight_start":1,"highlight_end":54},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(default_gw);","highlight_start":1,"highlight_end":55},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(default_gw) = *cur_value {","highlight_start":1,"highlight_end":59},{"text":"                        if iface.borrow_mut().routes_mut().add_default_ipv4_route(default_gw).is_err() {","highlight_start":1,"highlight_end":105},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        notifier.borrow_mut().schedule_notify(\"route/list\");","highlight_start":1,"highlight_end":77},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            \"rm\" => {","highlight_start":1,"highlight_end":22},{"text":"                wo [iface, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":65},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let default_gw = parse_default_gw(line)?;","highlight_start":1,"highlight_end":66},{"text":"                        if !default_gw.is_unicast() {","highlight_start":1,"highlight_end":54},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(default_gw);","highlight_start":1,"highlight_end":55},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(default_gw) = *cur_value {","highlight_start":1,"highlight_end":59},{"text":"                        let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":60},{"text":"                        let mut gateway = None;","highlight_start":1,"highlight_end":48},{"text":"                        iface.routes_mut().update(|map| {","highlight_start":1,"highlight_end":58},{"text":"                            gateway = map.get(&gateway_cidr()).map(|route| route.via_router);","highlight_start":1,"highlight_end":94},{"text":"                        });","highlight_start":1,"highlight_end":28},{"text":"                        if gateway != Some(IpAddress::Ipv4(default_gw)) {","highlight_start":1,"highlight_end":74},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        iface.routes_mut().update(|map| {","highlight_start":1,"highlight_end":58},{"text":"                            map.remove(&gateway_cidr());","highlight_start":1,"highlight_end":57},{"text":"                        });","highlight_start":1,"highlight_end":28},{"text":"                        notifier.borrow_mut().schedule_notify(\"route/list\");","highlight_start":1,"highlight_end":77},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        \"ifaces\" => {","highlight_start":1,"highlight_end":22},{"text":"            \"eth0\" => {","highlight_start":1,"highlight_end":24},{"text":"                \"mac\" => {","highlight_start":1,"highlight_end":27},{"text":"                    rw [iface, notifier] (Option<EthernetAddress>, None)","highlight_start":1,"highlight_end":73},{"text":"                    || {","highlight_start":1,"highlight_end":25},{"text":"                        format!(\"{}\\n\", iface.borrow().ethernet_addr())","highlight_start":1,"highlight_end":72},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    |cur_value, line| {","highlight_start":1,"highlight_end":40},{"text":"                        if cur_value.is_none() {","highlight_start":1,"highlight_end":49},{"text":"                            let mac = EthernetAddress::from_str(line).","highlight_start":1,"highlight_end":71},{"text":"                                map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":82},{"text":"                            if !mac.is_unicast() {","highlight_start":1,"highlight_end":51},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            *cur_value = Some(mac);","highlight_start":1,"highlight_end":52},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        } else {","highlight_start":1,"highlight_end":33},{"text":"                            Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":68},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    |cur_value| {","highlight_start":1,"highlight_end":34},{"text":"                        if let Some(mac) = *cur_value {","highlight_start":1,"highlight_end":56},{"text":"                            iface.borrow_mut().set_ethernet_addr(mac);","highlight_start":1,"highlight_end":71},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/mac\");","highlight_start":1,"highlight_end":86},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"                \"addr\" => {","highlight_start":1,"highlight_end":28},{"text":"                    \"list\" => {","highlight_start":1,"highlight_end":32},{"text":"                        ro [iface]","highlight_start":1,"highlight_end":35},{"text":"                        || {","highlight_start":1,"highlight_end":29},{"text":"                            let mut ips = String::new();","highlight_start":1,"highlight_end":57},{"text":"                            for cidr in iface.borrow().ip_addrs() {","highlight_start":1,"highlight_end":68},{"text":"                                ips += &format!(\"{}\\n\", cidr);","highlight_start":1,"highlight_end":63},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            ips","highlight_start":1,"highlight_end":32},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"set\" => {","highlight_start":1,"highlight_end":31},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            if !cur_value.is_empty() {","highlight_start":1,"highlight_end":55},{"text":"                                let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":68},{"text":"                                let mut cidrs = vec![];","highlight_start":1,"highlight_end":56},{"text":"                                mem::swap(cur_value, &mut cidrs);","highlight_start":1,"highlight_end":66},{"text":"                                iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":60},{"text":"                                    *s = From::from(cidrs);","highlight_start":1,"highlight_end":60},{"text":"                                });","highlight_start":1,"highlight_end":36},{"text":"                                notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":96},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"add\" => {","highlight_start":1,"highlight_end":31},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":64},{"text":"                            let mut cidrs = iface.ip_addrs().to_vec();","highlight_start":1,"highlight_end":71},{"text":"                            for cidr in cur_value {","highlight_start":1,"highlight_end":52},{"text":"                                cidrs.insert(0, *cidr);","highlight_start":1,"highlight_end":56},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":56},{"text":"                                *s = From::from(cidrs);","highlight_start":1,"highlight_end":56},{"text":"                            });","highlight_start":1,"highlight_end":32},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":92},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"rm\" => {","highlight_start":1,"highlight_end":30},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":64},{"text":"                            let mut cidrs = iface.ip_addrs().to_vec();","highlight_start":1,"highlight_end":71},{"text":"                            for cidr in cur_value {","highlight_start":1,"highlight_end":52},{"text":"                                let pre_retain_len = cidrs.len();","highlight_start":1,"highlight_end":66},{"text":"                                cidrs.retain(|&c| c != *cidr);","highlight_start":1,"highlight_end":63},{"text":"                                if pre_retain_len == cidrs.len() {","highlight_start":1,"highlight_end":67},{"text":"                                    return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":84},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":56},{"text":"                                *s = From::from(cidrs);","highlight_start":1,"highlight_end":56},{"text":"                            });","highlight_start":1,"highlight_end":32},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":92},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"remove this semicolon","code":null,"level":"help","spans":[{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":5804,"byte_end":5805,"line_start":254,"line_end":254,"column_start":72,"column_end":73,"is_primary":true,"text":[{"text":"                    $(#[allow(unused_variables)] let $c = $c.clone();)*;","highlight_start":72,"highlight_end":73}],"label":null,"suggested_replacement":"","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":6209,"byte_end":6226,"line_start":266,"line_end":266,"column_start":42,"column_end":59,"is_primary":false,"text":[{"text":"            $(children.insert($e.into(), cfg_node!($($t)*));)*","highlight_start":42,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":6209,"byte_end":6226,"line_start":266,"line_end":266,"column_start":42,"column_end":59,"is_primary":false,"text":[{"text":"            $(children.insert($e.into(), cfg_node!($($t)*));)*","highlight_start":42,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/mod.rs","byte_start":1546,"byte_end":11568,"line_start":51,"line_end":273,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    cfg_node!{","highlight_start":5,"highlight_end":15},{"text":"        \"resolv\" => {","highlight_start":1,"highlight_end":22},{"text":"            \"nameserver\" => {","highlight_start":1,"highlight_end":30},{"text":"                rw [dns_config, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":70},{"text":"                || {","highlight_start":1,"highlight_end":21},{"text":"                    format!(\"{}\\n\", dns_config.borrow().name_server)","highlight_start":1,"highlight_end":69},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let ip = Ipv4Address::from_str(line.trim())","highlight_start":1,"highlight_end":68},{"text":"                            .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":79},{"text":"                        if !ip.is_unicast() {","highlight_start":1,"highlight_end":46},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(ip);","highlight_start":1,"highlight_end":47},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(ip) = *cur_value {","highlight_start":1,"highlight_end":51},{"text":"                        dns_config.borrow_mut().name_server = ip;","highlight_start":1,"highlight_end":66},{"text":"                        notifier.borrow_mut().schedule_notify(\"resolv/nameserver\");","highlight_start":1,"highlight_end":84},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    Ok(())","highlight_start":1,"highlight_end":27},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        \"route\" => {","highlight_start":1,"highlight_end":21},{"text":"            \"list\" => {","highlight_start":1,"highlight_end":24},{"text":"                ro [iface] || {","highlight_start":1,"highlight_end":32},{"text":"                    let mut gateway = None;","highlight_start":1,"highlight_end":44},{"text":"                    iface.borrow_mut().routes_mut().update(|map| {","highlight_start":1,"highlight_end":67},{"text":"                        gateway = map.get(&gateway_cidr()).map(|route| route.via_router);","highlight_start":1,"highlight_end":90},{"text":"                    });","highlight_start":1,"highlight_end":24},{"text":"                    if let Some(ip) = gateway {","highlight_start":1,"highlight_end":48},{"text":"                        format!(\"default via {}\\n\", ip)","highlight_start":1,"highlight_end":56},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        String::new()","highlight_start":1,"highlight_end":38},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            \"add\" => {","highlight_start":1,"highlight_end":23},{"text":"                wo [iface, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":65},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let default_gw = parse_default_gw(line)?;","highlight_start":1,"highlight_end":66},{"text":"                        if !default_gw.is_unicast() {","highlight_start":1,"highlight_end":54},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(default_gw);","highlight_start":1,"highlight_end":55},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(default_gw) = *cur_value {","highlight_start":1,"highlight_end":59},{"text":"                        if iface.borrow_mut().routes_mut().add_default_ipv4_route(default_gw).is_err() {","highlight_start":1,"highlight_end":105},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        notifier.borrow_mut().schedule_notify(\"route/list\");","highlight_start":1,"highlight_end":77},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            \"rm\" => {","highlight_start":1,"highlight_end":22},{"text":"                wo [iface, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":65},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let default_gw = parse_default_gw(line)?;","highlight_start":1,"highlight_end":66},{"text":"                        if !default_gw.is_unicast() {","highlight_start":1,"highlight_end":54},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(default_gw);","highlight_start":1,"highlight_end":55},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(default_gw) = *cur_value {","highlight_start":1,"highlight_end":59},{"text":"                        let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":60},{"text":"                        let mut gateway = None;","highlight_start":1,"highlight_end":48},{"text":"                        iface.routes_mut().update(|map| {","highlight_start":1,"highlight_end":58},{"text":"                            gateway = map.get(&gateway_cidr()).map(|route| route.via_router);","highlight_start":1,"highlight_end":94},{"text":"                        });","highlight_start":1,"highlight_end":28},{"text":"                        if gateway != Some(IpAddress::Ipv4(default_gw)) {","highlight_start":1,"highlight_end":74},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        iface.routes_mut().update(|map| {","highlight_start":1,"highlight_end":58},{"text":"                            map.remove(&gateway_cidr());","highlight_start":1,"highlight_end":57},{"text":"                        });","highlight_start":1,"highlight_end":28},{"text":"                        notifier.borrow_mut().schedule_notify(\"route/list\");","highlight_start":1,"highlight_end":77},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        \"ifaces\" => {","highlight_start":1,"highlight_end":22},{"text":"            \"eth0\" => {","highlight_start":1,"highlight_end":24},{"text":"                \"mac\" => {","highlight_start":1,"highlight_end":27},{"text":"                    rw [iface, notifier] (Option<EthernetAddress>, None)","highlight_start":1,"highlight_end":73},{"text":"                    || {","highlight_start":1,"highlight_end":25},{"text":"                        format!(\"{}\\n\", iface.borrow().ethernet_addr())","highlight_start":1,"highlight_end":72},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    |cur_value, line| {","highlight_start":1,"highlight_end":40},{"text":"                        if cur_value.is_none() {","highlight_start":1,"highlight_end":49},{"text":"                            let mac = EthernetAddress::from_str(line).","highlight_start":1,"highlight_end":71},{"text":"                                map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":82},{"text":"                            if !mac.is_unicast() {","highlight_start":1,"highlight_end":51},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            *cur_value = Some(mac);","highlight_start":1,"highlight_end":52},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        } else {","highlight_start":1,"highlight_end":33},{"text":"                            Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":68},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    |cur_value| {","highlight_start":1,"highlight_end":34},{"text":"                        if let Some(mac) = *cur_value {","highlight_start":1,"highlight_end":56},{"text":"                            iface.borrow_mut().set_ethernet_addr(mac);","highlight_start":1,"highlight_end":71},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/mac\");","highlight_start":1,"highlight_end":86},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"                \"addr\" => {","highlight_start":1,"highlight_end":28},{"text":"                    \"list\" => {","highlight_start":1,"highlight_end":32},{"text":"                        ro [iface]","highlight_start":1,"highlight_end":35},{"text":"                        || {","highlight_start":1,"highlight_end":29},{"text":"                            let mut ips = String::new();","highlight_start":1,"highlight_end":57},{"text":"                            for cidr in iface.borrow().ip_addrs() {","highlight_start":1,"highlight_end":68},{"text":"                                ips += &format!(\"{}\\n\", cidr);","highlight_start":1,"highlight_end":63},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            ips","highlight_start":1,"highlight_end":32},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"set\" => {","highlight_start":1,"highlight_end":31},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            if !cur_value.is_empty() {","highlight_start":1,"highlight_end":55},{"text":"                                let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":68},{"text":"                                let mut cidrs = vec![];","highlight_start":1,"highlight_end":56},{"text":"                                mem::swap(cur_value, &mut cidrs);","highlight_start":1,"highlight_end":66},{"text":"                                iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":60},{"text":"                                    *s = From::from(cidrs);","highlight_start":1,"highlight_end":60},{"text":"                                });","highlight_start":1,"highlight_end":36},{"text":"                                notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":96},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"add\" => {","highlight_start":1,"highlight_end":31},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":64},{"text":"                            let mut cidrs = iface.ip_addrs().to_vec();","highlight_start":1,"highlight_end":71},{"text":"                            for cidr in cur_value {","highlight_start":1,"highlight_end":52},{"text":"                                cidrs.insert(0, *cidr);","highlight_start":1,"highlight_end":56},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":56},{"text":"                                *s = From::from(cidrs);","highlight_start":1,"highlight_end":56},{"text":"                            });","highlight_start":1,"highlight_end":32},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":92},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"rm\" => {","highlight_start":1,"highlight_end":30},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":64},{"text":"                            let mut cidrs = iface.ip_addrs().to_vec();","highlight_start":1,"highlight_end":71},{"text":"                            for cidr in cur_value {","highlight_start":1,"highlight_end":52},{"text":"                                let pre_retain_len = cidrs.len();","highlight_start":1,"highlight_end":66},{"text":"                                cidrs.retain(|&c| c != *cidr);","highlight_start":1,"highlight_end":63},{"text":"                                if pre_retain_len == cidrs.len() {","highlight_start":1,"highlight_end":67},{"text":"                                    return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":84},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":56},{"text":"                                *s = From::from(cidrs);","highlight_start":1,"highlight_end":56},{"text":"                            });","highlight_start":1,"highlight_end":32},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":92},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unnecessary trailing semicolon\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/smolnetd/scheme/netcfg/nodes.rs:254:72\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m254\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m                    $(#[allow(unused_variables)] let $c = $c.clone();)*;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this semicolon\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0msrc/smolnetd/scheme/netcfg/mod.rs:51:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m51\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    cfg_node!{\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m52\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        \"resolv\" => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m53\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            \"nameserver\" => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m54\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                rw [dns_config, notifier] (Option<Ipv4Address>, None)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m272\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m273\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_____-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `cfg_node` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"unnecessary trailing semicolon","code":{"code":"redundant_semicolons","explanation":null},"level":"warning","spans":[{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4456,"byte_end":4457,"line_start":224,"line_end":224,"column_start":64,"column_end":65,"is_primary":true,"text":[{"text":"            $(#[allow(unused_variables)] let $c = $c.clone();)*;","highlight_start":64,"highlight_end":65}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":6209,"byte_end":6226,"line_start":266,"line_end":266,"column_start":42,"column_end":59,"is_primary":false,"text":[{"text":"            $(children.insert($e.into(), cfg_node!($($t)*));)*","highlight_start":42,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":6209,"byte_end":6226,"line_start":266,"line_end":266,"column_start":42,"column_end":59,"is_primary":false,"text":[{"text":"            $(children.insert($e.into(), cfg_node!($($t)*));)*","highlight_start":42,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/mod.rs","byte_start":1546,"byte_end":11568,"line_start":51,"line_end":273,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    cfg_node!{","highlight_start":5,"highlight_end":15},{"text":"        \"resolv\" => {","highlight_start":1,"highlight_end":22},{"text":"            \"nameserver\" => {","highlight_start":1,"highlight_end":30},{"text":"                rw [dns_config, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":70},{"text":"                || {","highlight_start":1,"highlight_end":21},{"text":"                    format!(\"{}\\n\", dns_config.borrow().name_server)","highlight_start":1,"highlight_end":69},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let ip = Ipv4Address::from_str(line.trim())","highlight_start":1,"highlight_end":68},{"text":"                            .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":79},{"text":"                        if !ip.is_unicast() {","highlight_start":1,"highlight_end":46},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(ip);","highlight_start":1,"highlight_end":47},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(ip) = *cur_value {","highlight_start":1,"highlight_end":51},{"text":"                        dns_config.borrow_mut().name_server = ip;","highlight_start":1,"highlight_end":66},{"text":"                        notifier.borrow_mut().schedule_notify(\"resolv/nameserver\");","highlight_start":1,"highlight_end":84},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    Ok(())","highlight_start":1,"highlight_end":27},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        \"route\" => {","highlight_start":1,"highlight_end":21},{"text":"            \"list\" => {","highlight_start":1,"highlight_end":24},{"text":"                ro [iface] || {","highlight_start":1,"highlight_end":32},{"text":"                    let mut gateway = None;","highlight_start":1,"highlight_end":44},{"text":"                    iface.borrow_mut().routes_mut().update(|map| {","highlight_start":1,"highlight_end":67},{"text":"                        gateway = map.get(&gateway_cidr()).map(|route| route.via_router);","highlight_start":1,"highlight_end":90},{"text":"                    });","highlight_start":1,"highlight_end":24},{"text":"                    if let Some(ip) = gateway {","highlight_start":1,"highlight_end":48},{"text":"                        format!(\"default via {}\\n\", ip)","highlight_start":1,"highlight_end":56},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        String::new()","highlight_start":1,"highlight_end":38},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            \"add\" => {","highlight_start":1,"highlight_end":23},{"text":"                wo [iface, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":65},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let default_gw = parse_default_gw(line)?;","highlight_start":1,"highlight_end":66},{"text":"                        if !default_gw.is_unicast() {","highlight_start":1,"highlight_end":54},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(default_gw);","highlight_start":1,"highlight_end":55},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(default_gw) = *cur_value {","highlight_start":1,"highlight_end":59},{"text":"                        if iface.borrow_mut().routes_mut().add_default_ipv4_route(default_gw).is_err() {","highlight_start":1,"highlight_end":105},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        notifier.borrow_mut().schedule_notify(\"route/list\");","highlight_start":1,"highlight_end":77},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            \"rm\" => {","highlight_start":1,"highlight_end":22},{"text":"                wo [iface, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":65},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let default_gw = parse_default_gw(line)?;","highlight_start":1,"highlight_end":66},{"text":"                        if !default_gw.is_unicast() {","highlight_start":1,"highlight_end":54},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(default_gw);","highlight_start":1,"highlight_end":55},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(default_gw) = *cur_value {","highlight_start":1,"highlight_end":59},{"text":"                        let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":60},{"text":"                        let mut gateway = None;","highlight_start":1,"highlight_end":48},{"text":"                        iface.routes_mut().update(|map| {","highlight_start":1,"highlight_end":58},{"text":"                            gateway = map.get(&gateway_cidr()).map(|route| route.via_router);","highlight_start":1,"highlight_end":94},{"text":"                        });","highlight_start":1,"highlight_end":28},{"text":"                        if gateway != Some(IpAddress::Ipv4(default_gw)) {","highlight_start":1,"highlight_end":74},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        iface.routes_mut().update(|map| {","highlight_start":1,"highlight_end":58},{"text":"                            map.remove(&gateway_cidr());","highlight_start":1,"highlight_end":57},{"text":"                        });","highlight_start":1,"highlight_end":28},{"text":"                        notifier.borrow_mut().schedule_notify(\"route/list\");","highlight_start":1,"highlight_end":77},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        \"ifaces\" => {","highlight_start":1,"highlight_end":22},{"text":"            \"eth0\" => {","highlight_start":1,"highlight_end":24},{"text":"                \"mac\" => {","highlight_start":1,"highlight_end":27},{"text":"                    rw [iface, notifier] (Option<EthernetAddress>, None)","highlight_start":1,"highlight_end":73},{"text":"                    || {","highlight_start":1,"highlight_end":25},{"text":"                        format!(\"{}\\n\", iface.borrow().ethernet_addr())","highlight_start":1,"highlight_end":72},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    |cur_value, line| {","highlight_start":1,"highlight_end":40},{"text":"                        if cur_value.is_none() {","highlight_start":1,"highlight_end":49},{"text":"                            let mac = EthernetAddress::from_str(line).","highlight_start":1,"highlight_end":71},{"text":"                                map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":82},{"text":"                            if !mac.is_unicast() {","highlight_start":1,"highlight_end":51},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            *cur_value = Some(mac);","highlight_start":1,"highlight_end":52},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        } else {","highlight_start":1,"highlight_end":33},{"text":"                            Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":68},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    |cur_value| {","highlight_start":1,"highlight_end":34},{"text":"                        if let Some(mac) = *cur_value {","highlight_start":1,"highlight_end":56},{"text":"                            iface.borrow_mut().set_ethernet_addr(mac);","highlight_start":1,"highlight_end":71},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/mac\");","highlight_start":1,"highlight_end":86},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"                \"addr\" => {","highlight_start":1,"highlight_end":28},{"text":"                    \"list\" => {","highlight_start":1,"highlight_end":32},{"text":"                        ro [iface]","highlight_start":1,"highlight_end":35},{"text":"                        || {","highlight_start":1,"highlight_end":29},{"text":"                            let mut ips = String::new();","highlight_start":1,"highlight_end":57},{"text":"                            for cidr in iface.borrow().ip_addrs() {","highlight_start":1,"highlight_end":68},{"text":"                                ips += &format!(\"{}\\n\", cidr);","highlight_start":1,"highlight_end":63},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            ips","highlight_start":1,"highlight_end":32},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"set\" => {","highlight_start":1,"highlight_end":31},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            if !cur_value.is_empty() {","highlight_start":1,"highlight_end":55},{"text":"                                let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":68},{"text":"                                let mut cidrs = vec![];","highlight_start":1,"highlight_end":56},{"text":"                                mem::swap(cur_value, &mut cidrs);","highlight_start":1,"highlight_end":66},{"text":"                                iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":60},{"text":"                                    *s = From::from(cidrs);","highlight_start":1,"highlight_end":60},{"text":"                                });","highlight_start":1,"highlight_end":36},{"text":"                                notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":96},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"add\" => {","highlight_start":1,"highlight_end":31},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":64},{"text":"                            let mut cidrs = iface.ip_addrs().to_vec();","highlight_start":1,"highlight_end":71},{"text":"                            for cidr in cur_value {","highlight_start":1,"highlight_end":52},{"text":"                                cidrs.insert(0, *cidr);","highlight_start":1,"highlight_end":56},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":56},{"text":"                                *s = From::from(cidrs);","highlight_start":1,"highlight_end":56},{"text":"                            });","highlight_start":1,"highlight_end":32},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":92},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"rm\" => {","highlight_start":1,"highlight_end":30},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":64},{"text":"                            let mut cidrs = iface.ip_addrs().to_vec();","highlight_start":1,"highlight_end":71},{"text":"                            for cidr in cur_value {","highlight_start":1,"highlight_end":52},{"text":"                                let pre_retain_len = cidrs.len();","highlight_start":1,"highlight_end":66},{"text":"                                cidrs.retain(|&c| c != *cidr);","highlight_start":1,"highlight_end":63},{"text":"                                if pre_retain_len == cidrs.len() {","highlight_start":1,"highlight_end":67},{"text":"                                    return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":84},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":56},{"text":"                                *s = From::from(cidrs);","highlight_start":1,"highlight_end":56},{"text":"                            });","highlight_start":1,"highlight_end":32},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":92},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"remove this semicolon","code":null,"level":"help","spans":[{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4456,"byte_end":4457,"line_start":224,"line_end":224,"column_start":64,"column_end":65,"is_primary":true,"text":[{"text":"            $(#[allow(unused_variables)] let $c = $c.clone();)*;","highlight_start":64,"highlight_end":65}],"label":null,"suggested_replacement":"","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":6209,"byte_end":6226,"line_start":266,"line_end":266,"column_start":42,"column_end":59,"is_primary":false,"text":[{"text":"            $(children.insert($e.into(), cfg_node!($($t)*));)*","highlight_start":42,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":6209,"byte_end":6226,"line_start":266,"line_end":266,"column_start":42,"column_end":59,"is_primary":false,"text":[{"text":"            $(children.insert($e.into(), cfg_node!($($t)*));)*","highlight_start":42,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/mod.rs","byte_start":1546,"byte_end":11568,"line_start":51,"line_end":273,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    cfg_node!{","highlight_start":5,"highlight_end":15},{"text":"        \"resolv\" => {","highlight_start":1,"highlight_end":22},{"text":"            \"nameserver\" => {","highlight_start":1,"highlight_end":30},{"text":"                rw [dns_config, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":70},{"text":"                || {","highlight_start":1,"highlight_end":21},{"text":"                    format!(\"{}\\n\", dns_config.borrow().name_server)","highlight_start":1,"highlight_end":69},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let ip = Ipv4Address::from_str(line.trim())","highlight_start":1,"highlight_end":68},{"text":"                            .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":79},{"text":"                        if !ip.is_unicast() {","highlight_start":1,"highlight_end":46},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(ip);","highlight_start":1,"highlight_end":47},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(ip) = *cur_value {","highlight_start":1,"highlight_end":51},{"text":"                        dns_config.borrow_mut().name_server = ip;","highlight_start":1,"highlight_end":66},{"text":"                        notifier.borrow_mut().schedule_notify(\"resolv/nameserver\");","highlight_start":1,"highlight_end":84},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    Ok(())","highlight_start":1,"highlight_end":27},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        \"route\" => {","highlight_start":1,"highlight_end":21},{"text":"            \"list\" => {","highlight_start":1,"highlight_end":24},{"text":"                ro [iface] || {","highlight_start":1,"highlight_end":32},{"text":"                    let mut gateway = None;","highlight_start":1,"highlight_end":44},{"text":"                    iface.borrow_mut().routes_mut().update(|map| {","highlight_start":1,"highlight_end":67},{"text":"                        gateway = map.get(&gateway_cidr()).map(|route| route.via_router);","highlight_start":1,"highlight_end":90},{"text":"                    });","highlight_start":1,"highlight_end":24},{"text":"                    if let Some(ip) = gateway {","highlight_start":1,"highlight_end":48},{"text":"                        format!(\"default via {}\\n\", ip)","highlight_start":1,"highlight_end":56},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        String::new()","highlight_start":1,"highlight_end":38},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            \"add\" => {","highlight_start":1,"highlight_end":23},{"text":"                wo [iface, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":65},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let default_gw = parse_default_gw(line)?;","highlight_start":1,"highlight_end":66},{"text":"                        if !default_gw.is_unicast() {","highlight_start":1,"highlight_end":54},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(default_gw);","highlight_start":1,"highlight_end":55},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(default_gw) = *cur_value {","highlight_start":1,"highlight_end":59},{"text":"                        if iface.borrow_mut().routes_mut().add_default_ipv4_route(default_gw).is_err() {","highlight_start":1,"highlight_end":105},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        notifier.borrow_mut().schedule_notify(\"route/list\");","highlight_start":1,"highlight_end":77},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            \"rm\" => {","highlight_start":1,"highlight_end":22},{"text":"                wo [iface, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":65},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let default_gw = parse_default_gw(line)?;","highlight_start":1,"highlight_end":66},{"text":"                        if !default_gw.is_unicast() {","highlight_start":1,"highlight_end":54},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(default_gw);","highlight_start":1,"highlight_end":55},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(default_gw) = *cur_value {","highlight_start":1,"highlight_end":59},{"text":"                        let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":60},{"text":"                        let mut gateway = None;","highlight_start":1,"highlight_end":48},{"text":"                        iface.routes_mut().update(|map| {","highlight_start":1,"highlight_end":58},{"text":"                            gateway = map.get(&gateway_cidr()).map(|route| route.via_router);","highlight_start":1,"highlight_end":94},{"text":"                        });","highlight_start":1,"highlight_end":28},{"text":"                        if gateway != Some(IpAddress::Ipv4(default_gw)) {","highlight_start":1,"highlight_end":74},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        iface.routes_mut().update(|map| {","highlight_start":1,"highlight_end":58},{"text":"                            map.remove(&gateway_cidr());","highlight_start":1,"highlight_end":57},{"text":"                        });","highlight_start":1,"highlight_end":28},{"text":"                        notifier.borrow_mut().schedule_notify(\"route/list\");","highlight_start":1,"highlight_end":77},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        \"ifaces\" => {","highlight_start":1,"highlight_end":22},{"text":"            \"eth0\" => {","highlight_start":1,"highlight_end":24},{"text":"                \"mac\" => {","highlight_start":1,"highlight_end":27},{"text":"                    rw [iface, notifier] (Option<EthernetAddress>, None)","highlight_start":1,"highlight_end":73},{"text":"                    || {","highlight_start":1,"highlight_end":25},{"text":"                        format!(\"{}\\n\", iface.borrow().ethernet_addr())","highlight_start":1,"highlight_end":72},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    |cur_value, line| {","highlight_start":1,"highlight_end":40},{"text":"                        if cur_value.is_none() {","highlight_start":1,"highlight_end":49},{"text":"                            let mac = EthernetAddress::from_str(line).","highlight_start":1,"highlight_end":71},{"text":"                                map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":82},{"text":"                            if !mac.is_unicast() {","highlight_start":1,"highlight_end":51},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            *cur_value = Some(mac);","highlight_start":1,"highlight_end":52},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        } else {","highlight_start":1,"highlight_end":33},{"text":"                            Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":68},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    |cur_value| {","highlight_start":1,"highlight_end":34},{"text":"                        if let Some(mac) = *cur_value {","highlight_start":1,"highlight_end":56},{"text":"                            iface.borrow_mut().set_ethernet_addr(mac);","highlight_start":1,"highlight_end":71},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/mac\");","highlight_start":1,"highlight_end":86},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"                \"addr\" => {","highlight_start":1,"highlight_end":28},{"text":"                    \"list\" => {","highlight_start":1,"highlight_end":32},{"text":"                        ro [iface]","highlight_start":1,"highlight_end":35},{"text":"                        || {","highlight_start":1,"highlight_end":29},{"text":"                            let mut ips = String::new();","highlight_start":1,"highlight_end":57},{"text":"                            for cidr in iface.borrow().ip_addrs() {","highlight_start":1,"highlight_end":68},{"text":"                                ips += &format!(\"{}\\n\", cidr);","highlight_start":1,"highlight_end":63},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            ips","highlight_start":1,"highlight_end":32},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"set\" => {","highlight_start":1,"highlight_end":31},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            if !cur_value.is_empty() {","highlight_start":1,"highlight_end":55},{"text":"                                let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":68},{"text":"                                let mut cidrs = vec![];","highlight_start":1,"highlight_end":56},{"text":"                                mem::swap(cur_value, &mut cidrs);","highlight_start":1,"highlight_end":66},{"text":"                                iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":60},{"text":"                                    *s = From::from(cidrs);","highlight_start":1,"highlight_end":60},{"text":"                                });","highlight_start":1,"highlight_end":36},{"text":"                                notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":96},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"add\" => {","highlight_start":1,"highlight_end":31},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":64},{"text":"                            let mut cidrs = iface.ip_addrs().to_vec();","highlight_start":1,"highlight_end":71},{"text":"                            for cidr in cur_value {","highlight_start":1,"highlight_end":52},{"text":"                                cidrs.insert(0, *cidr);","highlight_start":1,"highlight_end":56},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":56},{"text":"                                *s = From::from(cidrs);","highlight_start":1,"highlight_end":56},{"text":"                            });","highlight_start":1,"highlight_end":32},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":92},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"rm\" => {","highlight_start":1,"highlight_end":30},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":64},{"text":"                            let mut cidrs = iface.ip_addrs().to_vec();","highlight_start":1,"highlight_end":71},{"text":"                            for cidr in cur_value {","highlight_start":1,"highlight_end":52},{"text":"                                let pre_retain_len = cidrs.len();","highlight_start":1,"highlight_end":66},{"text":"                                cidrs.retain(|&c| c != *cidr);","highlight_start":1,"highlight_end":63},{"text":"                                if pre_retain_len == cidrs.len() {","highlight_start":1,"highlight_end":67},{"text":"                                    return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":84},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":56},{"text":"                                *s = From::from(cidrs);","highlight_start":1,"highlight_end":56},{"text":"                            });","highlight_start":1,"highlight_end":32},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":92},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unnecessary trailing semicolon\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/smolnetd/scheme/netcfg/nodes.rs:224:64\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m224\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m            $(#[allow(unused_variables)] let $c = $c.clone();)*;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this semicolon\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0msrc/smolnetd/scheme/netcfg/mod.rs:51:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m51\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    cfg_node!{\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m52\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        \"resolv\" => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m53\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            \"nameserver\" => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m54\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                rw [dns_config, notifier] (Option<Ipv4Address>, None)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m272\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m273\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_____-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `cfg_node` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"unnecessary trailing semicolon","code":{"code":"redundant_semicolons","explanation":null},"level":"warning","spans":[{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4622,"byte_end":4623,"line_start":227,"line_end":227,"column_start":72,"column_end":73,"is_primary":true,"text":[{"text":"                    $(#[allow(unused_variables)] let $c = $c.clone();)*;","highlight_start":72,"highlight_end":73}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":6209,"byte_end":6226,"line_start":266,"line_end":266,"column_start":42,"column_end":59,"is_primary":false,"text":[{"text":"            $(children.insert($e.into(), cfg_node!($($t)*));)*","highlight_start":42,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":6209,"byte_end":6226,"line_start":266,"line_end":266,"column_start":42,"column_end":59,"is_primary":false,"text":[{"text":"            $(children.insert($e.into(), cfg_node!($($t)*));)*","highlight_start":42,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/mod.rs","byte_start":1546,"byte_end":11568,"line_start":51,"line_end":273,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    cfg_node!{","highlight_start":5,"highlight_end":15},{"text":"        \"resolv\" => {","highlight_start":1,"highlight_end":22},{"text":"            \"nameserver\" => {","highlight_start":1,"highlight_end":30},{"text":"                rw [dns_config, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":70},{"text":"                || {","highlight_start":1,"highlight_end":21},{"text":"                    format!(\"{}\\n\", dns_config.borrow().name_server)","highlight_start":1,"highlight_end":69},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let ip = Ipv4Address::from_str(line.trim())","highlight_start":1,"highlight_end":68},{"text":"                            .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":79},{"text":"                        if !ip.is_unicast() {","highlight_start":1,"highlight_end":46},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(ip);","highlight_start":1,"highlight_end":47},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(ip) = *cur_value {","highlight_start":1,"highlight_end":51},{"text":"                        dns_config.borrow_mut().name_server = ip;","highlight_start":1,"highlight_end":66},{"text":"                        notifier.borrow_mut().schedule_notify(\"resolv/nameserver\");","highlight_start":1,"highlight_end":84},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    Ok(())","highlight_start":1,"highlight_end":27},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        \"route\" => {","highlight_start":1,"highlight_end":21},{"text":"            \"list\" => {","highlight_start":1,"highlight_end":24},{"text":"                ro [iface] || {","highlight_start":1,"highlight_end":32},{"text":"                    let mut gateway = None;","highlight_start":1,"highlight_end":44},{"text":"                    iface.borrow_mut().routes_mut().update(|map| {","highlight_start":1,"highlight_end":67},{"text":"                        gateway = map.get(&gateway_cidr()).map(|route| route.via_router);","highlight_start":1,"highlight_end":90},{"text":"                    });","highlight_start":1,"highlight_end":24},{"text":"                    if let Some(ip) = gateway {","highlight_start":1,"highlight_end":48},{"text":"                        format!(\"default via {}\\n\", ip)","highlight_start":1,"highlight_end":56},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        String::new()","highlight_start":1,"highlight_end":38},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            \"add\" => {","highlight_start":1,"highlight_end":23},{"text":"                wo [iface, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":65},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let default_gw = parse_default_gw(line)?;","highlight_start":1,"highlight_end":66},{"text":"                        if !default_gw.is_unicast() {","highlight_start":1,"highlight_end":54},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(default_gw);","highlight_start":1,"highlight_end":55},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(default_gw) = *cur_value {","highlight_start":1,"highlight_end":59},{"text":"                        if iface.borrow_mut().routes_mut().add_default_ipv4_route(default_gw).is_err() {","highlight_start":1,"highlight_end":105},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        notifier.borrow_mut().schedule_notify(\"route/list\");","highlight_start":1,"highlight_end":77},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            \"rm\" => {","highlight_start":1,"highlight_end":22},{"text":"                wo [iface, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":65},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let default_gw = parse_default_gw(line)?;","highlight_start":1,"highlight_end":66},{"text":"                        if !default_gw.is_unicast() {","highlight_start":1,"highlight_end":54},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(default_gw);","highlight_start":1,"highlight_end":55},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(default_gw) = *cur_value {","highlight_start":1,"highlight_end":59},{"text":"                        let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":60},{"text":"                        let mut gateway = None;","highlight_start":1,"highlight_end":48},{"text":"                        iface.routes_mut().update(|map| {","highlight_start":1,"highlight_end":58},{"text":"                            gateway = map.get(&gateway_cidr()).map(|route| route.via_router);","highlight_start":1,"highlight_end":94},{"text":"                        });","highlight_start":1,"highlight_end":28},{"text":"                        if gateway != Some(IpAddress::Ipv4(default_gw)) {","highlight_start":1,"highlight_end":74},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        iface.routes_mut().update(|map| {","highlight_start":1,"highlight_end":58},{"text":"                            map.remove(&gateway_cidr());","highlight_start":1,"highlight_end":57},{"text":"                        });","highlight_start":1,"highlight_end":28},{"text":"                        notifier.borrow_mut().schedule_notify(\"route/list\");","highlight_start":1,"highlight_end":77},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        \"ifaces\" => {","highlight_start":1,"highlight_end":22},{"text":"            \"eth0\" => {","highlight_start":1,"highlight_end":24},{"text":"                \"mac\" => {","highlight_start":1,"highlight_end":27},{"text":"                    rw [iface, notifier] (Option<EthernetAddress>, None)","highlight_start":1,"highlight_end":73},{"text":"                    || {","highlight_start":1,"highlight_end":25},{"text":"                        format!(\"{}\\n\", iface.borrow().ethernet_addr())","highlight_start":1,"highlight_end":72},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    |cur_value, line| {","highlight_start":1,"highlight_end":40},{"text":"                        if cur_value.is_none() {","highlight_start":1,"highlight_end":49},{"text":"                            let mac = EthernetAddress::from_str(line).","highlight_start":1,"highlight_end":71},{"text":"                                map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":82},{"text":"                            if !mac.is_unicast() {","highlight_start":1,"highlight_end":51},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            *cur_value = Some(mac);","highlight_start":1,"highlight_end":52},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        } else {","highlight_start":1,"highlight_end":33},{"text":"                            Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":68},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    |cur_value| {","highlight_start":1,"highlight_end":34},{"text":"                        if let Some(mac) = *cur_value {","highlight_start":1,"highlight_end":56},{"text":"                            iface.borrow_mut().set_ethernet_addr(mac);","highlight_start":1,"highlight_end":71},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/mac\");","highlight_start":1,"highlight_end":86},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"                \"addr\" => {","highlight_start":1,"highlight_end":28},{"text":"                    \"list\" => {","highlight_start":1,"highlight_end":32},{"text":"                        ro [iface]","highlight_start":1,"highlight_end":35},{"text":"                        || {","highlight_start":1,"highlight_end":29},{"text":"                            let mut ips = String::new();","highlight_start":1,"highlight_end":57},{"text":"                            for cidr in iface.borrow().ip_addrs() {","highlight_start":1,"highlight_end":68},{"text":"                                ips += &format!(\"{}\\n\", cidr);","highlight_start":1,"highlight_end":63},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            ips","highlight_start":1,"highlight_end":32},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"set\" => {","highlight_start":1,"highlight_end":31},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            if !cur_value.is_empty() {","highlight_start":1,"highlight_end":55},{"text":"                                let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":68},{"text":"                                let mut cidrs = vec![];","highlight_start":1,"highlight_end":56},{"text":"                                mem::swap(cur_value, &mut cidrs);","highlight_start":1,"highlight_end":66},{"text":"                                iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":60},{"text":"                                    *s = From::from(cidrs);","highlight_start":1,"highlight_end":60},{"text":"                                });","highlight_start":1,"highlight_end":36},{"text":"                                notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":96},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"add\" => {","highlight_start":1,"highlight_end":31},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":64},{"text":"                            let mut cidrs = iface.ip_addrs().to_vec();","highlight_start":1,"highlight_end":71},{"text":"                            for cidr in cur_value {","highlight_start":1,"highlight_end":52},{"text":"                                cidrs.insert(0, *cidr);","highlight_start":1,"highlight_end":56},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":56},{"text":"                                *s = From::from(cidrs);","highlight_start":1,"highlight_end":56},{"text":"                            });","highlight_start":1,"highlight_end":32},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":92},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"rm\" => {","highlight_start":1,"highlight_end":30},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":64},{"text":"                            let mut cidrs = iface.ip_addrs().to_vec();","highlight_start":1,"highlight_end":71},{"text":"                            for cidr in cur_value {","highlight_start":1,"highlight_end":52},{"text":"                                let pre_retain_len = cidrs.len();","highlight_start":1,"highlight_end":66},{"text":"                                cidrs.retain(|&c| c != *cidr);","highlight_start":1,"highlight_end":63},{"text":"                                if pre_retain_len == cidrs.len() {","highlight_start":1,"highlight_end":67},{"text":"                                    return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":84},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":56},{"text":"                                *s = From::from(cidrs);","highlight_start":1,"highlight_end":56},{"text":"                            });","highlight_start":1,"highlight_end":32},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":92},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"remove this semicolon","code":null,"level":"help","spans":[{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4622,"byte_end":4623,"line_start":227,"line_end":227,"column_start":72,"column_end":73,"is_primary":true,"text":[{"text":"                    $(#[allow(unused_variables)] let $c = $c.clone();)*;","highlight_start":72,"highlight_end":73}],"label":null,"suggested_replacement":"","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":6209,"byte_end":6226,"line_start":266,"line_end":266,"column_start":42,"column_end":59,"is_primary":false,"text":[{"text":"            $(children.insert($e.into(), cfg_node!($($t)*));)*","highlight_start":42,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":6209,"byte_end":6226,"line_start":266,"line_end":266,"column_start":42,"column_end":59,"is_primary":false,"text":[{"text":"            $(children.insert($e.into(), cfg_node!($($t)*));)*","highlight_start":42,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/mod.rs","byte_start":1546,"byte_end":11568,"line_start":51,"line_end":273,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    cfg_node!{","highlight_start":5,"highlight_end":15},{"text":"        \"resolv\" => {","highlight_start":1,"highlight_end":22},{"text":"            \"nameserver\" => {","highlight_start":1,"highlight_end":30},{"text":"                rw [dns_config, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":70},{"text":"                || {","highlight_start":1,"highlight_end":21},{"text":"                    format!(\"{}\\n\", dns_config.borrow().name_server)","highlight_start":1,"highlight_end":69},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let ip = Ipv4Address::from_str(line.trim())","highlight_start":1,"highlight_end":68},{"text":"                            .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":79},{"text":"                        if !ip.is_unicast() {","highlight_start":1,"highlight_end":46},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(ip);","highlight_start":1,"highlight_end":47},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(ip) = *cur_value {","highlight_start":1,"highlight_end":51},{"text":"                        dns_config.borrow_mut().name_server = ip;","highlight_start":1,"highlight_end":66},{"text":"                        notifier.borrow_mut().schedule_notify(\"resolv/nameserver\");","highlight_start":1,"highlight_end":84},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    Ok(())","highlight_start":1,"highlight_end":27},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        \"route\" => {","highlight_start":1,"highlight_end":21},{"text":"            \"list\" => {","highlight_start":1,"highlight_end":24},{"text":"                ro [iface] || {","highlight_start":1,"highlight_end":32},{"text":"                    let mut gateway = None;","highlight_start":1,"highlight_end":44},{"text":"                    iface.borrow_mut().routes_mut().update(|map| {","highlight_start":1,"highlight_end":67},{"text":"                        gateway = map.get(&gateway_cidr()).map(|route| route.via_router);","highlight_start":1,"highlight_end":90},{"text":"                    });","highlight_start":1,"highlight_end":24},{"text":"                    if let Some(ip) = gateway {","highlight_start":1,"highlight_end":48},{"text":"                        format!(\"default via {}\\n\", ip)","highlight_start":1,"highlight_end":56},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        String::new()","highlight_start":1,"highlight_end":38},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            \"add\" => {","highlight_start":1,"highlight_end":23},{"text":"                wo [iface, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":65},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let default_gw = parse_default_gw(line)?;","highlight_start":1,"highlight_end":66},{"text":"                        if !default_gw.is_unicast() {","highlight_start":1,"highlight_end":54},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(default_gw);","highlight_start":1,"highlight_end":55},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(default_gw) = *cur_value {","highlight_start":1,"highlight_end":59},{"text":"                        if iface.borrow_mut().routes_mut().add_default_ipv4_route(default_gw).is_err() {","highlight_start":1,"highlight_end":105},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        notifier.borrow_mut().schedule_notify(\"route/list\");","highlight_start":1,"highlight_end":77},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            \"rm\" => {","highlight_start":1,"highlight_end":22},{"text":"                wo [iface, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":65},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let default_gw = parse_default_gw(line)?;","highlight_start":1,"highlight_end":66},{"text":"                        if !default_gw.is_unicast() {","highlight_start":1,"highlight_end":54},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(default_gw);","highlight_start":1,"highlight_end":55},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(default_gw) = *cur_value {","highlight_start":1,"highlight_end":59},{"text":"                        let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":60},{"text":"                        let mut gateway = None;","highlight_start":1,"highlight_end":48},{"text":"                        iface.routes_mut().update(|map| {","highlight_start":1,"highlight_end":58},{"text":"                            gateway = map.get(&gateway_cidr()).map(|route| route.via_router);","highlight_start":1,"highlight_end":94},{"text":"                        });","highlight_start":1,"highlight_end":28},{"text":"                        if gateway != Some(IpAddress::Ipv4(default_gw)) {","highlight_start":1,"highlight_end":74},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        iface.routes_mut().update(|map| {","highlight_start":1,"highlight_end":58},{"text":"                            map.remove(&gateway_cidr());","highlight_start":1,"highlight_end":57},{"text":"                        });","highlight_start":1,"highlight_end":28},{"text":"                        notifier.borrow_mut().schedule_notify(\"route/list\");","highlight_start":1,"highlight_end":77},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        \"ifaces\" => {","highlight_start":1,"highlight_end":22},{"text":"            \"eth0\" => {","highlight_start":1,"highlight_end":24},{"text":"                \"mac\" => {","highlight_start":1,"highlight_end":27},{"text":"                    rw [iface, notifier] (Option<EthernetAddress>, None)","highlight_start":1,"highlight_end":73},{"text":"                    || {","highlight_start":1,"highlight_end":25},{"text":"                        format!(\"{}\\n\", iface.borrow().ethernet_addr())","highlight_start":1,"highlight_end":72},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    |cur_value, line| {","highlight_start":1,"highlight_end":40},{"text":"                        if cur_value.is_none() {","highlight_start":1,"highlight_end":49},{"text":"                            let mac = EthernetAddress::from_str(line).","highlight_start":1,"highlight_end":71},{"text":"                                map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":82},{"text":"                            if !mac.is_unicast() {","highlight_start":1,"highlight_end":51},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            *cur_value = Some(mac);","highlight_start":1,"highlight_end":52},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        } else {","highlight_start":1,"highlight_end":33},{"text":"                            Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":68},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    |cur_value| {","highlight_start":1,"highlight_end":34},{"text":"                        if let Some(mac) = *cur_value {","highlight_start":1,"highlight_end":56},{"text":"                            iface.borrow_mut().set_ethernet_addr(mac);","highlight_start":1,"highlight_end":71},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/mac\");","highlight_start":1,"highlight_end":86},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"                \"addr\" => {","highlight_start":1,"highlight_end":28},{"text":"                    \"list\" => {","highlight_start":1,"highlight_end":32},{"text":"                        ro [iface]","highlight_start":1,"highlight_end":35},{"text":"                        || {","highlight_start":1,"highlight_end":29},{"text":"                            let mut ips = String::new();","highlight_start":1,"highlight_end":57},{"text":"                            for cidr in iface.borrow().ip_addrs() {","highlight_start":1,"highlight_end":68},{"text":"                                ips += &format!(\"{}\\n\", cidr);","highlight_start":1,"highlight_end":63},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            ips","highlight_start":1,"highlight_end":32},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"set\" => {","highlight_start":1,"highlight_end":31},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            if !cur_value.is_empty() {","highlight_start":1,"highlight_end":55},{"text":"                                let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":68},{"text":"                                let mut cidrs = vec![];","highlight_start":1,"highlight_end":56},{"text":"                                mem::swap(cur_value, &mut cidrs);","highlight_start":1,"highlight_end":66},{"text":"                                iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":60},{"text":"                                    *s = From::from(cidrs);","highlight_start":1,"highlight_end":60},{"text":"                                });","highlight_start":1,"highlight_end":36},{"text":"                                notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":96},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"add\" => {","highlight_start":1,"highlight_end":31},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":64},{"text":"                            let mut cidrs = iface.ip_addrs().to_vec();","highlight_start":1,"highlight_end":71},{"text":"                            for cidr in cur_value {","highlight_start":1,"highlight_end":52},{"text":"                                cidrs.insert(0, *cidr);","highlight_start":1,"highlight_end":56},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":56},{"text":"                                *s = From::from(cidrs);","highlight_start":1,"highlight_end":56},{"text":"                            });","highlight_start":1,"highlight_end":32},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":92},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"rm\" => {","highlight_start":1,"highlight_end":30},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":64},{"text":"                            let mut cidrs = iface.ip_addrs().to_vec();","highlight_start":1,"highlight_end":71},{"text":"                            for cidr in cur_value {","highlight_start":1,"highlight_end":52},{"text":"                                let pre_retain_len = cidrs.len();","highlight_start":1,"highlight_end":66},{"text":"                                cidrs.retain(|&c| c != *cidr);","highlight_start":1,"highlight_end":63},{"text":"                                if pre_retain_len == cidrs.len() {","highlight_start":1,"highlight_end":67},{"text":"                                    return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":84},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":56},{"text":"                                *s = From::from(cidrs);","highlight_start":1,"highlight_end":56},{"text":"                            });","highlight_start":1,"highlight_end":32},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":92},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unnecessary trailing semicolon\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/smolnetd/scheme/netcfg/nodes.rs:227:72\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m227\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m                    $(#[allow(unused_variables)] let $c = $c.clone();)*;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this semicolon\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0msrc/smolnetd/scheme/netcfg/mod.rs:51:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m51\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    cfg_node!{\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m52\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        \"resolv\" => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m53\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            \"nameserver\" => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m54\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                rw [dns_config, notifier] (Option<Ipv4Address>, None)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m272\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m273\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_____-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `cfg_node` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"unnecessary trailing semicolon","code":{"code":"redundant_semicolons","explanation":null},"level":"warning","spans":[{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4817,"byte_end":4818,"line_start":231,"line_end":231,"column_start":72,"column_end":73,"is_primary":true,"text":[{"text":"                    $(#[allow(unused_variables)] let $c = $c.clone();)*;","highlight_start":72,"highlight_end":73}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":6209,"byte_end":6226,"line_start":266,"line_end":266,"column_start":42,"column_end":59,"is_primary":false,"text":[{"text":"            $(children.insert($e.into(), cfg_node!($($t)*));)*","highlight_start":42,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":6209,"byte_end":6226,"line_start":266,"line_end":266,"column_start":42,"column_end":59,"is_primary":false,"text":[{"text":"            $(children.insert($e.into(), cfg_node!($($t)*));)*","highlight_start":42,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/mod.rs","byte_start":1546,"byte_end":11568,"line_start":51,"line_end":273,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    cfg_node!{","highlight_start":5,"highlight_end":15},{"text":"        \"resolv\" => {","highlight_start":1,"highlight_end":22},{"text":"            \"nameserver\" => {","highlight_start":1,"highlight_end":30},{"text":"                rw [dns_config, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":70},{"text":"                || {","highlight_start":1,"highlight_end":21},{"text":"                    format!(\"{}\\n\", dns_config.borrow().name_server)","highlight_start":1,"highlight_end":69},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let ip = Ipv4Address::from_str(line.trim())","highlight_start":1,"highlight_end":68},{"text":"                            .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":79},{"text":"                        if !ip.is_unicast() {","highlight_start":1,"highlight_end":46},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(ip);","highlight_start":1,"highlight_end":47},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(ip) = *cur_value {","highlight_start":1,"highlight_end":51},{"text":"                        dns_config.borrow_mut().name_server = ip;","highlight_start":1,"highlight_end":66},{"text":"                        notifier.borrow_mut().schedule_notify(\"resolv/nameserver\");","highlight_start":1,"highlight_end":84},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    Ok(())","highlight_start":1,"highlight_end":27},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        \"route\" => {","highlight_start":1,"highlight_end":21},{"text":"            \"list\" => {","highlight_start":1,"highlight_end":24},{"text":"                ro [iface] || {","highlight_start":1,"highlight_end":32},{"text":"                    let mut gateway = None;","highlight_start":1,"highlight_end":44},{"text":"                    iface.borrow_mut().routes_mut().update(|map| {","highlight_start":1,"highlight_end":67},{"text":"                        gateway = map.get(&gateway_cidr()).map(|route| route.via_router);","highlight_start":1,"highlight_end":90},{"text":"                    });","highlight_start":1,"highlight_end":24},{"text":"                    if let Some(ip) = gateway {","highlight_start":1,"highlight_end":48},{"text":"                        format!(\"default via {}\\n\", ip)","highlight_start":1,"highlight_end":56},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        String::new()","highlight_start":1,"highlight_end":38},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            \"add\" => {","highlight_start":1,"highlight_end":23},{"text":"                wo [iface, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":65},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let default_gw = parse_default_gw(line)?;","highlight_start":1,"highlight_end":66},{"text":"                        if !default_gw.is_unicast() {","highlight_start":1,"highlight_end":54},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(default_gw);","highlight_start":1,"highlight_end":55},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(default_gw) = *cur_value {","highlight_start":1,"highlight_end":59},{"text":"                        if iface.borrow_mut().routes_mut().add_default_ipv4_route(default_gw).is_err() {","highlight_start":1,"highlight_end":105},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        notifier.borrow_mut().schedule_notify(\"route/list\");","highlight_start":1,"highlight_end":77},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            \"rm\" => {","highlight_start":1,"highlight_end":22},{"text":"                wo [iface, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":65},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let default_gw = parse_default_gw(line)?;","highlight_start":1,"highlight_end":66},{"text":"                        if !default_gw.is_unicast() {","highlight_start":1,"highlight_end":54},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(default_gw);","highlight_start":1,"highlight_end":55},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(default_gw) = *cur_value {","highlight_start":1,"highlight_end":59},{"text":"                        let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":60},{"text":"                        let mut gateway = None;","highlight_start":1,"highlight_end":48},{"text":"                        iface.routes_mut().update(|map| {","highlight_start":1,"highlight_end":58},{"text":"                            gateway = map.get(&gateway_cidr()).map(|route| route.via_router);","highlight_start":1,"highlight_end":94},{"text":"                        });","highlight_start":1,"highlight_end":28},{"text":"                        if gateway != Some(IpAddress::Ipv4(default_gw)) {","highlight_start":1,"highlight_end":74},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        iface.routes_mut().update(|map| {","highlight_start":1,"highlight_end":58},{"text":"                            map.remove(&gateway_cidr());","highlight_start":1,"highlight_end":57},{"text":"                        });","highlight_start":1,"highlight_end":28},{"text":"                        notifier.borrow_mut().schedule_notify(\"route/list\");","highlight_start":1,"highlight_end":77},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        \"ifaces\" => {","highlight_start":1,"highlight_end":22},{"text":"            \"eth0\" => {","highlight_start":1,"highlight_end":24},{"text":"                \"mac\" => {","highlight_start":1,"highlight_end":27},{"text":"                    rw [iface, notifier] (Option<EthernetAddress>, None)","highlight_start":1,"highlight_end":73},{"text":"                    || {","highlight_start":1,"highlight_end":25},{"text":"                        format!(\"{}\\n\", iface.borrow().ethernet_addr())","highlight_start":1,"highlight_end":72},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    |cur_value, line| {","highlight_start":1,"highlight_end":40},{"text":"                        if cur_value.is_none() {","highlight_start":1,"highlight_end":49},{"text":"                            let mac = EthernetAddress::from_str(line).","highlight_start":1,"highlight_end":71},{"text":"                                map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":82},{"text":"                            if !mac.is_unicast() {","highlight_start":1,"highlight_end":51},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            *cur_value = Some(mac);","highlight_start":1,"highlight_end":52},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        } else {","highlight_start":1,"highlight_end":33},{"text":"                            Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":68},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    |cur_value| {","highlight_start":1,"highlight_end":34},{"text":"                        if let Some(mac) = *cur_value {","highlight_start":1,"highlight_end":56},{"text":"                            iface.borrow_mut().set_ethernet_addr(mac);","highlight_start":1,"highlight_end":71},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/mac\");","highlight_start":1,"highlight_end":86},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"                \"addr\" => {","highlight_start":1,"highlight_end":28},{"text":"                    \"list\" => {","highlight_start":1,"highlight_end":32},{"text":"                        ro [iface]","highlight_start":1,"highlight_end":35},{"text":"                        || {","highlight_start":1,"highlight_end":29},{"text":"                            let mut ips = String::new();","highlight_start":1,"highlight_end":57},{"text":"                            for cidr in iface.borrow().ip_addrs() {","highlight_start":1,"highlight_end":68},{"text":"                                ips += &format!(\"{}\\n\", cidr);","highlight_start":1,"highlight_end":63},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            ips","highlight_start":1,"highlight_end":32},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"set\" => {","highlight_start":1,"highlight_end":31},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            if !cur_value.is_empty() {","highlight_start":1,"highlight_end":55},{"text":"                                let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":68},{"text":"                                let mut cidrs = vec![];","highlight_start":1,"highlight_end":56},{"text":"                                mem::swap(cur_value, &mut cidrs);","highlight_start":1,"highlight_end":66},{"text":"                                iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":60},{"text":"                                    *s = From::from(cidrs);","highlight_start":1,"highlight_end":60},{"text":"                                });","highlight_start":1,"highlight_end":36},{"text":"                                notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":96},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"add\" => {","highlight_start":1,"highlight_end":31},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":64},{"text":"                            let mut cidrs = iface.ip_addrs().to_vec();","highlight_start":1,"highlight_end":71},{"text":"                            for cidr in cur_value {","highlight_start":1,"highlight_end":52},{"text":"                                cidrs.insert(0, *cidr);","highlight_start":1,"highlight_end":56},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":56},{"text":"                                *s = From::from(cidrs);","highlight_start":1,"highlight_end":56},{"text":"                            });","highlight_start":1,"highlight_end":32},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":92},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"rm\" => {","highlight_start":1,"highlight_end":30},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":64},{"text":"                            let mut cidrs = iface.ip_addrs().to_vec();","highlight_start":1,"highlight_end":71},{"text":"                            for cidr in cur_value {","highlight_start":1,"highlight_end":52},{"text":"                                let pre_retain_len = cidrs.len();","highlight_start":1,"highlight_end":66},{"text":"                                cidrs.retain(|&c| c != *cidr);","highlight_start":1,"highlight_end":63},{"text":"                                if pre_retain_len == cidrs.len() {","highlight_start":1,"highlight_end":67},{"text":"                                    return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":84},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":56},{"text":"                                *s = From::from(cidrs);","highlight_start":1,"highlight_end":56},{"text":"                            });","highlight_start":1,"highlight_end":32},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":92},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"remove this semicolon","code":null,"level":"help","spans":[{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4817,"byte_end":4818,"line_start":231,"line_end":231,"column_start":72,"column_end":73,"is_primary":true,"text":[{"text":"                    $(#[allow(unused_variables)] let $c = $c.clone();)*;","highlight_start":72,"highlight_end":73}],"label":null,"suggested_replacement":"","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":6209,"byte_end":6226,"line_start":266,"line_end":266,"column_start":42,"column_end":59,"is_primary":false,"text":[{"text":"            $(children.insert($e.into(), cfg_node!($($t)*));)*","highlight_start":42,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":6209,"byte_end":6226,"line_start":266,"line_end":266,"column_start":42,"column_end":59,"is_primary":false,"text":[{"text":"            $(children.insert($e.into(), cfg_node!($($t)*));)*","highlight_start":42,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/mod.rs","byte_start":1546,"byte_end":11568,"line_start":51,"line_end":273,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    cfg_node!{","highlight_start":5,"highlight_end":15},{"text":"        \"resolv\" => {","highlight_start":1,"highlight_end":22},{"text":"            \"nameserver\" => {","highlight_start":1,"highlight_end":30},{"text":"                rw [dns_config, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":70},{"text":"                || {","highlight_start":1,"highlight_end":21},{"text":"                    format!(\"{}\\n\", dns_config.borrow().name_server)","highlight_start":1,"highlight_end":69},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let ip = Ipv4Address::from_str(line.trim())","highlight_start":1,"highlight_end":68},{"text":"                            .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":79},{"text":"                        if !ip.is_unicast() {","highlight_start":1,"highlight_end":46},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(ip);","highlight_start":1,"highlight_end":47},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(ip) = *cur_value {","highlight_start":1,"highlight_end":51},{"text":"                        dns_config.borrow_mut().name_server = ip;","highlight_start":1,"highlight_end":66},{"text":"                        notifier.borrow_mut().schedule_notify(\"resolv/nameserver\");","highlight_start":1,"highlight_end":84},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    Ok(())","highlight_start":1,"highlight_end":27},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        \"route\" => {","highlight_start":1,"highlight_end":21},{"text":"            \"list\" => {","highlight_start":1,"highlight_end":24},{"text":"                ro [iface] || {","highlight_start":1,"highlight_end":32},{"text":"                    let mut gateway = None;","highlight_start":1,"highlight_end":44},{"text":"                    iface.borrow_mut().routes_mut().update(|map| {","highlight_start":1,"highlight_end":67},{"text":"                        gateway = map.get(&gateway_cidr()).map(|route| route.via_router);","highlight_start":1,"highlight_end":90},{"text":"                    });","highlight_start":1,"highlight_end":24},{"text":"                    if let Some(ip) = gateway {","highlight_start":1,"highlight_end":48},{"text":"                        format!(\"default via {}\\n\", ip)","highlight_start":1,"highlight_end":56},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        String::new()","highlight_start":1,"highlight_end":38},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            \"add\" => {","highlight_start":1,"highlight_end":23},{"text":"                wo [iface, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":65},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let default_gw = parse_default_gw(line)?;","highlight_start":1,"highlight_end":66},{"text":"                        if !default_gw.is_unicast() {","highlight_start":1,"highlight_end":54},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(default_gw);","highlight_start":1,"highlight_end":55},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(default_gw) = *cur_value {","highlight_start":1,"highlight_end":59},{"text":"                        if iface.borrow_mut().routes_mut().add_default_ipv4_route(default_gw).is_err() {","highlight_start":1,"highlight_end":105},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        notifier.borrow_mut().schedule_notify(\"route/list\");","highlight_start":1,"highlight_end":77},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            \"rm\" => {","highlight_start":1,"highlight_end":22},{"text":"                wo [iface, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":65},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let default_gw = parse_default_gw(line)?;","highlight_start":1,"highlight_end":66},{"text":"                        if !default_gw.is_unicast() {","highlight_start":1,"highlight_end":54},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(default_gw);","highlight_start":1,"highlight_end":55},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(default_gw) = *cur_value {","highlight_start":1,"highlight_end":59},{"text":"                        let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":60},{"text":"                        let mut gateway = None;","highlight_start":1,"highlight_end":48},{"text":"                        iface.routes_mut().update(|map| {","highlight_start":1,"highlight_end":58},{"text":"                            gateway = map.get(&gateway_cidr()).map(|route| route.via_router);","highlight_start":1,"highlight_end":94},{"text":"                        });","highlight_start":1,"highlight_end":28},{"text":"                        if gateway != Some(IpAddress::Ipv4(default_gw)) {","highlight_start":1,"highlight_end":74},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        iface.routes_mut().update(|map| {","highlight_start":1,"highlight_end":58},{"text":"                            map.remove(&gateway_cidr());","highlight_start":1,"highlight_end":57},{"text":"                        });","highlight_start":1,"highlight_end":28},{"text":"                        notifier.borrow_mut().schedule_notify(\"route/list\");","highlight_start":1,"highlight_end":77},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        \"ifaces\" => {","highlight_start":1,"highlight_end":22},{"text":"            \"eth0\" => {","highlight_start":1,"highlight_end":24},{"text":"                \"mac\" => {","highlight_start":1,"highlight_end":27},{"text":"                    rw [iface, notifier] (Option<EthernetAddress>, None)","highlight_start":1,"highlight_end":73},{"text":"                    || {","highlight_start":1,"highlight_end":25},{"text":"                        format!(\"{}\\n\", iface.borrow().ethernet_addr())","highlight_start":1,"highlight_end":72},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    |cur_value, line| {","highlight_start":1,"highlight_end":40},{"text":"                        if cur_value.is_none() {","highlight_start":1,"highlight_end":49},{"text":"                            let mac = EthernetAddress::from_str(line).","highlight_start":1,"highlight_end":71},{"text":"                                map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":82},{"text":"                            if !mac.is_unicast() {","highlight_start":1,"highlight_end":51},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            *cur_value = Some(mac);","highlight_start":1,"highlight_end":52},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        } else {","highlight_start":1,"highlight_end":33},{"text":"                            Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":68},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    |cur_value| {","highlight_start":1,"highlight_end":34},{"text":"                        if let Some(mac) = *cur_value {","highlight_start":1,"highlight_end":56},{"text":"                            iface.borrow_mut().set_ethernet_addr(mac);","highlight_start":1,"highlight_end":71},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/mac\");","highlight_start":1,"highlight_end":86},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"                \"addr\" => {","highlight_start":1,"highlight_end":28},{"text":"                    \"list\" => {","highlight_start":1,"highlight_end":32},{"text":"                        ro [iface]","highlight_start":1,"highlight_end":35},{"text":"                        || {","highlight_start":1,"highlight_end":29},{"text":"                            let mut ips = String::new();","highlight_start":1,"highlight_end":57},{"text":"                            for cidr in iface.borrow().ip_addrs() {","highlight_start":1,"highlight_end":68},{"text":"                                ips += &format!(\"{}\\n\", cidr);","highlight_start":1,"highlight_end":63},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            ips","highlight_start":1,"highlight_end":32},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"set\" => {","highlight_start":1,"highlight_end":31},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            if !cur_value.is_empty() {","highlight_start":1,"highlight_end":55},{"text":"                                let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":68},{"text":"                                let mut cidrs = vec![];","highlight_start":1,"highlight_end":56},{"text":"                                mem::swap(cur_value, &mut cidrs);","highlight_start":1,"highlight_end":66},{"text":"                                iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":60},{"text":"                                    *s = From::from(cidrs);","highlight_start":1,"highlight_end":60},{"text":"                                });","highlight_start":1,"highlight_end":36},{"text":"                                notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":96},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"add\" => {","highlight_start":1,"highlight_end":31},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":64},{"text":"                            let mut cidrs = iface.ip_addrs().to_vec();","highlight_start":1,"highlight_end":71},{"text":"                            for cidr in cur_value {","highlight_start":1,"highlight_end":52},{"text":"                                cidrs.insert(0, *cidr);","highlight_start":1,"highlight_end":56},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":56},{"text":"                                *s = From::from(cidrs);","highlight_start":1,"highlight_end":56},{"text":"                            });","highlight_start":1,"highlight_end":32},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":92},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"rm\" => {","highlight_start":1,"highlight_end":30},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":64},{"text":"                            let mut cidrs = iface.ip_addrs().to_vec();","highlight_start":1,"highlight_end":71},{"text":"                            for cidr in cur_value {","highlight_start":1,"highlight_end":52},{"text":"                                let pre_retain_len = cidrs.len();","highlight_start":1,"highlight_end":66},{"text":"                                cidrs.retain(|&c| c != *cidr);","highlight_start":1,"highlight_end":63},{"text":"                                if pre_retain_len == cidrs.len() {","highlight_start":1,"highlight_end":67},{"text":"                                    return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":84},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":56},{"text":"                                *s = From::from(cidrs);","highlight_start":1,"highlight_end":56},{"text":"                            });","highlight_start":1,"highlight_end":32},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":92},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unnecessary trailing semicolon\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/smolnetd/scheme/netcfg/nodes.rs:231:72\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m231\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m                    $(#[allow(unused_variables)] let $c = $c.clone();)*;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this semicolon\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0msrc/smolnetd/scheme/netcfg/mod.rs:51:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m51\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    cfg_node!{\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m52\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        \"resolv\" => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m53\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            \"nameserver\" => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m54\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                rw [dns_config, notifier] (Option<Ipv4Address>, None)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m272\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m273\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_____-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `cfg_node` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"unnecessary trailing semicolon","code":{"code":"redundant_semicolons","explanation":null},"level":"warning","spans":[{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4456,"byte_end":4457,"line_start":224,"line_end":224,"column_start":64,"column_end":65,"is_primary":true,"text":[{"text":"            $(#[allow(unused_variables)] let $c = $c.clone();)*;","highlight_start":64,"highlight_end":65}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":6209,"byte_end":6226,"line_start":266,"line_end":266,"column_start":42,"column_end":59,"is_primary":false,"text":[{"text":"            $(children.insert($e.into(), cfg_node!($($t)*));)*","highlight_start":42,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":6209,"byte_end":6226,"line_start":266,"line_end":266,"column_start":42,"column_end":59,"is_primary":false,"text":[{"text":"            $(children.insert($e.into(), cfg_node!($($t)*));)*","highlight_start":42,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/mod.rs","byte_start":1546,"byte_end":11568,"line_start":51,"line_end":273,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    cfg_node!{","highlight_start":5,"highlight_end":15},{"text":"        \"resolv\" => {","highlight_start":1,"highlight_end":22},{"text":"            \"nameserver\" => {","highlight_start":1,"highlight_end":30},{"text":"                rw [dns_config, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":70},{"text":"                || {","highlight_start":1,"highlight_end":21},{"text":"                    format!(\"{}\\n\", dns_config.borrow().name_server)","highlight_start":1,"highlight_end":69},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let ip = Ipv4Address::from_str(line.trim())","highlight_start":1,"highlight_end":68},{"text":"                            .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":79},{"text":"                        if !ip.is_unicast() {","highlight_start":1,"highlight_end":46},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(ip);","highlight_start":1,"highlight_end":47},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(ip) = *cur_value {","highlight_start":1,"highlight_end":51},{"text":"                        dns_config.borrow_mut().name_server = ip;","highlight_start":1,"highlight_end":66},{"text":"                        notifier.borrow_mut().schedule_notify(\"resolv/nameserver\");","highlight_start":1,"highlight_end":84},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    Ok(())","highlight_start":1,"highlight_end":27},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        \"route\" => {","highlight_start":1,"highlight_end":21},{"text":"            \"list\" => {","highlight_start":1,"highlight_end":24},{"text":"                ro [iface] || {","highlight_start":1,"highlight_end":32},{"text":"                    let mut gateway = None;","highlight_start":1,"highlight_end":44},{"text":"                    iface.borrow_mut().routes_mut().update(|map| {","highlight_start":1,"highlight_end":67},{"text":"                        gateway = map.get(&gateway_cidr()).map(|route| route.via_router);","highlight_start":1,"highlight_end":90},{"text":"                    });","highlight_start":1,"highlight_end":24},{"text":"                    if let Some(ip) = gateway {","highlight_start":1,"highlight_end":48},{"text":"                        format!(\"default via {}\\n\", ip)","highlight_start":1,"highlight_end":56},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        String::new()","highlight_start":1,"highlight_end":38},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            \"add\" => {","highlight_start":1,"highlight_end":23},{"text":"                wo [iface, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":65},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let default_gw = parse_default_gw(line)?;","highlight_start":1,"highlight_end":66},{"text":"                        if !default_gw.is_unicast() {","highlight_start":1,"highlight_end":54},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(default_gw);","highlight_start":1,"highlight_end":55},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(default_gw) = *cur_value {","highlight_start":1,"highlight_end":59},{"text":"                        if iface.borrow_mut().routes_mut().add_default_ipv4_route(default_gw).is_err() {","highlight_start":1,"highlight_end":105},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        notifier.borrow_mut().schedule_notify(\"route/list\");","highlight_start":1,"highlight_end":77},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            \"rm\" => {","highlight_start":1,"highlight_end":22},{"text":"                wo [iface, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":65},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let default_gw = parse_default_gw(line)?;","highlight_start":1,"highlight_end":66},{"text":"                        if !default_gw.is_unicast() {","highlight_start":1,"highlight_end":54},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(default_gw);","highlight_start":1,"highlight_end":55},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(default_gw) = *cur_value {","highlight_start":1,"highlight_end":59},{"text":"                        let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":60},{"text":"                        let mut gateway = None;","highlight_start":1,"highlight_end":48},{"text":"                        iface.routes_mut().update(|map| {","highlight_start":1,"highlight_end":58},{"text":"                            gateway = map.get(&gateway_cidr()).map(|route| route.via_router);","highlight_start":1,"highlight_end":94},{"text":"                        });","highlight_start":1,"highlight_end":28},{"text":"                        if gateway != Some(IpAddress::Ipv4(default_gw)) {","highlight_start":1,"highlight_end":74},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        iface.routes_mut().update(|map| {","highlight_start":1,"highlight_end":58},{"text":"                            map.remove(&gateway_cidr());","highlight_start":1,"highlight_end":57},{"text":"                        });","highlight_start":1,"highlight_end":28},{"text":"                        notifier.borrow_mut().schedule_notify(\"route/list\");","highlight_start":1,"highlight_end":77},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        \"ifaces\" => {","highlight_start":1,"highlight_end":22},{"text":"            \"eth0\" => {","highlight_start":1,"highlight_end":24},{"text":"                \"mac\" => {","highlight_start":1,"highlight_end":27},{"text":"                    rw [iface, notifier] (Option<EthernetAddress>, None)","highlight_start":1,"highlight_end":73},{"text":"                    || {","highlight_start":1,"highlight_end":25},{"text":"                        format!(\"{}\\n\", iface.borrow().ethernet_addr())","highlight_start":1,"highlight_end":72},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    |cur_value, line| {","highlight_start":1,"highlight_end":40},{"text":"                        if cur_value.is_none() {","highlight_start":1,"highlight_end":49},{"text":"                            let mac = EthernetAddress::from_str(line).","highlight_start":1,"highlight_end":71},{"text":"                                map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":82},{"text":"                            if !mac.is_unicast() {","highlight_start":1,"highlight_end":51},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            *cur_value = Some(mac);","highlight_start":1,"highlight_end":52},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        } else {","highlight_start":1,"highlight_end":33},{"text":"                            Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":68},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    |cur_value| {","highlight_start":1,"highlight_end":34},{"text":"                        if let Some(mac) = *cur_value {","highlight_start":1,"highlight_end":56},{"text":"                            iface.borrow_mut().set_ethernet_addr(mac);","highlight_start":1,"highlight_end":71},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/mac\");","highlight_start":1,"highlight_end":86},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"                \"addr\" => {","highlight_start":1,"highlight_end":28},{"text":"                    \"list\" => {","highlight_start":1,"highlight_end":32},{"text":"                        ro [iface]","highlight_start":1,"highlight_end":35},{"text":"                        || {","highlight_start":1,"highlight_end":29},{"text":"                            let mut ips = String::new();","highlight_start":1,"highlight_end":57},{"text":"                            for cidr in iface.borrow().ip_addrs() {","highlight_start":1,"highlight_end":68},{"text":"                                ips += &format!(\"{}\\n\", cidr);","highlight_start":1,"highlight_end":63},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            ips","highlight_start":1,"highlight_end":32},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"set\" => {","highlight_start":1,"highlight_end":31},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            if !cur_value.is_empty() {","highlight_start":1,"highlight_end":55},{"text":"                                let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":68},{"text":"                                let mut cidrs = vec![];","highlight_start":1,"highlight_end":56},{"text":"                                mem::swap(cur_value, &mut cidrs);","highlight_start":1,"highlight_end":66},{"text":"                                iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":60},{"text":"                                    *s = From::from(cidrs);","highlight_start":1,"highlight_end":60},{"text":"                                });","highlight_start":1,"highlight_end":36},{"text":"                                notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":96},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"add\" => {","highlight_start":1,"highlight_end":31},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":64},{"text":"                            let mut cidrs = iface.ip_addrs().to_vec();","highlight_start":1,"highlight_end":71},{"text":"                            for cidr in cur_value {","highlight_start":1,"highlight_end":52},{"text":"                                cidrs.insert(0, *cidr);","highlight_start":1,"highlight_end":56},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":56},{"text":"                                *s = From::from(cidrs);","highlight_start":1,"highlight_end":56},{"text":"                            });","highlight_start":1,"highlight_end":32},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":92},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"rm\" => {","highlight_start":1,"highlight_end":30},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":64},{"text":"                            let mut cidrs = iface.ip_addrs().to_vec();","highlight_start":1,"highlight_end":71},{"text":"                            for cidr in cur_value {","highlight_start":1,"highlight_end":52},{"text":"                                let pre_retain_len = cidrs.len();","highlight_start":1,"highlight_end":66},{"text":"                                cidrs.retain(|&c| c != *cidr);","highlight_start":1,"highlight_end":63},{"text":"                                if pre_retain_len == cidrs.len() {","highlight_start":1,"highlight_end":67},{"text":"                                    return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":84},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":56},{"text":"                                *s = From::from(cidrs);","highlight_start":1,"highlight_end":56},{"text":"                            });","highlight_start":1,"highlight_end":32},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":92},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"remove this semicolon","code":null,"level":"help","spans":[{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4456,"byte_end":4457,"line_start":224,"line_end":224,"column_start":64,"column_end":65,"is_primary":true,"text":[{"text":"            $(#[allow(unused_variables)] let $c = $c.clone();)*;","highlight_start":64,"highlight_end":65}],"label":null,"suggested_replacement":"","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":6209,"byte_end":6226,"line_start":266,"line_end":266,"column_start":42,"column_end":59,"is_primary":false,"text":[{"text":"            $(children.insert($e.into(), cfg_node!($($t)*));)*","highlight_start":42,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":6209,"byte_end":6226,"line_start":266,"line_end":266,"column_start":42,"column_end":59,"is_primary":false,"text":[{"text":"            $(children.insert($e.into(), cfg_node!($($t)*));)*","highlight_start":42,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/mod.rs","byte_start":1546,"byte_end":11568,"line_start":51,"line_end":273,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    cfg_node!{","highlight_start":5,"highlight_end":15},{"text":"        \"resolv\" => {","highlight_start":1,"highlight_end":22},{"text":"            \"nameserver\" => {","highlight_start":1,"highlight_end":30},{"text":"                rw [dns_config, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":70},{"text":"                || {","highlight_start":1,"highlight_end":21},{"text":"                    format!(\"{}\\n\", dns_config.borrow().name_server)","highlight_start":1,"highlight_end":69},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let ip = Ipv4Address::from_str(line.trim())","highlight_start":1,"highlight_end":68},{"text":"                            .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":79},{"text":"                        if !ip.is_unicast() {","highlight_start":1,"highlight_end":46},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(ip);","highlight_start":1,"highlight_end":47},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(ip) = *cur_value {","highlight_start":1,"highlight_end":51},{"text":"                        dns_config.borrow_mut().name_server = ip;","highlight_start":1,"highlight_end":66},{"text":"                        notifier.borrow_mut().schedule_notify(\"resolv/nameserver\");","highlight_start":1,"highlight_end":84},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    Ok(())","highlight_start":1,"highlight_end":27},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        \"route\" => {","highlight_start":1,"highlight_end":21},{"text":"            \"list\" => {","highlight_start":1,"highlight_end":24},{"text":"                ro [iface] || {","highlight_start":1,"highlight_end":32},{"text":"                    let mut gateway = None;","highlight_start":1,"highlight_end":44},{"text":"                    iface.borrow_mut().routes_mut().update(|map| {","highlight_start":1,"highlight_end":67},{"text":"                        gateway = map.get(&gateway_cidr()).map(|route| route.via_router);","highlight_start":1,"highlight_end":90},{"text":"                    });","highlight_start":1,"highlight_end":24},{"text":"                    if let Some(ip) = gateway {","highlight_start":1,"highlight_end":48},{"text":"                        format!(\"default via {}\\n\", ip)","highlight_start":1,"highlight_end":56},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        String::new()","highlight_start":1,"highlight_end":38},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            \"add\" => {","highlight_start":1,"highlight_end":23},{"text":"                wo [iface, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":65},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let default_gw = parse_default_gw(line)?;","highlight_start":1,"highlight_end":66},{"text":"                        if !default_gw.is_unicast() {","highlight_start":1,"highlight_end":54},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(default_gw);","highlight_start":1,"highlight_end":55},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(default_gw) = *cur_value {","highlight_start":1,"highlight_end":59},{"text":"                        if iface.borrow_mut().routes_mut().add_default_ipv4_route(default_gw).is_err() {","highlight_start":1,"highlight_end":105},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        notifier.borrow_mut().schedule_notify(\"route/list\");","highlight_start":1,"highlight_end":77},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            \"rm\" => {","highlight_start":1,"highlight_end":22},{"text":"                wo [iface, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":65},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let default_gw = parse_default_gw(line)?;","highlight_start":1,"highlight_end":66},{"text":"                        if !default_gw.is_unicast() {","highlight_start":1,"highlight_end":54},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(default_gw);","highlight_start":1,"highlight_end":55},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(default_gw) = *cur_value {","highlight_start":1,"highlight_end":59},{"text":"                        let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":60},{"text":"                        let mut gateway = None;","highlight_start":1,"highlight_end":48},{"text":"                        iface.routes_mut().update(|map| {","highlight_start":1,"highlight_end":58},{"text":"                            gateway = map.get(&gateway_cidr()).map(|route| route.via_router);","highlight_start":1,"highlight_end":94},{"text":"                        });","highlight_start":1,"highlight_end":28},{"text":"                        if gateway != Some(IpAddress::Ipv4(default_gw)) {","highlight_start":1,"highlight_end":74},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        iface.routes_mut().update(|map| {","highlight_start":1,"highlight_end":58},{"text":"                            map.remove(&gateway_cidr());","highlight_start":1,"highlight_end":57},{"text":"                        });","highlight_start":1,"highlight_end":28},{"text":"                        notifier.borrow_mut().schedule_notify(\"route/list\");","highlight_start":1,"highlight_end":77},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        \"ifaces\" => {","highlight_start":1,"highlight_end":22},{"text":"            \"eth0\" => {","highlight_start":1,"highlight_end":24},{"text":"                \"mac\" => {","highlight_start":1,"highlight_end":27},{"text":"                    rw [iface, notifier] (Option<EthernetAddress>, None)","highlight_start":1,"highlight_end":73},{"text":"                    || {","highlight_start":1,"highlight_end":25},{"text":"                        format!(\"{}\\n\", iface.borrow().ethernet_addr())","highlight_start":1,"highlight_end":72},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    |cur_value, line| {","highlight_start":1,"highlight_end":40},{"text":"                        if cur_value.is_none() {","highlight_start":1,"highlight_end":49},{"text":"                            let mac = EthernetAddress::from_str(line).","highlight_start":1,"highlight_end":71},{"text":"                                map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":82},{"text":"                            if !mac.is_unicast() {","highlight_start":1,"highlight_end":51},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            *cur_value = Some(mac);","highlight_start":1,"highlight_end":52},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        } else {","highlight_start":1,"highlight_end":33},{"text":"                            Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":68},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    |cur_value| {","highlight_start":1,"highlight_end":34},{"text":"                        if let Some(mac) = *cur_value {","highlight_start":1,"highlight_end":56},{"text":"                            iface.borrow_mut().set_ethernet_addr(mac);","highlight_start":1,"highlight_end":71},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/mac\");","highlight_start":1,"highlight_end":86},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"                \"addr\" => {","highlight_start":1,"highlight_end":28},{"text":"                    \"list\" => {","highlight_start":1,"highlight_end":32},{"text":"                        ro [iface]","highlight_start":1,"highlight_end":35},{"text":"                        || {","highlight_start":1,"highlight_end":29},{"text":"                            let mut ips = String::new();","highlight_start":1,"highlight_end":57},{"text":"                            for cidr in iface.borrow().ip_addrs() {","highlight_start":1,"highlight_end":68},{"text":"                                ips += &format!(\"{}\\n\", cidr);","highlight_start":1,"highlight_end":63},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            ips","highlight_start":1,"highlight_end":32},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"set\" => {","highlight_start":1,"highlight_end":31},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            if !cur_value.is_empty() {","highlight_start":1,"highlight_end":55},{"text":"                                let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":68},{"text":"                                let mut cidrs = vec![];","highlight_start":1,"highlight_end":56},{"text":"                                mem::swap(cur_value, &mut cidrs);","highlight_start":1,"highlight_end":66},{"text":"                                iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":60},{"text":"                                    *s = From::from(cidrs);","highlight_start":1,"highlight_end":60},{"text":"                                });","highlight_start":1,"highlight_end":36},{"text":"                                notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":96},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"add\" => {","highlight_start":1,"highlight_end":31},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":64},{"text":"                            let mut cidrs = iface.ip_addrs().to_vec();","highlight_start":1,"highlight_end":71},{"text":"                            for cidr in cur_value {","highlight_start":1,"highlight_end":52},{"text":"                                cidrs.insert(0, *cidr);","highlight_start":1,"highlight_end":56},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":56},{"text":"                                *s = From::from(cidrs);","highlight_start":1,"highlight_end":56},{"text":"                            });","highlight_start":1,"highlight_end":32},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":92},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"rm\" => {","highlight_start":1,"highlight_end":30},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":64},{"text":"                            let mut cidrs = iface.ip_addrs().to_vec();","highlight_start":1,"highlight_end":71},{"text":"                            for cidr in cur_value {","highlight_start":1,"highlight_end":52},{"text":"                                let pre_retain_len = cidrs.len();","highlight_start":1,"highlight_end":66},{"text":"                                cidrs.retain(|&c| c != *cidr);","highlight_start":1,"highlight_end":63},{"text":"                                if pre_retain_len == cidrs.len() {","highlight_start":1,"highlight_end":67},{"text":"                                    return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":84},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":56},{"text":"                                *s = From::from(cidrs);","highlight_start":1,"highlight_end":56},{"text":"                            });","highlight_start":1,"highlight_end":32},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":92},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unnecessary trailing semicolon\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/smolnetd/scheme/netcfg/nodes.rs:224:64\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m224\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m            $(#[allow(unused_variables)] let $c = $c.clone();)*;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this semicolon\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0msrc/smolnetd/scheme/netcfg/mod.rs:51:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m51\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    cfg_node!{\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m52\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        \"resolv\" => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m53\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            \"nameserver\" => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m54\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                rw [dns_config, notifier] (Option<Ipv4Address>, None)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m272\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m273\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_____-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `cfg_node` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"unnecessary trailing semicolon","code":{"code":"redundant_semicolons","explanation":null},"level":"warning","spans":[{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4622,"byte_end":4623,"line_start":227,"line_end":227,"column_start":72,"column_end":73,"is_primary":true,"text":[{"text":"                    $(#[allow(unused_variables)] let $c = $c.clone();)*;","highlight_start":72,"highlight_end":73}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":6209,"byte_end":6226,"line_start":266,"line_end":266,"column_start":42,"column_end":59,"is_primary":false,"text":[{"text":"            $(children.insert($e.into(), cfg_node!($($t)*));)*","highlight_start":42,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":6209,"byte_end":6226,"line_start":266,"line_end":266,"column_start":42,"column_end":59,"is_primary":false,"text":[{"text":"            $(children.insert($e.into(), cfg_node!($($t)*));)*","highlight_start":42,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/mod.rs","byte_start":1546,"byte_end":11568,"line_start":51,"line_end":273,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    cfg_node!{","highlight_start":5,"highlight_end":15},{"text":"        \"resolv\" => {","highlight_start":1,"highlight_end":22},{"text":"            \"nameserver\" => {","highlight_start":1,"highlight_end":30},{"text":"                rw [dns_config, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":70},{"text":"                || {","highlight_start":1,"highlight_end":21},{"text":"                    format!(\"{}\\n\", dns_config.borrow().name_server)","highlight_start":1,"highlight_end":69},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let ip = Ipv4Address::from_str(line.trim())","highlight_start":1,"highlight_end":68},{"text":"                            .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":79},{"text":"                        if !ip.is_unicast() {","highlight_start":1,"highlight_end":46},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(ip);","highlight_start":1,"highlight_end":47},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(ip) = *cur_value {","highlight_start":1,"highlight_end":51},{"text":"                        dns_config.borrow_mut().name_server = ip;","highlight_start":1,"highlight_end":66},{"text":"                        notifier.borrow_mut().schedule_notify(\"resolv/nameserver\");","highlight_start":1,"highlight_end":84},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    Ok(())","highlight_start":1,"highlight_end":27},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        \"route\" => {","highlight_start":1,"highlight_end":21},{"text":"            \"list\" => {","highlight_start":1,"highlight_end":24},{"text":"                ro [iface] || {","highlight_start":1,"highlight_end":32},{"text":"                    let mut gateway = None;","highlight_start":1,"highlight_end":44},{"text":"                    iface.borrow_mut().routes_mut().update(|map| {","highlight_start":1,"highlight_end":67},{"text":"                        gateway = map.get(&gateway_cidr()).map(|route| route.via_router);","highlight_start":1,"highlight_end":90},{"text":"                    });","highlight_start":1,"highlight_end":24},{"text":"                    if let Some(ip) = gateway {","highlight_start":1,"highlight_end":48},{"text":"                        format!(\"default via {}\\n\", ip)","highlight_start":1,"highlight_end":56},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        String::new()","highlight_start":1,"highlight_end":38},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            \"add\" => {","highlight_start":1,"highlight_end":23},{"text":"                wo [iface, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":65},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let default_gw = parse_default_gw(line)?;","highlight_start":1,"highlight_end":66},{"text":"                        if !default_gw.is_unicast() {","highlight_start":1,"highlight_end":54},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(default_gw);","highlight_start":1,"highlight_end":55},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(default_gw) = *cur_value {","highlight_start":1,"highlight_end":59},{"text":"                        if iface.borrow_mut().routes_mut().add_default_ipv4_route(default_gw).is_err() {","highlight_start":1,"highlight_end":105},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        notifier.borrow_mut().schedule_notify(\"route/list\");","highlight_start":1,"highlight_end":77},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            \"rm\" => {","highlight_start":1,"highlight_end":22},{"text":"                wo [iface, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":65},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let default_gw = parse_default_gw(line)?;","highlight_start":1,"highlight_end":66},{"text":"                        if !default_gw.is_unicast() {","highlight_start":1,"highlight_end":54},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(default_gw);","highlight_start":1,"highlight_end":55},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(default_gw) = *cur_value {","highlight_start":1,"highlight_end":59},{"text":"                        let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":60},{"text":"                        let mut gateway = None;","highlight_start":1,"highlight_end":48},{"text":"                        iface.routes_mut().update(|map| {","highlight_start":1,"highlight_end":58},{"text":"                            gateway = map.get(&gateway_cidr()).map(|route| route.via_router);","highlight_start":1,"highlight_end":94},{"text":"                        });","highlight_start":1,"highlight_end":28},{"text":"                        if gateway != Some(IpAddress::Ipv4(default_gw)) {","highlight_start":1,"highlight_end":74},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        iface.routes_mut().update(|map| {","highlight_start":1,"highlight_end":58},{"text":"                            map.remove(&gateway_cidr());","highlight_start":1,"highlight_end":57},{"text":"                        });","highlight_start":1,"highlight_end":28},{"text":"                        notifier.borrow_mut().schedule_notify(\"route/list\");","highlight_start":1,"highlight_end":77},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        \"ifaces\" => {","highlight_start":1,"highlight_end":22},{"text":"            \"eth0\" => {","highlight_start":1,"highlight_end":24},{"text":"                \"mac\" => {","highlight_start":1,"highlight_end":27},{"text":"                    rw [iface, notifier] (Option<EthernetAddress>, None)","highlight_start":1,"highlight_end":73},{"text":"                    || {","highlight_start":1,"highlight_end":25},{"text":"                        format!(\"{}\\n\", iface.borrow().ethernet_addr())","highlight_start":1,"highlight_end":72},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    |cur_value, line| {","highlight_start":1,"highlight_end":40},{"text":"                        if cur_value.is_none() {","highlight_start":1,"highlight_end":49},{"text":"                            let mac = EthernetAddress::from_str(line).","highlight_start":1,"highlight_end":71},{"text":"                                map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":82},{"text":"                            if !mac.is_unicast() {","highlight_start":1,"highlight_end":51},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            *cur_value = Some(mac);","highlight_start":1,"highlight_end":52},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        } else {","highlight_start":1,"highlight_end":33},{"text":"                            Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":68},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    |cur_value| {","highlight_start":1,"highlight_end":34},{"text":"                        if let Some(mac) = *cur_value {","highlight_start":1,"highlight_end":56},{"text":"                            iface.borrow_mut().set_ethernet_addr(mac);","highlight_start":1,"highlight_end":71},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/mac\");","highlight_start":1,"highlight_end":86},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"                \"addr\" => {","highlight_start":1,"highlight_end":28},{"text":"                    \"list\" => {","highlight_start":1,"highlight_end":32},{"text":"                        ro [iface]","highlight_start":1,"highlight_end":35},{"text":"                        || {","highlight_start":1,"highlight_end":29},{"text":"                            let mut ips = String::new();","highlight_start":1,"highlight_end":57},{"text":"                            for cidr in iface.borrow().ip_addrs() {","highlight_start":1,"highlight_end":68},{"text":"                                ips += &format!(\"{}\\n\", cidr);","highlight_start":1,"highlight_end":63},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            ips","highlight_start":1,"highlight_end":32},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"set\" => {","highlight_start":1,"highlight_end":31},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            if !cur_value.is_empty() {","highlight_start":1,"highlight_end":55},{"text":"                                let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":68},{"text":"                                let mut cidrs = vec![];","highlight_start":1,"highlight_end":56},{"text":"                                mem::swap(cur_value, &mut cidrs);","highlight_start":1,"highlight_end":66},{"text":"                                iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":60},{"text":"                                    *s = From::from(cidrs);","highlight_start":1,"highlight_end":60},{"text":"                                });","highlight_start":1,"highlight_end":36},{"text":"                                notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":96},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"add\" => {","highlight_start":1,"highlight_end":31},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":64},{"text":"                            let mut cidrs = iface.ip_addrs().to_vec();","highlight_start":1,"highlight_end":71},{"text":"                            for cidr in cur_value {","highlight_start":1,"highlight_end":52},{"text":"                                cidrs.insert(0, *cidr);","highlight_start":1,"highlight_end":56},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":56},{"text":"                                *s = From::from(cidrs);","highlight_start":1,"highlight_end":56},{"text":"                            });","highlight_start":1,"highlight_end":32},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":92},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"rm\" => {","highlight_start":1,"highlight_end":30},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":64},{"text":"                            let mut cidrs = iface.ip_addrs().to_vec();","highlight_start":1,"highlight_end":71},{"text":"                            for cidr in cur_value {","highlight_start":1,"highlight_end":52},{"text":"                                let pre_retain_len = cidrs.len();","highlight_start":1,"highlight_end":66},{"text":"                                cidrs.retain(|&c| c != *cidr);","highlight_start":1,"highlight_end":63},{"text":"                                if pre_retain_len == cidrs.len() {","highlight_start":1,"highlight_end":67},{"text":"                                    return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":84},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":56},{"text":"                                *s = From::from(cidrs);","highlight_start":1,"highlight_end":56},{"text":"                            });","highlight_start":1,"highlight_end":32},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":92},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"remove this semicolon","code":null,"level":"help","spans":[{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4622,"byte_end":4623,"line_start":227,"line_end":227,"column_start":72,"column_end":73,"is_primary":true,"text":[{"text":"                    $(#[allow(unused_variables)] let $c = $c.clone();)*;","highlight_start":72,"highlight_end":73}],"label":null,"suggested_replacement":"","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":6209,"byte_end":6226,"line_start":266,"line_end":266,"column_start":42,"column_end":59,"is_primary":false,"text":[{"text":"            $(children.insert($e.into(), cfg_node!($($t)*));)*","highlight_start":42,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":6209,"byte_end":6226,"line_start":266,"line_end":266,"column_start":42,"column_end":59,"is_primary":false,"text":[{"text":"            $(children.insert($e.into(), cfg_node!($($t)*));)*","highlight_start":42,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/mod.rs","byte_start":1546,"byte_end":11568,"line_start":51,"line_end":273,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    cfg_node!{","highlight_start":5,"highlight_end":15},{"text":"        \"resolv\" => {","highlight_start":1,"highlight_end":22},{"text":"            \"nameserver\" => {","highlight_start":1,"highlight_end":30},{"text":"                rw [dns_config, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":70},{"text":"                || {","highlight_start":1,"highlight_end":21},{"text":"                    format!(\"{}\\n\", dns_config.borrow().name_server)","highlight_start":1,"highlight_end":69},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let ip = Ipv4Address::from_str(line.trim())","highlight_start":1,"highlight_end":68},{"text":"                            .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":79},{"text":"                        if !ip.is_unicast() {","highlight_start":1,"highlight_end":46},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(ip);","highlight_start":1,"highlight_end":47},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(ip) = *cur_value {","highlight_start":1,"highlight_end":51},{"text":"                        dns_config.borrow_mut().name_server = ip;","highlight_start":1,"highlight_end":66},{"text":"                        notifier.borrow_mut().schedule_notify(\"resolv/nameserver\");","highlight_start":1,"highlight_end":84},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    Ok(())","highlight_start":1,"highlight_end":27},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        \"route\" => {","highlight_start":1,"highlight_end":21},{"text":"            \"list\" => {","highlight_start":1,"highlight_end":24},{"text":"                ro [iface] || {","highlight_start":1,"highlight_end":32},{"text":"                    let mut gateway = None;","highlight_start":1,"highlight_end":44},{"text":"                    iface.borrow_mut().routes_mut().update(|map| {","highlight_start":1,"highlight_end":67},{"text":"                        gateway = map.get(&gateway_cidr()).map(|route| route.via_router);","highlight_start":1,"highlight_end":90},{"text":"                    });","highlight_start":1,"highlight_end":24},{"text":"                    if let Some(ip) = gateway {","highlight_start":1,"highlight_end":48},{"text":"                        format!(\"default via {}\\n\", ip)","highlight_start":1,"highlight_end":56},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        String::new()","highlight_start":1,"highlight_end":38},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            \"add\" => {","highlight_start":1,"highlight_end":23},{"text":"                wo [iface, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":65},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let default_gw = parse_default_gw(line)?;","highlight_start":1,"highlight_end":66},{"text":"                        if !default_gw.is_unicast() {","highlight_start":1,"highlight_end":54},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(default_gw);","highlight_start":1,"highlight_end":55},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(default_gw) = *cur_value {","highlight_start":1,"highlight_end":59},{"text":"                        if iface.borrow_mut().routes_mut().add_default_ipv4_route(default_gw).is_err() {","highlight_start":1,"highlight_end":105},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        notifier.borrow_mut().schedule_notify(\"route/list\");","highlight_start":1,"highlight_end":77},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            \"rm\" => {","highlight_start":1,"highlight_end":22},{"text":"                wo [iface, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":65},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let default_gw = parse_default_gw(line)?;","highlight_start":1,"highlight_end":66},{"text":"                        if !default_gw.is_unicast() {","highlight_start":1,"highlight_end":54},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(default_gw);","highlight_start":1,"highlight_end":55},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(default_gw) = *cur_value {","highlight_start":1,"highlight_end":59},{"text":"                        let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":60},{"text":"                        let mut gateway = None;","highlight_start":1,"highlight_end":48},{"text":"                        iface.routes_mut().update(|map| {","highlight_start":1,"highlight_end":58},{"text":"                            gateway = map.get(&gateway_cidr()).map(|route| route.via_router);","highlight_start":1,"highlight_end":94},{"text":"                        });","highlight_start":1,"highlight_end":28},{"text":"                        if gateway != Some(IpAddress::Ipv4(default_gw)) {","highlight_start":1,"highlight_end":74},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        iface.routes_mut().update(|map| {","highlight_start":1,"highlight_end":58},{"text":"                            map.remove(&gateway_cidr());","highlight_start":1,"highlight_end":57},{"text":"                        });","highlight_start":1,"highlight_end":28},{"text":"                        notifier.borrow_mut().schedule_notify(\"route/list\");","highlight_start":1,"highlight_end":77},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        \"ifaces\" => {","highlight_start":1,"highlight_end":22},{"text":"            \"eth0\" => {","highlight_start":1,"highlight_end":24},{"text":"                \"mac\" => {","highlight_start":1,"highlight_end":27},{"text":"                    rw [iface, notifier] (Option<EthernetAddress>, None)","highlight_start":1,"highlight_end":73},{"text":"                    || {","highlight_start":1,"highlight_end":25},{"text":"                        format!(\"{}\\n\", iface.borrow().ethernet_addr())","highlight_start":1,"highlight_end":72},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    |cur_value, line| {","highlight_start":1,"highlight_end":40},{"text":"                        if cur_value.is_none() {","highlight_start":1,"highlight_end":49},{"text":"                            let mac = EthernetAddress::from_str(line).","highlight_start":1,"highlight_end":71},{"text":"                                map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":82},{"text":"                            if !mac.is_unicast() {","highlight_start":1,"highlight_end":51},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            *cur_value = Some(mac);","highlight_start":1,"highlight_end":52},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        } else {","highlight_start":1,"highlight_end":33},{"text":"                            Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":68},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    |cur_value| {","highlight_start":1,"highlight_end":34},{"text":"                        if let Some(mac) = *cur_value {","highlight_start":1,"highlight_end":56},{"text":"                            iface.borrow_mut().set_ethernet_addr(mac);","highlight_start":1,"highlight_end":71},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/mac\");","highlight_start":1,"highlight_end":86},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"                \"addr\" => {","highlight_start":1,"highlight_end":28},{"text":"                    \"list\" => {","highlight_start":1,"highlight_end":32},{"text":"                        ro [iface]","highlight_start":1,"highlight_end":35},{"text":"                        || {","highlight_start":1,"highlight_end":29},{"text":"                            let mut ips = String::new();","highlight_start":1,"highlight_end":57},{"text":"                            for cidr in iface.borrow().ip_addrs() {","highlight_start":1,"highlight_end":68},{"text":"                                ips += &format!(\"{}\\n\", cidr);","highlight_start":1,"highlight_end":63},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            ips","highlight_start":1,"highlight_end":32},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"set\" => {","highlight_start":1,"highlight_end":31},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            if !cur_value.is_empty() {","highlight_start":1,"highlight_end":55},{"text":"                                let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":68},{"text":"                                let mut cidrs = vec![];","highlight_start":1,"highlight_end":56},{"text":"                                mem::swap(cur_value, &mut cidrs);","highlight_start":1,"highlight_end":66},{"text":"                                iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":60},{"text":"                                    *s = From::from(cidrs);","highlight_start":1,"highlight_end":60},{"text":"                                });","highlight_start":1,"highlight_end":36},{"text":"                                notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":96},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"add\" => {","highlight_start":1,"highlight_end":31},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":64},{"text":"                            let mut cidrs = iface.ip_addrs().to_vec();","highlight_start":1,"highlight_end":71},{"text":"                            for cidr in cur_value {","highlight_start":1,"highlight_end":52},{"text":"                                cidrs.insert(0, *cidr);","highlight_start":1,"highlight_end":56},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":56},{"text":"                                *s = From::from(cidrs);","highlight_start":1,"highlight_end":56},{"text":"                            });","highlight_start":1,"highlight_end":32},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":92},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"rm\" => {","highlight_start":1,"highlight_end":30},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":64},{"text":"                            let mut cidrs = iface.ip_addrs().to_vec();","highlight_start":1,"highlight_end":71},{"text":"                            for cidr in cur_value {","highlight_start":1,"highlight_end":52},{"text":"                                let pre_retain_len = cidrs.len();","highlight_start":1,"highlight_end":66},{"text":"                                cidrs.retain(|&c| c != *cidr);","highlight_start":1,"highlight_end":63},{"text":"                                if pre_retain_len == cidrs.len() {","highlight_start":1,"highlight_end":67},{"text":"                                    return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":84},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":56},{"text":"                                *s = From::from(cidrs);","highlight_start":1,"highlight_end":56},{"text":"                            });","highlight_start":1,"highlight_end":32},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":92},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unnecessary trailing semicolon\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/smolnetd/scheme/netcfg/nodes.rs:227:72\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m227\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m                    $(#[allow(unused_variables)] let $c = $c.clone();)*;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this semicolon\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0msrc/smolnetd/scheme/netcfg/mod.rs:51:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m51\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    cfg_node!{\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m52\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        \"resolv\" => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m53\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            \"nameserver\" => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m54\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                rw [dns_config, notifier] (Option<Ipv4Address>, None)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m272\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m273\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_____-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `cfg_node` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"unnecessary trailing semicolon","code":{"code":"redundant_semicolons","explanation":null},"level":"warning","spans":[{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4817,"byte_end":4818,"line_start":231,"line_end":231,"column_start":72,"column_end":73,"is_primary":true,"text":[{"text":"                    $(#[allow(unused_variables)] let $c = $c.clone();)*;","highlight_start":72,"highlight_end":73}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":6209,"byte_end":6226,"line_start":266,"line_end":266,"column_start":42,"column_end":59,"is_primary":false,"text":[{"text":"            $(children.insert($e.into(), cfg_node!($($t)*));)*","highlight_start":42,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":6209,"byte_end":6226,"line_start":266,"line_end":266,"column_start":42,"column_end":59,"is_primary":false,"text":[{"text":"            $(children.insert($e.into(), cfg_node!($($t)*));)*","highlight_start":42,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/mod.rs","byte_start":1546,"byte_end":11568,"line_start":51,"line_end":273,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    cfg_node!{","highlight_start":5,"highlight_end":15},{"text":"        \"resolv\" => {","highlight_start":1,"highlight_end":22},{"text":"            \"nameserver\" => {","highlight_start":1,"highlight_end":30},{"text":"                rw [dns_config, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":70},{"text":"                || {","highlight_start":1,"highlight_end":21},{"text":"                    format!(\"{}\\n\", dns_config.borrow().name_server)","highlight_start":1,"highlight_end":69},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let ip = Ipv4Address::from_str(line.trim())","highlight_start":1,"highlight_end":68},{"text":"                            .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":79},{"text":"                        if !ip.is_unicast() {","highlight_start":1,"highlight_end":46},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(ip);","highlight_start":1,"highlight_end":47},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(ip) = *cur_value {","highlight_start":1,"highlight_end":51},{"text":"                        dns_config.borrow_mut().name_server = ip;","highlight_start":1,"highlight_end":66},{"text":"                        notifier.borrow_mut().schedule_notify(\"resolv/nameserver\");","highlight_start":1,"highlight_end":84},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    Ok(())","highlight_start":1,"highlight_end":27},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        \"route\" => {","highlight_start":1,"highlight_end":21},{"text":"            \"list\" => {","highlight_start":1,"highlight_end":24},{"text":"                ro [iface] || {","highlight_start":1,"highlight_end":32},{"text":"                    let mut gateway = None;","highlight_start":1,"highlight_end":44},{"text":"                    iface.borrow_mut().routes_mut().update(|map| {","highlight_start":1,"highlight_end":67},{"text":"                        gateway = map.get(&gateway_cidr()).map(|route| route.via_router);","highlight_start":1,"highlight_end":90},{"text":"                    });","highlight_start":1,"highlight_end":24},{"text":"                    if let Some(ip) = gateway {","highlight_start":1,"highlight_end":48},{"text":"                        format!(\"default via {}\\n\", ip)","highlight_start":1,"highlight_end":56},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        String::new()","highlight_start":1,"highlight_end":38},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            \"add\" => {","highlight_start":1,"highlight_end":23},{"text":"                wo [iface, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":65},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let default_gw = parse_default_gw(line)?;","highlight_start":1,"highlight_end":66},{"text":"                        if !default_gw.is_unicast() {","highlight_start":1,"highlight_end":54},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(default_gw);","highlight_start":1,"highlight_end":55},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(default_gw) = *cur_value {","highlight_start":1,"highlight_end":59},{"text":"                        if iface.borrow_mut().routes_mut().add_default_ipv4_route(default_gw).is_err() {","highlight_start":1,"highlight_end":105},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        notifier.borrow_mut().schedule_notify(\"route/list\");","highlight_start":1,"highlight_end":77},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            \"rm\" => {","highlight_start":1,"highlight_end":22},{"text":"                wo [iface, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":65},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let default_gw = parse_default_gw(line)?;","highlight_start":1,"highlight_end":66},{"text":"                        if !default_gw.is_unicast() {","highlight_start":1,"highlight_end":54},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(default_gw);","highlight_start":1,"highlight_end":55},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(default_gw) = *cur_value {","highlight_start":1,"highlight_end":59},{"text":"                        let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":60},{"text":"                        let mut gateway = None;","highlight_start":1,"highlight_end":48},{"text":"                        iface.routes_mut().update(|map| {","highlight_start":1,"highlight_end":58},{"text":"                            gateway = map.get(&gateway_cidr()).map(|route| route.via_router);","highlight_start":1,"highlight_end":94},{"text":"                        });","highlight_start":1,"highlight_end":28},{"text":"                        if gateway != Some(IpAddress::Ipv4(default_gw)) {","highlight_start":1,"highlight_end":74},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        iface.routes_mut().update(|map| {","highlight_start":1,"highlight_end":58},{"text":"                            map.remove(&gateway_cidr());","highlight_start":1,"highlight_end":57},{"text":"                        });","highlight_start":1,"highlight_end":28},{"text":"                        notifier.borrow_mut().schedule_notify(\"route/list\");","highlight_start":1,"highlight_end":77},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        \"ifaces\" => {","highlight_start":1,"highlight_end":22},{"text":"            \"eth0\" => {","highlight_start":1,"highlight_end":24},{"text":"                \"mac\" => {","highlight_start":1,"highlight_end":27},{"text":"                    rw [iface, notifier] (Option<EthernetAddress>, None)","highlight_start":1,"highlight_end":73},{"text":"                    || {","highlight_start":1,"highlight_end":25},{"text":"                        format!(\"{}\\n\", iface.borrow().ethernet_addr())","highlight_start":1,"highlight_end":72},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    |cur_value, line| {","highlight_start":1,"highlight_end":40},{"text":"                        if cur_value.is_none() {","highlight_start":1,"highlight_end":49},{"text":"                            let mac = EthernetAddress::from_str(line).","highlight_start":1,"highlight_end":71},{"text":"                                map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":82},{"text":"                            if !mac.is_unicast() {","highlight_start":1,"highlight_end":51},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            *cur_value = Some(mac);","highlight_start":1,"highlight_end":52},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        } else {","highlight_start":1,"highlight_end":33},{"text":"                            Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":68},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    |cur_value| {","highlight_start":1,"highlight_end":34},{"text":"                        if let Some(mac) = *cur_value {","highlight_start":1,"highlight_end":56},{"text":"                            iface.borrow_mut().set_ethernet_addr(mac);","highlight_start":1,"highlight_end":71},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/mac\");","highlight_start":1,"highlight_end":86},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"                \"addr\" => {","highlight_start":1,"highlight_end":28},{"text":"                    \"list\" => {","highlight_start":1,"highlight_end":32},{"text":"                        ro [iface]","highlight_start":1,"highlight_end":35},{"text":"                        || {","highlight_start":1,"highlight_end":29},{"text":"                            let mut ips = String::new();","highlight_start":1,"highlight_end":57},{"text":"                            for cidr in iface.borrow().ip_addrs() {","highlight_start":1,"highlight_end":68},{"text":"                                ips += &format!(\"{}\\n\", cidr);","highlight_start":1,"highlight_end":63},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            ips","highlight_start":1,"highlight_end":32},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"set\" => {","highlight_start":1,"highlight_end":31},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            if !cur_value.is_empty() {","highlight_start":1,"highlight_end":55},{"text":"                                let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":68},{"text":"                                let mut cidrs = vec![];","highlight_start":1,"highlight_end":56},{"text":"                                mem::swap(cur_value, &mut cidrs);","highlight_start":1,"highlight_end":66},{"text":"                                iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":60},{"text":"                                    *s = From::from(cidrs);","highlight_start":1,"highlight_end":60},{"text":"                                });","highlight_start":1,"highlight_end":36},{"text":"                                notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":96},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"add\" => {","highlight_start":1,"highlight_end":31},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":64},{"text":"                            let mut cidrs = iface.ip_addrs().to_vec();","highlight_start":1,"highlight_end":71},{"text":"                            for cidr in cur_value {","highlight_start":1,"highlight_end":52},{"text":"                                cidrs.insert(0, *cidr);","highlight_start":1,"highlight_end":56},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":56},{"text":"                                *s = From::from(cidrs);","highlight_start":1,"highlight_end":56},{"text":"                            });","highlight_start":1,"highlight_end":32},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":92},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"rm\" => {","highlight_start":1,"highlight_end":30},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":64},{"text":"                            let mut cidrs = iface.ip_addrs().to_vec();","highlight_start":1,"highlight_end":71},{"text":"                            for cidr in cur_value {","highlight_start":1,"highlight_end":52},{"text":"                                let pre_retain_len = cidrs.len();","highlight_start":1,"highlight_end":66},{"text":"                                cidrs.retain(|&c| c != *cidr);","highlight_start":1,"highlight_end":63},{"text":"                                if pre_retain_len == cidrs.len() {","highlight_start":1,"highlight_end":67},{"text":"                                    return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":84},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":56},{"text":"                                *s = From::from(cidrs);","highlight_start":1,"highlight_end":56},{"text":"                            });","highlight_start":1,"highlight_end":32},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":92},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"remove this semicolon","code":null,"level":"help","spans":[{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4817,"byte_end":4818,"line_start":231,"line_end":231,"column_start":72,"column_end":73,"is_primary":true,"text":[{"text":"                    $(#[allow(unused_variables)] let $c = $c.clone();)*;","highlight_start":72,"highlight_end":73}],"label":null,"suggested_replacement":"","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":6209,"byte_end":6226,"line_start":266,"line_end":266,"column_start":42,"column_end":59,"is_primary":false,"text":[{"text":"            $(children.insert($e.into(), cfg_node!($($t)*));)*","highlight_start":42,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":6209,"byte_end":6226,"line_start":266,"line_end":266,"column_start":42,"column_end":59,"is_primary":false,"text":[{"text":"            $(children.insert($e.into(), cfg_node!($($t)*));)*","highlight_start":42,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/mod.rs","byte_start":1546,"byte_end":11568,"line_start":51,"line_end":273,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    cfg_node!{","highlight_start":5,"highlight_end":15},{"text":"        \"resolv\" => {","highlight_start":1,"highlight_end":22},{"text":"            \"nameserver\" => {","highlight_start":1,"highlight_end":30},{"text":"                rw [dns_config, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":70},{"text":"                || {","highlight_start":1,"highlight_end":21},{"text":"                    format!(\"{}\\n\", dns_config.borrow().name_server)","highlight_start":1,"highlight_end":69},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let ip = Ipv4Address::from_str(line.trim())","highlight_start":1,"highlight_end":68},{"text":"                            .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":79},{"text":"                        if !ip.is_unicast() {","highlight_start":1,"highlight_end":46},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(ip);","highlight_start":1,"highlight_end":47},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(ip) = *cur_value {","highlight_start":1,"highlight_end":51},{"text":"                        dns_config.borrow_mut().name_server = ip;","highlight_start":1,"highlight_end":66},{"text":"                        notifier.borrow_mut().schedule_notify(\"resolv/nameserver\");","highlight_start":1,"highlight_end":84},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    Ok(())","highlight_start":1,"highlight_end":27},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        \"route\" => {","highlight_start":1,"highlight_end":21},{"text":"            \"list\" => {","highlight_start":1,"highlight_end":24},{"text":"                ro [iface] || {","highlight_start":1,"highlight_end":32},{"text":"                    let mut gateway = None;","highlight_start":1,"highlight_end":44},{"text":"                    iface.borrow_mut().routes_mut().update(|map| {","highlight_start":1,"highlight_end":67},{"text":"                        gateway = map.get(&gateway_cidr()).map(|route| route.via_router);","highlight_start":1,"highlight_end":90},{"text":"                    });","highlight_start":1,"highlight_end":24},{"text":"                    if let Some(ip) = gateway {","highlight_start":1,"highlight_end":48},{"text":"                        format!(\"default via {}\\n\", ip)","highlight_start":1,"highlight_end":56},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        String::new()","highlight_start":1,"highlight_end":38},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            \"add\" => {","highlight_start":1,"highlight_end":23},{"text":"                wo [iface, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":65},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let default_gw = parse_default_gw(line)?;","highlight_start":1,"highlight_end":66},{"text":"                        if !default_gw.is_unicast() {","highlight_start":1,"highlight_end":54},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(default_gw);","highlight_start":1,"highlight_end":55},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(default_gw) = *cur_value {","highlight_start":1,"highlight_end":59},{"text":"                        if iface.borrow_mut().routes_mut().add_default_ipv4_route(default_gw).is_err() {","highlight_start":1,"highlight_end":105},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        notifier.borrow_mut().schedule_notify(\"route/list\");","highlight_start":1,"highlight_end":77},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            \"rm\" => {","highlight_start":1,"highlight_end":22},{"text":"                wo [iface, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":65},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let default_gw = parse_default_gw(line)?;","highlight_start":1,"highlight_end":66},{"text":"                        if !default_gw.is_unicast() {","highlight_start":1,"highlight_end":54},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(default_gw);","highlight_start":1,"highlight_end":55},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(default_gw) = *cur_value {","highlight_start":1,"highlight_end":59},{"text":"                        let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":60},{"text":"                        let mut gateway = None;","highlight_start":1,"highlight_end":48},{"text":"                        iface.routes_mut().update(|map| {","highlight_start":1,"highlight_end":58},{"text":"                            gateway = map.get(&gateway_cidr()).map(|route| route.via_router);","highlight_start":1,"highlight_end":94},{"text":"                        });","highlight_start":1,"highlight_end":28},{"text":"                        if gateway != Some(IpAddress::Ipv4(default_gw)) {","highlight_start":1,"highlight_end":74},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        iface.routes_mut().update(|map| {","highlight_start":1,"highlight_end":58},{"text":"                            map.remove(&gateway_cidr());","highlight_start":1,"highlight_end":57},{"text":"                        });","highlight_start":1,"highlight_end":28},{"text":"                        notifier.borrow_mut().schedule_notify(\"route/list\");","highlight_start":1,"highlight_end":77},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        \"ifaces\" => {","highlight_start":1,"highlight_end":22},{"text":"            \"eth0\" => {","highlight_start":1,"highlight_end":24},{"text":"                \"mac\" => {","highlight_start":1,"highlight_end":27},{"text":"                    rw [iface, notifier] (Option<EthernetAddress>, None)","highlight_start":1,"highlight_end":73},{"text":"                    || {","highlight_start":1,"highlight_end":25},{"text":"                        format!(\"{}\\n\", iface.borrow().ethernet_addr())","highlight_start":1,"highlight_end":72},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    |cur_value, line| {","highlight_start":1,"highlight_end":40},{"text":"                        if cur_value.is_none() {","highlight_start":1,"highlight_end":49},{"text":"                            let mac = EthernetAddress::from_str(line).","highlight_start":1,"highlight_end":71},{"text":"                                map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":82},{"text":"                            if !mac.is_unicast() {","highlight_start":1,"highlight_end":51},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            *cur_value = Some(mac);","highlight_start":1,"highlight_end":52},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        } else {","highlight_start":1,"highlight_end":33},{"text":"                            Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":68},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    |cur_value| {","highlight_start":1,"highlight_end":34},{"text":"                        if let Some(mac) = *cur_value {","highlight_start":1,"highlight_end":56},{"text":"                            iface.borrow_mut().set_ethernet_addr(mac);","highlight_start":1,"highlight_end":71},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/mac\");","highlight_start":1,"highlight_end":86},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"                \"addr\" => {","highlight_start":1,"highlight_end":28},{"text":"                    \"list\" => {","highlight_start":1,"highlight_end":32},{"text":"                        ro [iface]","highlight_start":1,"highlight_end":35},{"text":"                        || {","highlight_start":1,"highlight_end":29},{"text":"                            let mut ips = String::new();","highlight_start":1,"highlight_end":57},{"text":"                            for cidr in iface.borrow().ip_addrs() {","highlight_start":1,"highlight_end":68},{"text":"                                ips += &format!(\"{}\\n\", cidr);","highlight_start":1,"highlight_end":63},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            ips","highlight_start":1,"highlight_end":32},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"set\" => {","highlight_start":1,"highlight_end":31},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            if !cur_value.is_empty() {","highlight_start":1,"highlight_end":55},{"text":"                                let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":68},{"text":"                                let mut cidrs = vec![];","highlight_start":1,"highlight_end":56},{"text":"                                mem::swap(cur_value, &mut cidrs);","highlight_start":1,"highlight_end":66},{"text":"                                iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":60},{"text":"                                    *s = From::from(cidrs);","highlight_start":1,"highlight_end":60},{"text":"                                });","highlight_start":1,"highlight_end":36},{"text":"                                notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":96},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"add\" => {","highlight_start":1,"highlight_end":31},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":64},{"text":"                            let mut cidrs = iface.ip_addrs().to_vec();","highlight_start":1,"highlight_end":71},{"text":"                            for cidr in cur_value {","highlight_start":1,"highlight_end":52},{"text":"                                cidrs.insert(0, *cidr);","highlight_start":1,"highlight_end":56},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":56},{"text":"                                *s = From::from(cidrs);","highlight_start":1,"highlight_end":56},{"text":"                            });","highlight_start":1,"highlight_end":32},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":92},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"rm\" => {","highlight_start":1,"highlight_end":30},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":64},{"text":"                            let mut cidrs = iface.ip_addrs().to_vec();","highlight_start":1,"highlight_end":71},{"text":"                            for cidr in cur_value {","highlight_start":1,"highlight_end":52},{"text":"                                let pre_retain_len = cidrs.len();","highlight_start":1,"highlight_end":66},{"text":"                                cidrs.retain(|&c| c != *cidr);","highlight_start":1,"highlight_end":63},{"text":"                                if pre_retain_len == cidrs.len() {","highlight_start":1,"highlight_end":67},{"text":"                                    return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":84},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":56},{"text":"                                *s = From::from(cidrs);","highlight_start":1,"highlight_end":56},{"text":"                            });","highlight_start":1,"highlight_end":32},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":92},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unnecessary trailing semicolon\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/smolnetd/scheme/netcfg/nodes.rs:231:72\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m231\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m                    $(#[allow(unused_variables)] let $c = $c.clone();)*;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this semicolon\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0msrc/smolnetd/scheme/netcfg/mod.rs:51:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m51\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    cfg_node!{\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m52\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        \"resolv\" => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m53\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            \"nameserver\" => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m54\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                rw [dns_config, notifier] (Option<Ipv4Address>, None)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m272\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m273\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_____-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `cfg_node` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"unnecessary trailing semicolon","code":{"code":"redundant_semicolons","explanation":null},"level":"warning","spans":[{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":5443,"byte_end":5444,"line_start":247,"line_end":247,"column_start":64,"column_end":65,"is_primary":true,"text":[{"text":"            $(#[allow(unused_variables)] let $c = $c.clone();)*;","highlight_start":64,"highlight_end":65}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":6209,"byte_end":6226,"line_start":266,"line_end":266,"column_start":42,"column_end":59,"is_primary":false,"text":[{"text":"            $(children.insert($e.into(), cfg_node!($($t)*));)*","highlight_start":42,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":6209,"byte_end":6226,"line_start":266,"line_end":266,"column_start":42,"column_end":59,"is_primary":false,"text":[{"text":"            $(children.insert($e.into(), cfg_node!($($t)*));)*","highlight_start":42,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/mod.rs","byte_start":1546,"byte_end":11568,"line_start":51,"line_end":273,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    cfg_node!{","highlight_start":5,"highlight_end":15},{"text":"        \"resolv\" => {","highlight_start":1,"highlight_end":22},{"text":"            \"nameserver\" => {","highlight_start":1,"highlight_end":30},{"text":"                rw [dns_config, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":70},{"text":"                || {","highlight_start":1,"highlight_end":21},{"text":"                    format!(\"{}\\n\", dns_config.borrow().name_server)","highlight_start":1,"highlight_end":69},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let ip = Ipv4Address::from_str(line.trim())","highlight_start":1,"highlight_end":68},{"text":"                            .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":79},{"text":"                        if !ip.is_unicast() {","highlight_start":1,"highlight_end":46},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(ip);","highlight_start":1,"highlight_end":47},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(ip) = *cur_value {","highlight_start":1,"highlight_end":51},{"text":"                        dns_config.borrow_mut().name_server = ip;","highlight_start":1,"highlight_end":66},{"text":"                        notifier.borrow_mut().schedule_notify(\"resolv/nameserver\");","highlight_start":1,"highlight_end":84},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    Ok(())","highlight_start":1,"highlight_end":27},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        \"route\" => {","highlight_start":1,"highlight_end":21},{"text":"            \"list\" => {","highlight_start":1,"highlight_end":24},{"text":"                ro [iface] || {","highlight_start":1,"highlight_end":32},{"text":"                    let mut gateway = None;","highlight_start":1,"highlight_end":44},{"text":"                    iface.borrow_mut().routes_mut().update(|map| {","highlight_start":1,"highlight_end":67},{"text":"                        gateway = map.get(&gateway_cidr()).map(|route| route.via_router);","highlight_start":1,"highlight_end":90},{"text":"                    });","highlight_start":1,"highlight_end":24},{"text":"                    if let Some(ip) = gateway {","highlight_start":1,"highlight_end":48},{"text":"                        format!(\"default via {}\\n\", ip)","highlight_start":1,"highlight_end":56},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        String::new()","highlight_start":1,"highlight_end":38},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            \"add\" => {","highlight_start":1,"highlight_end":23},{"text":"                wo [iface, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":65},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let default_gw = parse_default_gw(line)?;","highlight_start":1,"highlight_end":66},{"text":"                        if !default_gw.is_unicast() {","highlight_start":1,"highlight_end":54},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(default_gw);","highlight_start":1,"highlight_end":55},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(default_gw) = *cur_value {","highlight_start":1,"highlight_end":59},{"text":"                        if iface.borrow_mut().routes_mut().add_default_ipv4_route(default_gw).is_err() {","highlight_start":1,"highlight_end":105},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        notifier.borrow_mut().schedule_notify(\"route/list\");","highlight_start":1,"highlight_end":77},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            \"rm\" => {","highlight_start":1,"highlight_end":22},{"text":"                wo [iface, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":65},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let default_gw = parse_default_gw(line)?;","highlight_start":1,"highlight_end":66},{"text":"                        if !default_gw.is_unicast() {","highlight_start":1,"highlight_end":54},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(default_gw);","highlight_start":1,"highlight_end":55},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(default_gw) = *cur_value {","highlight_start":1,"highlight_end":59},{"text":"                        let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":60},{"text":"                        let mut gateway = None;","highlight_start":1,"highlight_end":48},{"text":"                        iface.routes_mut().update(|map| {","highlight_start":1,"highlight_end":58},{"text":"                            gateway = map.get(&gateway_cidr()).map(|route| route.via_router);","highlight_start":1,"highlight_end":94},{"text":"                        });","highlight_start":1,"highlight_end":28},{"text":"                        if gateway != Some(IpAddress::Ipv4(default_gw)) {","highlight_start":1,"highlight_end":74},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        iface.routes_mut().update(|map| {","highlight_start":1,"highlight_end":58},{"text":"                            map.remove(&gateway_cidr());","highlight_start":1,"highlight_end":57},{"text":"                        });","highlight_start":1,"highlight_end":28},{"text":"                        notifier.borrow_mut().schedule_notify(\"route/list\");","highlight_start":1,"highlight_end":77},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        \"ifaces\" => {","highlight_start":1,"highlight_end":22},{"text":"            \"eth0\" => {","highlight_start":1,"highlight_end":24},{"text":"                \"mac\" => {","highlight_start":1,"highlight_end":27},{"text":"                    rw [iface, notifier] (Option<EthernetAddress>, None)","highlight_start":1,"highlight_end":73},{"text":"                    || {","highlight_start":1,"highlight_end":25},{"text":"                        format!(\"{}\\n\", iface.borrow().ethernet_addr())","highlight_start":1,"highlight_end":72},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    |cur_value, line| {","highlight_start":1,"highlight_end":40},{"text":"                        if cur_value.is_none() {","highlight_start":1,"highlight_end":49},{"text":"                            let mac = EthernetAddress::from_str(line).","highlight_start":1,"highlight_end":71},{"text":"                                map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":82},{"text":"                            if !mac.is_unicast() {","highlight_start":1,"highlight_end":51},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            *cur_value = Some(mac);","highlight_start":1,"highlight_end":52},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        } else {","highlight_start":1,"highlight_end":33},{"text":"                            Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":68},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    |cur_value| {","highlight_start":1,"highlight_end":34},{"text":"                        if let Some(mac) = *cur_value {","highlight_start":1,"highlight_end":56},{"text":"                            iface.borrow_mut().set_ethernet_addr(mac);","highlight_start":1,"highlight_end":71},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/mac\");","highlight_start":1,"highlight_end":86},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"                \"addr\" => {","highlight_start":1,"highlight_end":28},{"text":"                    \"list\" => {","highlight_start":1,"highlight_end":32},{"text":"                        ro [iface]","highlight_start":1,"highlight_end":35},{"text":"                        || {","highlight_start":1,"highlight_end":29},{"text":"                            let mut ips = String::new();","highlight_start":1,"highlight_end":57},{"text":"                            for cidr in iface.borrow().ip_addrs() {","highlight_start":1,"highlight_end":68},{"text":"                                ips += &format!(\"{}\\n\", cidr);","highlight_start":1,"highlight_end":63},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            ips","highlight_start":1,"highlight_end":32},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"set\" => {","highlight_start":1,"highlight_end":31},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            if !cur_value.is_empty() {","highlight_start":1,"highlight_end":55},{"text":"                                let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":68},{"text":"                                let mut cidrs = vec![];","highlight_start":1,"highlight_end":56},{"text":"                                mem::swap(cur_value, &mut cidrs);","highlight_start":1,"highlight_end":66},{"text":"                                iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":60},{"text":"                                    *s = From::from(cidrs);","highlight_start":1,"highlight_end":60},{"text":"                                });","highlight_start":1,"highlight_end":36},{"text":"                                notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":96},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"add\" => {","highlight_start":1,"highlight_end":31},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":64},{"text":"                            let mut cidrs = iface.ip_addrs().to_vec();","highlight_start":1,"highlight_end":71},{"text":"                            for cidr in cur_value {","highlight_start":1,"highlight_end":52},{"text":"                                cidrs.insert(0, *cidr);","highlight_start":1,"highlight_end":56},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":56},{"text":"                                *s = From::from(cidrs);","highlight_start":1,"highlight_end":56},{"text":"                            });","highlight_start":1,"highlight_end":32},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":92},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"rm\" => {","highlight_start":1,"highlight_end":30},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":64},{"text":"                            let mut cidrs = iface.ip_addrs().to_vec();","highlight_start":1,"highlight_end":71},{"text":"                            for cidr in cur_value {","highlight_start":1,"highlight_end":52},{"text":"                                let pre_retain_len = cidrs.len();","highlight_start":1,"highlight_end":66},{"text":"                                cidrs.retain(|&c| c != *cidr);","highlight_start":1,"highlight_end":63},{"text":"                                if pre_retain_len == cidrs.len() {","highlight_start":1,"highlight_end":67},{"text":"                                    return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":84},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":56},{"text":"                                *s = From::from(cidrs);","highlight_start":1,"highlight_end":56},{"text":"                            });","highlight_start":1,"highlight_end":32},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":92},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"remove this semicolon","code":null,"level":"help","spans":[{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":5443,"byte_end":5444,"line_start":247,"line_end":247,"column_start":64,"column_end":65,"is_primary":true,"text":[{"text":"            $(#[allow(unused_variables)] let $c = $c.clone();)*;","highlight_start":64,"highlight_end":65}],"label":null,"suggested_replacement":"","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":6209,"byte_end":6226,"line_start":266,"line_end":266,"column_start":42,"column_end":59,"is_primary":false,"text":[{"text":"            $(children.insert($e.into(), cfg_node!($($t)*));)*","highlight_start":42,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":6209,"byte_end":6226,"line_start":266,"line_end":266,"column_start":42,"column_end":59,"is_primary":false,"text":[{"text":"            $(children.insert($e.into(), cfg_node!($($t)*));)*","highlight_start":42,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/mod.rs","byte_start":1546,"byte_end":11568,"line_start":51,"line_end":273,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    cfg_node!{","highlight_start":5,"highlight_end":15},{"text":"        \"resolv\" => {","highlight_start":1,"highlight_end":22},{"text":"            \"nameserver\" => {","highlight_start":1,"highlight_end":30},{"text":"                rw [dns_config, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":70},{"text":"                || {","highlight_start":1,"highlight_end":21},{"text":"                    format!(\"{}\\n\", dns_config.borrow().name_server)","highlight_start":1,"highlight_end":69},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let ip = Ipv4Address::from_str(line.trim())","highlight_start":1,"highlight_end":68},{"text":"                            .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":79},{"text":"                        if !ip.is_unicast() {","highlight_start":1,"highlight_end":46},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(ip);","highlight_start":1,"highlight_end":47},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(ip) = *cur_value {","highlight_start":1,"highlight_end":51},{"text":"                        dns_config.borrow_mut().name_server = ip;","highlight_start":1,"highlight_end":66},{"text":"                        notifier.borrow_mut().schedule_notify(\"resolv/nameserver\");","highlight_start":1,"highlight_end":84},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    Ok(())","highlight_start":1,"highlight_end":27},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        \"route\" => {","highlight_start":1,"highlight_end":21},{"text":"            \"list\" => {","highlight_start":1,"highlight_end":24},{"text":"                ro [iface] || {","highlight_start":1,"highlight_end":32},{"text":"                    let mut gateway = None;","highlight_start":1,"highlight_end":44},{"text":"                    iface.borrow_mut().routes_mut().update(|map| {","highlight_start":1,"highlight_end":67},{"text":"                        gateway = map.get(&gateway_cidr()).map(|route| route.via_router);","highlight_start":1,"highlight_end":90},{"text":"                    });","highlight_start":1,"highlight_end":24},{"text":"                    if let Some(ip) = gateway {","highlight_start":1,"highlight_end":48},{"text":"                        format!(\"default via {}\\n\", ip)","highlight_start":1,"highlight_end":56},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        String::new()","highlight_start":1,"highlight_end":38},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            \"add\" => {","highlight_start":1,"highlight_end":23},{"text":"                wo [iface, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":65},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let default_gw = parse_default_gw(line)?;","highlight_start":1,"highlight_end":66},{"text":"                        if !default_gw.is_unicast() {","highlight_start":1,"highlight_end":54},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(default_gw);","highlight_start":1,"highlight_end":55},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(default_gw) = *cur_value {","highlight_start":1,"highlight_end":59},{"text":"                        if iface.borrow_mut().routes_mut().add_default_ipv4_route(default_gw).is_err() {","highlight_start":1,"highlight_end":105},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        notifier.borrow_mut().schedule_notify(\"route/list\");","highlight_start":1,"highlight_end":77},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            \"rm\" => {","highlight_start":1,"highlight_end":22},{"text":"                wo [iface, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":65},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let default_gw = parse_default_gw(line)?;","highlight_start":1,"highlight_end":66},{"text":"                        if !default_gw.is_unicast() {","highlight_start":1,"highlight_end":54},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(default_gw);","highlight_start":1,"highlight_end":55},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(default_gw) = *cur_value {","highlight_start":1,"highlight_end":59},{"text":"                        let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":60},{"text":"                        let mut gateway = None;","highlight_start":1,"highlight_end":48},{"text":"                        iface.routes_mut().update(|map| {","highlight_start":1,"highlight_end":58},{"text":"                            gateway = map.get(&gateway_cidr()).map(|route| route.via_router);","highlight_start":1,"highlight_end":94},{"text":"                        });","highlight_start":1,"highlight_end":28},{"text":"                        if gateway != Some(IpAddress::Ipv4(default_gw)) {","highlight_start":1,"highlight_end":74},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        iface.routes_mut().update(|map| {","highlight_start":1,"highlight_end":58},{"text":"                            map.remove(&gateway_cidr());","highlight_start":1,"highlight_end":57},{"text":"                        });","highlight_start":1,"highlight_end":28},{"text":"                        notifier.borrow_mut().schedule_notify(\"route/list\");","highlight_start":1,"highlight_end":77},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        \"ifaces\" => {","highlight_start":1,"highlight_end":22},{"text":"            \"eth0\" => {","highlight_start":1,"highlight_end":24},{"text":"                \"mac\" => {","highlight_start":1,"highlight_end":27},{"text":"                    rw [iface, notifier] (Option<EthernetAddress>, None)","highlight_start":1,"highlight_end":73},{"text":"                    || {","highlight_start":1,"highlight_end":25},{"text":"                        format!(\"{}\\n\", iface.borrow().ethernet_addr())","highlight_start":1,"highlight_end":72},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    |cur_value, line| {","highlight_start":1,"highlight_end":40},{"text":"                        if cur_value.is_none() {","highlight_start":1,"highlight_end":49},{"text":"                            let mac = EthernetAddress::from_str(line).","highlight_start":1,"highlight_end":71},{"text":"                                map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":82},{"text":"                            if !mac.is_unicast() {","highlight_start":1,"highlight_end":51},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            *cur_value = Some(mac);","highlight_start":1,"highlight_end":52},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        } else {","highlight_start":1,"highlight_end":33},{"text":"                            Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":68},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    |cur_value| {","highlight_start":1,"highlight_end":34},{"text":"                        if let Some(mac) = *cur_value {","highlight_start":1,"highlight_end":56},{"text":"                            iface.borrow_mut().set_ethernet_addr(mac);","highlight_start":1,"highlight_end":71},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/mac\");","highlight_start":1,"highlight_end":86},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"                \"addr\" => {","highlight_start":1,"highlight_end":28},{"text":"                    \"list\" => {","highlight_start":1,"highlight_end":32},{"text":"                        ro [iface]","highlight_start":1,"highlight_end":35},{"text":"                        || {","highlight_start":1,"highlight_end":29},{"text":"                            let mut ips = String::new();","highlight_start":1,"highlight_end":57},{"text":"                            for cidr in iface.borrow().ip_addrs() {","highlight_start":1,"highlight_end":68},{"text":"                                ips += &format!(\"{}\\n\", cidr);","highlight_start":1,"highlight_end":63},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            ips","highlight_start":1,"highlight_end":32},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"set\" => {","highlight_start":1,"highlight_end":31},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            if !cur_value.is_empty() {","highlight_start":1,"highlight_end":55},{"text":"                                let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":68},{"text":"                                let mut cidrs = vec![];","highlight_start":1,"highlight_end":56},{"text":"                                mem::swap(cur_value, &mut cidrs);","highlight_start":1,"highlight_end":66},{"text":"                                iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":60},{"text":"                                    *s = From::from(cidrs);","highlight_start":1,"highlight_end":60},{"text":"                                });","highlight_start":1,"highlight_end":36},{"text":"                                notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":96},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"add\" => {","highlight_start":1,"highlight_end":31},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":64},{"text":"                            let mut cidrs = iface.ip_addrs().to_vec();","highlight_start":1,"highlight_end":71},{"text":"                            for cidr in cur_value {","highlight_start":1,"highlight_end":52},{"text":"                                cidrs.insert(0, *cidr);","highlight_start":1,"highlight_end":56},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":56},{"text":"                                *s = From::from(cidrs);","highlight_start":1,"highlight_end":56},{"text":"                            });","highlight_start":1,"highlight_end":32},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":92},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"rm\" => {","highlight_start":1,"highlight_end":30},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":64},{"text":"                            let mut cidrs = iface.ip_addrs().to_vec();","highlight_start":1,"highlight_end":71},{"text":"                            for cidr in cur_value {","highlight_start":1,"highlight_end":52},{"text":"                                let pre_retain_len = cidrs.len();","highlight_start":1,"highlight_end":66},{"text":"                                cidrs.retain(|&c| c != *cidr);","highlight_start":1,"highlight_end":63},{"text":"                                if pre_retain_len == cidrs.len() {","highlight_start":1,"highlight_end":67},{"text":"                                    return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":84},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":56},{"text":"                                *s = From::from(cidrs);","highlight_start":1,"highlight_end":56},{"text":"                            });","highlight_start":1,"highlight_end":32},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":92},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unnecessary trailing semicolon\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/smolnetd/scheme/netcfg/nodes.rs:247:64\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m247\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m            $(#[allow(unused_variables)] let $c = $c.clone();)*;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this semicolon\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0msrc/smolnetd/scheme/netcfg/mod.rs:51:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m51\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    cfg_node!{\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m52\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        \"resolv\" => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m53\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            \"nameserver\" => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m54\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                rw [dns_config, notifier] (Option<Ipv4Address>, None)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m272\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m273\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_____-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `cfg_node` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"unnecessary trailing semicolon","code":{"code":"redundant_semicolons","explanation":null},"level":"warning","spans":[{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":5329,"byte_end":5330,"line_start":244,"line_end":244,"column_start":68,"column_end":69,"is_primary":true,"text":[{"text":"                $(#[allow(unused_variables)] let $c = $c.clone();)*;","highlight_start":68,"highlight_end":69}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":6209,"byte_end":6226,"line_start":266,"line_end":266,"column_start":42,"column_end":59,"is_primary":false,"text":[{"text":"            $(children.insert($e.into(), cfg_node!($($t)*));)*","highlight_start":42,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":6209,"byte_end":6226,"line_start":266,"line_end":266,"column_start":42,"column_end":59,"is_primary":false,"text":[{"text":"            $(children.insert($e.into(), cfg_node!($($t)*));)*","highlight_start":42,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/mod.rs","byte_start":1546,"byte_end":11568,"line_start":51,"line_end":273,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    cfg_node!{","highlight_start":5,"highlight_end":15},{"text":"        \"resolv\" => {","highlight_start":1,"highlight_end":22},{"text":"            \"nameserver\" => {","highlight_start":1,"highlight_end":30},{"text":"                rw [dns_config, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":70},{"text":"                || {","highlight_start":1,"highlight_end":21},{"text":"                    format!(\"{}\\n\", dns_config.borrow().name_server)","highlight_start":1,"highlight_end":69},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let ip = Ipv4Address::from_str(line.trim())","highlight_start":1,"highlight_end":68},{"text":"                            .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":79},{"text":"                        if !ip.is_unicast() {","highlight_start":1,"highlight_end":46},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(ip);","highlight_start":1,"highlight_end":47},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(ip) = *cur_value {","highlight_start":1,"highlight_end":51},{"text":"                        dns_config.borrow_mut().name_server = ip;","highlight_start":1,"highlight_end":66},{"text":"                        notifier.borrow_mut().schedule_notify(\"resolv/nameserver\");","highlight_start":1,"highlight_end":84},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    Ok(())","highlight_start":1,"highlight_end":27},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        \"route\" => {","highlight_start":1,"highlight_end":21},{"text":"            \"list\" => {","highlight_start":1,"highlight_end":24},{"text":"                ro [iface] || {","highlight_start":1,"highlight_end":32},{"text":"                    let mut gateway = None;","highlight_start":1,"highlight_end":44},{"text":"                    iface.borrow_mut().routes_mut().update(|map| {","highlight_start":1,"highlight_end":67},{"text":"                        gateway = map.get(&gateway_cidr()).map(|route| route.via_router);","highlight_start":1,"highlight_end":90},{"text":"                    });","highlight_start":1,"highlight_end":24},{"text":"                    if let Some(ip) = gateway {","highlight_start":1,"highlight_end":48},{"text":"                        format!(\"default via {}\\n\", ip)","highlight_start":1,"highlight_end":56},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        String::new()","highlight_start":1,"highlight_end":38},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            \"add\" => {","highlight_start":1,"highlight_end":23},{"text":"                wo [iface, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":65},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let default_gw = parse_default_gw(line)?;","highlight_start":1,"highlight_end":66},{"text":"                        if !default_gw.is_unicast() {","highlight_start":1,"highlight_end":54},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(default_gw);","highlight_start":1,"highlight_end":55},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(default_gw) = *cur_value {","highlight_start":1,"highlight_end":59},{"text":"                        if iface.borrow_mut().routes_mut().add_default_ipv4_route(default_gw).is_err() {","highlight_start":1,"highlight_end":105},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        notifier.borrow_mut().schedule_notify(\"route/list\");","highlight_start":1,"highlight_end":77},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            \"rm\" => {","highlight_start":1,"highlight_end":22},{"text":"                wo [iface, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":65},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let default_gw = parse_default_gw(line)?;","highlight_start":1,"highlight_end":66},{"text":"                        if !default_gw.is_unicast() {","highlight_start":1,"highlight_end":54},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(default_gw);","highlight_start":1,"highlight_end":55},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(default_gw) = *cur_value {","highlight_start":1,"highlight_end":59},{"text":"                        let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":60},{"text":"                        let mut gateway = None;","highlight_start":1,"highlight_end":48},{"text":"                        iface.routes_mut().update(|map| {","highlight_start":1,"highlight_end":58},{"text":"                            gateway = map.get(&gateway_cidr()).map(|route| route.via_router);","highlight_start":1,"highlight_end":94},{"text":"                        });","highlight_start":1,"highlight_end":28},{"text":"                        if gateway != Some(IpAddress::Ipv4(default_gw)) {","highlight_start":1,"highlight_end":74},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        iface.routes_mut().update(|map| {","highlight_start":1,"highlight_end":58},{"text":"                            map.remove(&gateway_cidr());","highlight_start":1,"highlight_end":57},{"text":"                        });","highlight_start":1,"highlight_end":28},{"text":"                        notifier.borrow_mut().schedule_notify(\"route/list\");","highlight_start":1,"highlight_end":77},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        \"ifaces\" => {","highlight_start":1,"highlight_end":22},{"text":"            \"eth0\" => {","highlight_start":1,"highlight_end":24},{"text":"                \"mac\" => {","highlight_start":1,"highlight_end":27},{"text":"                    rw [iface, notifier] (Option<EthernetAddress>, None)","highlight_start":1,"highlight_end":73},{"text":"                    || {","highlight_start":1,"highlight_end":25},{"text":"                        format!(\"{}\\n\", iface.borrow().ethernet_addr())","highlight_start":1,"highlight_end":72},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    |cur_value, line| {","highlight_start":1,"highlight_end":40},{"text":"                        if cur_value.is_none() {","highlight_start":1,"highlight_end":49},{"text":"                            let mac = EthernetAddress::from_str(line).","highlight_start":1,"highlight_end":71},{"text":"                                map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":82},{"text":"                            if !mac.is_unicast() {","highlight_start":1,"highlight_end":51},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            *cur_value = Some(mac);","highlight_start":1,"highlight_end":52},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        } else {","highlight_start":1,"highlight_end":33},{"text":"                            Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":68},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    |cur_value| {","highlight_start":1,"highlight_end":34},{"text":"                        if let Some(mac) = *cur_value {","highlight_start":1,"highlight_end":56},{"text":"                            iface.borrow_mut().set_ethernet_addr(mac);","highlight_start":1,"highlight_end":71},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/mac\");","highlight_start":1,"highlight_end":86},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"                \"addr\" => {","highlight_start":1,"highlight_end":28},{"text":"                    \"list\" => {","highlight_start":1,"highlight_end":32},{"text":"                        ro [iface]","highlight_start":1,"highlight_end":35},{"text":"                        || {","highlight_start":1,"highlight_end":29},{"text":"                            let mut ips = String::new();","highlight_start":1,"highlight_end":57},{"text":"                            for cidr in iface.borrow().ip_addrs() {","highlight_start":1,"highlight_end":68},{"text":"                                ips += &format!(\"{}\\n\", cidr);","highlight_start":1,"highlight_end":63},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            ips","highlight_start":1,"highlight_end":32},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"set\" => {","highlight_start":1,"highlight_end":31},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            if !cur_value.is_empty() {","highlight_start":1,"highlight_end":55},{"text":"                                let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":68},{"text":"                                let mut cidrs = vec![];","highlight_start":1,"highlight_end":56},{"text":"                                mem::swap(cur_value, &mut cidrs);","highlight_start":1,"highlight_end":66},{"text":"                                iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":60},{"text":"                                    *s = From::from(cidrs);","highlight_start":1,"highlight_end":60},{"text":"                                });","highlight_start":1,"highlight_end":36},{"text":"                                notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":96},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"add\" => {","highlight_start":1,"highlight_end":31},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":64},{"text":"                            let mut cidrs = iface.ip_addrs().to_vec();","highlight_start":1,"highlight_end":71},{"text":"                            for cidr in cur_value {","highlight_start":1,"highlight_end":52},{"text":"                                cidrs.insert(0, *cidr);","highlight_start":1,"highlight_end":56},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":56},{"text":"                                *s = From::from(cidrs);","highlight_start":1,"highlight_end":56},{"text":"                            });","highlight_start":1,"highlight_end":32},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":92},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"rm\" => {","highlight_start":1,"highlight_end":30},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":64},{"text":"                            let mut cidrs = iface.ip_addrs().to_vec();","highlight_start":1,"highlight_end":71},{"text":"                            for cidr in cur_value {","highlight_start":1,"highlight_end":52},{"text":"                                let pre_retain_len = cidrs.len();","highlight_start":1,"highlight_end":66},{"text":"                                cidrs.retain(|&c| c != *cidr);","highlight_start":1,"highlight_end":63},{"text":"                                if pre_retain_len == cidrs.len() {","highlight_start":1,"highlight_end":67},{"text":"                                    return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":84},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":56},{"text":"                                *s = From::from(cidrs);","highlight_start":1,"highlight_end":56},{"text":"                            });","highlight_start":1,"highlight_end":32},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":92},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"remove this semicolon","code":null,"level":"help","spans":[{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":5329,"byte_end":5330,"line_start":244,"line_end":244,"column_start":68,"column_end":69,"is_primary":true,"text":[{"text":"                $(#[allow(unused_variables)] let $c = $c.clone();)*;","highlight_start":68,"highlight_end":69}],"label":null,"suggested_replacement":"","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":6209,"byte_end":6226,"line_start":266,"line_end":266,"column_start":42,"column_end":59,"is_primary":false,"text":[{"text":"            $(children.insert($e.into(), cfg_node!($($t)*));)*","highlight_start":42,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":6209,"byte_end":6226,"line_start":266,"line_end":266,"column_start":42,"column_end":59,"is_primary":false,"text":[{"text":"            $(children.insert($e.into(), cfg_node!($($t)*));)*","highlight_start":42,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/mod.rs","byte_start":1546,"byte_end":11568,"line_start":51,"line_end":273,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    cfg_node!{","highlight_start":5,"highlight_end":15},{"text":"        \"resolv\" => {","highlight_start":1,"highlight_end":22},{"text":"            \"nameserver\" => {","highlight_start":1,"highlight_end":30},{"text":"                rw [dns_config, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":70},{"text":"                || {","highlight_start":1,"highlight_end":21},{"text":"                    format!(\"{}\\n\", dns_config.borrow().name_server)","highlight_start":1,"highlight_end":69},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let ip = Ipv4Address::from_str(line.trim())","highlight_start":1,"highlight_end":68},{"text":"                            .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":79},{"text":"                        if !ip.is_unicast() {","highlight_start":1,"highlight_end":46},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(ip);","highlight_start":1,"highlight_end":47},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(ip) = *cur_value {","highlight_start":1,"highlight_end":51},{"text":"                        dns_config.borrow_mut().name_server = ip;","highlight_start":1,"highlight_end":66},{"text":"                        notifier.borrow_mut().schedule_notify(\"resolv/nameserver\");","highlight_start":1,"highlight_end":84},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    Ok(())","highlight_start":1,"highlight_end":27},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        \"route\" => {","highlight_start":1,"highlight_end":21},{"text":"            \"list\" => {","highlight_start":1,"highlight_end":24},{"text":"                ro [iface] || {","highlight_start":1,"highlight_end":32},{"text":"                    let mut gateway = None;","highlight_start":1,"highlight_end":44},{"text":"                    iface.borrow_mut().routes_mut().update(|map| {","highlight_start":1,"highlight_end":67},{"text":"                        gateway = map.get(&gateway_cidr()).map(|route| route.via_router);","highlight_start":1,"highlight_end":90},{"text":"                    });","highlight_start":1,"highlight_end":24},{"text":"                    if let Some(ip) = gateway {","highlight_start":1,"highlight_end":48},{"text":"                        format!(\"default via {}\\n\", ip)","highlight_start":1,"highlight_end":56},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        String::new()","highlight_start":1,"highlight_end":38},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            \"add\" => {","highlight_start":1,"highlight_end":23},{"text":"                wo [iface, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":65},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let default_gw = parse_default_gw(line)?;","highlight_start":1,"highlight_end":66},{"text":"                        if !default_gw.is_unicast() {","highlight_start":1,"highlight_end":54},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(default_gw);","highlight_start":1,"highlight_end":55},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(default_gw) = *cur_value {","highlight_start":1,"highlight_end":59},{"text":"                        if iface.borrow_mut().routes_mut().add_default_ipv4_route(default_gw).is_err() {","highlight_start":1,"highlight_end":105},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        notifier.borrow_mut().schedule_notify(\"route/list\");","highlight_start":1,"highlight_end":77},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            \"rm\" => {","highlight_start":1,"highlight_end":22},{"text":"                wo [iface, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":65},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let default_gw = parse_default_gw(line)?;","highlight_start":1,"highlight_end":66},{"text":"                        if !default_gw.is_unicast() {","highlight_start":1,"highlight_end":54},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(default_gw);","highlight_start":1,"highlight_end":55},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(default_gw) = *cur_value {","highlight_start":1,"highlight_end":59},{"text":"                        let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":60},{"text":"                        let mut gateway = None;","highlight_start":1,"highlight_end":48},{"text":"                        iface.routes_mut().update(|map| {","highlight_start":1,"highlight_end":58},{"text":"                            gateway = map.get(&gateway_cidr()).map(|route| route.via_router);","highlight_start":1,"highlight_end":94},{"text":"                        });","highlight_start":1,"highlight_end":28},{"text":"                        if gateway != Some(IpAddress::Ipv4(default_gw)) {","highlight_start":1,"highlight_end":74},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        iface.routes_mut().update(|map| {","highlight_start":1,"highlight_end":58},{"text":"                            map.remove(&gateway_cidr());","highlight_start":1,"highlight_end":57},{"text":"                        });","highlight_start":1,"highlight_end":28},{"text":"                        notifier.borrow_mut().schedule_notify(\"route/list\");","highlight_start":1,"highlight_end":77},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        \"ifaces\" => {","highlight_start":1,"highlight_end":22},{"text":"            \"eth0\" => {","highlight_start":1,"highlight_end":24},{"text":"                \"mac\" => {","highlight_start":1,"highlight_end":27},{"text":"                    rw [iface, notifier] (Option<EthernetAddress>, None)","highlight_start":1,"highlight_end":73},{"text":"                    || {","highlight_start":1,"highlight_end":25},{"text":"                        format!(\"{}\\n\", iface.borrow().ethernet_addr())","highlight_start":1,"highlight_end":72},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    |cur_value, line| {","highlight_start":1,"highlight_end":40},{"text":"                        if cur_value.is_none() {","highlight_start":1,"highlight_end":49},{"text":"                            let mac = EthernetAddress::from_str(line).","highlight_start":1,"highlight_end":71},{"text":"                                map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":82},{"text":"                            if !mac.is_unicast() {","highlight_start":1,"highlight_end":51},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            *cur_value = Some(mac);","highlight_start":1,"highlight_end":52},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        } else {","highlight_start":1,"highlight_end":33},{"text":"                            Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":68},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    |cur_value| {","highlight_start":1,"highlight_end":34},{"text":"                        if let Some(mac) = *cur_value {","highlight_start":1,"highlight_end":56},{"text":"                            iface.borrow_mut().set_ethernet_addr(mac);","highlight_start":1,"highlight_end":71},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/mac\");","highlight_start":1,"highlight_end":86},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"                \"addr\" => {","highlight_start":1,"highlight_end":28},{"text":"                    \"list\" => {","highlight_start":1,"highlight_end":32},{"text":"                        ro [iface]","highlight_start":1,"highlight_end":35},{"text":"                        || {","highlight_start":1,"highlight_end":29},{"text":"                            let mut ips = String::new();","highlight_start":1,"highlight_end":57},{"text":"                            for cidr in iface.borrow().ip_addrs() {","highlight_start":1,"highlight_end":68},{"text":"                                ips += &format!(\"{}\\n\", cidr);","highlight_start":1,"highlight_end":63},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            ips","highlight_start":1,"highlight_end":32},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"set\" => {","highlight_start":1,"highlight_end":31},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            if !cur_value.is_empty() {","highlight_start":1,"highlight_end":55},{"text":"                                let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":68},{"text":"                                let mut cidrs = vec![];","highlight_start":1,"highlight_end":56},{"text":"                                mem::swap(cur_value, &mut cidrs);","highlight_start":1,"highlight_end":66},{"text":"                                iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":60},{"text":"                                    *s = From::from(cidrs);","highlight_start":1,"highlight_end":60},{"text":"                                });","highlight_start":1,"highlight_end":36},{"text":"                                notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":96},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"add\" => {","highlight_start":1,"highlight_end":31},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":64},{"text":"                            let mut cidrs = iface.ip_addrs().to_vec();","highlight_start":1,"highlight_end":71},{"text":"                            for cidr in cur_value {","highlight_start":1,"highlight_end":52},{"text":"                                cidrs.insert(0, *cidr);","highlight_start":1,"highlight_end":56},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":56},{"text":"                                *s = From::from(cidrs);","highlight_start":1,"highlight_end":56},{"text":"                            });","highlight_start":1,"highlight_end":32},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":92},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"rm\" => {","highlight_start":1,"highlight_end":30},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":64},{"text":"                            let mut cidrs = iface.ip_addrs().to_vec();","highlight_start":1,"highlight_end":71},{"text":"                            for cidr in cur_value {","highlight_start":1,"highlight_end":52},{"text":"                                let pre_retain_len = cidrs.len();","highlight_start":1,"highlight_end":66},{"text":"                                cidrs.retain(|&c| c != *cidr);","highlight_start":1,"highlight_end":63},{"text":"                                if pre_retain_len == cidrs.len() {","highlight_start":1,"highlight_end":67},{"text":"                                    return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":84},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":56},{"text":"                                *s = From::from(cidrs);","highlight_start":1,"highlight_end":56},{"text":"                            });","highlight_start":1,"highlight_end":32},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":92},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unnecessary trailing semicolon\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/smolnetd/scheme/netcfg/nodes.rs:244:68\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m244\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m                $(#[allow(unused_variables)] let $c = $c.clone();)*;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this semicolon\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0msrc/smolnetd/scheme/netcfg/mod.rs:51:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m51\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    cfg_node!{\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m52\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        \"resolv\" => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m53\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            \"nameserver\" => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m54\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                rw [dns_config, notifier] (Option<Ipv4Address>, None)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m272\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m273\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_____-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `cfg_node` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"unnecessary trailing semicolon","code":{"code":"redundant_semicolons","explanation":null},"level":"warning","spans":[{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":5609,"byte_end":5610,"line_start":250,"line_end":250,"column_start":72,"column_end":73,"is_primary":true,"text":[{"text":"                    $(#[allow(unused_variables)] let $c = $c.clone();)*;","highlight_start":72,"highlight_end":73}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":6209,"byte_end":6226,"line_start":266,"line_end":266,"column_start":42,"column_end":59,"is_primary":false,"text":[{"text":"            $(children.insert($e.into(), cfg_node!($($t)*));)*","highlight_start":42,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":6209,"byte_end":6226,"line_start":266,"line_end":266,"column_start":42,"column_end":59,"is_primary":false,"text":[{"text":"            $(children.insert($e.into(), cfg_node!($($t)*));)*","highlight_start":42,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/mod.rs","byte_start":1546,"byte_end":11568,"line_start":51,"line_end":273,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    cfg_node!{","highlight_start":5,"highlight_end":15},{"text":"        \"resolv\" => {","highlight_start":1,"highlight_end":22},{"text":"            \"nameserver\" => {","highlight_start":1,"highlight_end":30},{"text":"                rw [dns_config, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":70},{"text":"                || {","highlight_start":1,"highlight_end":21},{"text":"                    format!(\"{}\\n\", dns_config.borrow().name_server)","highlight_start":1,"highlight_end":69},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let ip = Ipv4Address::from_str(line.trim())","highlight_start":1,"highlight_end":68},{"text":"                            .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":79},{"text":"                        if !ip.is_unicast() {","highlight_start":1,"highlight_end":46},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(ip);","highlight_start":1,"highlight_end":47},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(ip) = *cur_value {","highlight_start":1,"highlight_end":51},{"text":"                        dns_config.borrow_mut().name_server = ip;","highlight_start":1,"highlight_end":66},{"text":"                        notifier.borrow_mut().schedule_notify(\"resolv/nameserver\");","highlight_start":1,"highlight_end":84},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    Ok(())","highlight_start":1,"highlight_end":27},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        \"route\" => {","highlight_start":1,"highlight_end":21},{"text":"            \"list\" => {","highlight_start":1,"highlight_end":24},{"text":"                ro [iface] || {","highlight_start":1,"highlight_end":32},{"text":"                    let mut gateway = None;","highlight_start":1,"highlight_end":44},{"text":"                    iface.borrow_mut().routes_mut().update(|map| {","highlight_start":1,"highlight_end":67},{"text":"                        gateway = map.get(&gateway_cidr()).map(|route| route.via_router);","highlight_start":1,"highlight_end":90},{"text":"                    });","highlight_start":1,"highlight_end":24},{"text":"                    if let Some(ip) = gateway {","highlight_start":1,"highlight_end":48},{"text":"                        format!(\"default via {}\\n\", ip)","highlight_start":1,"highlight_end":56},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        String::new()","highlight_start":1,"highlight_end":38},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            \"add\" => {","highlight_start":1,"highlight_end":23},{"text":"                wo [iface, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":65},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let default_gw = parse_default_gw(line)?;","highlight_start":1,"highlight_end":66},{"text":"                        if !default_gw.is_unicast() {","highlight_start":1,"highlight_end":54},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(default_gw);","highlight_start":1,"highlight_end":55},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(default_gw) = *cur_value {","highlight_start":1,"highlight_end":59},{"text":"                        if iface.borrow_mut().routes_mut().add_default_ipv4_route(default_gw).is_err() {","highlight_start":1,"highlight_end":105},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        notifier.borrow_mut().schedule_notify(\"route/list\");","highlight_start":1,"highlight_end":77},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            \"rm\" => {","highlight_start":1,"highlight_end":22},{"text":"                wo [iface, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":65},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let default_gw = parse_default_gw(line)?;","highlight_start":1,"highlight_end":66},{"text":"                        if !default_gw.is_unicast() {","highlight_start":1,"highlight_end":54},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(default_gw);","highlight_start":1,"highlight_end":55},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(default_gw) = *cur_value {","highlight_start":1,"highlight_end":59},{"text":"                        let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":60},{"text":"                        let mut gateway = None;","highlight_start":1,"highlight_end":48},{"text":"                        iface.routes_mut().update(|map| {","highlight_start":1,"highlight_end":58},{"text":"                            gateway = map.get(&gateway_cidr()).map(|route| route.via_router);","highlight_start":1,"highlight_end":94},{"text":"                        });","highlight_start":1,"highlight_end":28},{"text":"                        if gateway != Some(IpAddress::Ipv4(default_gw)) {","highlight_start":1,"highlight_end":74},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        iface.routes_mut().update(|map| {","highlight_start":1,"highlight_end":58},{"text":"                            map.remove(&gateway_cidr());","highlight_start":1,"highlight_end":57},{"text":"                        });","highlight_start":1,"highlight_end":28},{"text":"                        notifier.borrow_mut().schedule_notify(\"route/list\");","highlight_start":1,"highlight_end":77},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        \"ifaces\" => {","highlight_start":1,"highlight_end":22},{"text":"            \"eth0\" => {","highlight_start":1,"highlight_end":24},{"text":"                \"mac\" => {","highlight_start":1,"highlight_end":27},{"text":"                    rw [iface, notifier] (Option<EthernetAddress>, None)","highlight_start":1,"highlight_end":73},{"text":"                    || {","highlight_start":1,"highlight_end":25},{"text":"                        format!(\"{}\\n\", iface.borrow().ethernet_addr())","highlight_start":1,"highlight_end":72},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    |cur_value, line| {","highlight_start":1,"highlight_end":40},{"text":"                        if cur_value.is_none() {","highlight_start":1,"highlight_end":49},{"text":"                            let mac = EthernetAddress::from_str(line).","highlight_start":1,"highlight_end":71},{"text":"                                map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":82},{"text":"                            if !mac.is_unicast() {","highlight_start":1,"highlight_end":51},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            *cur_value = Some(mac);","highlight_start":1,"highlight_end":52},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        } else {","highlight_start":1,"highlight_end":33},{"text":"                            Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":68},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    |cur_value| {","highlight_start":1,"highlight_end":34},{"text":"                        if let Some(mac) = *cur_value {","highlight_start":1,"highlight_end":56},{"text":"                            iface.borrow_mut().set_ethernet_addr(mac);","highlight_start":1,"highlight_end":71},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/mac\");","highlight_start":1,"highlight_end":86},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"                \"addr\" => {","highlight_start":1,"highlight_end":28},{"text":"                    \"list\" => {","highlight_start":1,"highlight_end":32},{"text":"                        ro [iface]","highlight_start":1,"highlight_end":35},{"text":"                        || {","highlight_start":1,"highlight_end":29},{"text":"                            let mut ips = String::new();","highlight_start":1,"highlight_end":57},{"text":"                            for cidr in iface.borrow().ip_addrs() {","highlight_start":1,"highlight_end":68},{"text":"                                ips += &format!(\"{}\\n\", cidr);","highlight_start":1,"highlight_end":63},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            ips","highlight_start":1,"highlight_end":32},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"set\" => {","highlight_start":1,"highlight_end":31},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            if !cur_value.is_empty() {","highlight_start":1,"highlight_end":55},{"text":"                                let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":68},{"text":"                                let mut cidrs = vec![];","highlight_start":1,"highlight_end":56},{"text":"                                mem::swap(cur_value, &mut cidrs);","highlight_start":1,"highlight_end":66},{"text":"                                iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":60},{"text":"                                    *s = From::from(cidrs);","highlight_start":1,"highlight_end":60},{"text":"                                });","highlight_start":1,"highlight_end":36},{"text":"                                notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":96},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"add\" => {","highlight_start":1,"highlight_end":31},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":64},{"text":"                            let mut cidrs = iface.ip_addrs().to_vec();","highlight_start":1,"highlight_end":71},{"text":"                            for cidr in cur_value {","highlight_start":1,"highlight_end":52},{"text":"                                cidrs.insert(0, *cidr);","highlight_start":1,"highlight_end":56},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":56},{"text":"                                *s = From::from(cidrs);","highlight_start":1,"highlight_end":56},{"text":"                            });","highlight_start":1,"highlight_end":32},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":92},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"rm\" => {","highlight_start":1,"highlight_end":30},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":64},{"text":"                            let mut cidrs = iface.ip_addrs().to_vec();","highlight_start":1,"highlight_end":71},{"text":"                            for cidr in cur_value {","highlight_start":1,"highlight_end":52},{"text":"                                let pre_retain_len = cidrs.len();","highlight_start":1,"highlight_end":66},{"text":"                                cidrs.retain(|&c| c != *cidr);","highlight_start":1,"highlight_end":63},{"text":"                                if pre_retain_len == cidrs.len() {","highlight_start":1,"highlight_end":67},{"text":"                                    return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":84},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":56},{"text":"                                *s = From::from(cidrs);","highlight_start":1,"highlight_end":56},{"text":"                            });","highlight_start":1,"highlight_end":32},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":92},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"remove this semicolon","code":null,"level":"help","spans":[{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":5609,"byte_end":5610,"line_start":250,"line_end":250,"column_start":72,"column_end":73,"is_primary":true,"text":[{"text":"                    $(#[allow(unused_variables)] let $c = $c.clone();)*;","highlight_start":72,"highlight_end":73}],"label":null,"suggested_replacement":"","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":6209,"byte_end":6226,"line_start":266,"line_end":266,"column_start":42,"column_end":59,"is_primary":false,"text":[{"text":"            $(children.insert($e.into(), cfg_node!($($t)*));)*","highlight_start":42,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":6209,"byte_end":6226,"line_start":266,"line_end":266,"column_start":42,"column_end":59,"is_primary":false,"text":[{"text":"            $(children.insert($e.into(), cfg_node!($($t)*));)*","highlight_start":42,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/mod.rs","byte_start":1546,"byte_end":11568,"line_start":51,"line_end":273,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    cfg_node!{","highlight_start":5,"highlight_end":15},{"text":"        \"resolv\" => {","highlight_start":1,"highlight_end":22},{"text":"            \"nameserver\" => {","highlight_start":1,"highlight_end":30},{"text":"                rw [dns_config, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":70},{"text":"                || {","highlight_start":1,"highlight_end":21},{"text":"                    format!(\"{}\\n\", dns_config.borrow().name_server)","highlight_start":1,"highlight_end":69},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let ip = Ipv4Address::from_str(line.trim())","highlight_start":1,"highlight_end":68},{"text":"                            .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":79},{"text":"                        if !ip.is_unicast() {","highlight_start":1,"highlight_end":46},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(ip);","highlight_start":1,"highlight_end":47},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(ip) = *cur_value {","highlight_start":1,"highlight_end":51},{"text":"                        dns_config.borrow_mut().name_server = ip;","highlight_start":1,"highlight_end":66},{"text":"                        notifier.borrow_mut().schedule_notify(\"resolv/nameserver\");","highlight_start":1,"highlight_end":84},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    Ok(())","highlight_start":1,"highlight_end":27},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        \"route\" => {","highlight_start":1,"highlight_end":21},{"text":"            \"list\" => {","highlight_start":1,"highlight_end":24},{"text":"                ro [iface] || {","highlight_start":1,"highlight_end":32},{"text":"                    let mut gateway = None;","highlight_start":1,"highlight_end":44},{"text":"                    iface.borrow_mut().routes_mut().update(|map| {","highlight_start":1,"highlight_end":67},{"text":"                        gateway = map.get(&gateway_cidr()).map(|route| route.via_router);","highlight_start":1,"highlight_end":90},{"text":"                    });","highlight_start":1,"highlight_end":24},{"text":"                    if let Some(ip) = gateway {","highlight_start":1,"highlight_end":48},{"text":"                        format!(\"default via {}\\n\", ip)","highlight_start":1,"highlight_end":56},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        String::new()","highlight_start":1,"highlight_end":38},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            \"add\" => {","highlight_start":1,"highlight_end":23},{"text":"                wo [iface, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":65},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let default_gw = parse_default_gw(line)?;","highlight_start":1,"highlight_end":66},{"text":"                        if !default_gw.is_unicast() {","highlight_start":1,"highlight_end":54},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(default_gw);","highlight_start":1,"highlight_end":55},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(default_gw) = *cur_value {","highlight_start":1,"highlight_end":59},{"text":"                        if iface.borrow_mut().routes_mut().add_default_ipv4_route(default_gw).is_err() {","highlight_start":1,"highlight_end":105},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        notifier.borrow_mut().schedule_notify(\"route/list\");","highlight_start":1,"highlight_end":77},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            \"rm\" => {","highlight_start":1,"highlight_end":22},{"text":"                wo [iface, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":65},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let default_gw = parse_default_gw(line)?;","highlight_start":1,"highlight_end":66},{"text":"                        if !default_gw.is_unicast() {","highlight_start":1,"highlight_end":54},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(default_gw);","highlight_start":1,"highlight_end":55},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(default_gw) = *cur_value {","highlight_start":1,"highlight_end":59},{"text":"                        let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":60},{"text":"                        let mut gateway = None;","highlight_start":1,"highlight_end":48},{"text":"                        iface.routes_mut().update(|map| {","highlight_start":1,"highlight_end":58},{"text":"                            gateway = map.get(&gateway_cidr()).map(|route| route.via_router);","highlight_start":1,"highlight_end":94},{"text":"                        });","highlight_start":1,"highlight_end":28},{"text":"                        if gateway != Some(IpAddress::Ipv4(default_gw)) {","highlight_start":1,"highlight_end":74},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        iface.routes_mut().update(|map| {","highlight_start":1,"highlight_end":58},{"text":"                            map.remove(&gateway_cidr());","highlight_start":1,"highlight_end":57},{"text":"                        });","highlight_start":1,"highlight_end":28},{"text":"                        notifier.borrow_mut().schedule_notify(\"route/list\");","highlight_start":1,"highlight_end":77},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        \"ifaces\" => {","highlight_start":1,"highlight_end":22},{"text":"            \"eth0\" => {","highlight_start":1,"highlight_end":24},{"text":"                \"mac\" => {","highlight_start":1,"highlight_end":27},{"text":"                    rw [iface, notifier] (Option<EthernetAddress>, None)","highlight_start":1,"highlight_end":73},{"text":"                    || {","highlight_start":1,"highlight_end":25},{"text":"                        format!(\"{}\\n\", iface.borrow().ethernet_addr())","highlight_start":1,"highlight_end":72},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    |cur_value, line| {","highlight_start":1,"highlight_end":40},{"text":"                        if cur_value.is_none() {","highlight_start":1,"highlight_end":49},{"text":"                            let mac = EthernetAddress::from_str(line).","highlight_start":1,"highlight_end":71},{"text":"                                map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":82},{"text":"                            if !mac.is_unicast() {","highlight_start":1,"highlight_end":51},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            *cur_value = Some(mac);","highlight_start":1,"highlight_end":52},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        } else {","highlight_start":1,"highlight_end":33},{"text":"                            Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":68},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    |cur_value| {","highlight_start":1,"highlight_end":34},{"text":"                        if let Some(mac) = *cur_value {","highlight_start":1,"highlight_end":56},{"text":"                            iface.borrow_mut().set_ethernet_addr(mac);","highlight_start":1,"highlight_end":71},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/mac\");","highlight_start":1,"highlight_end":86},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"                \"addr\" => {","highlight_start":1,"highlight_end":28},{"text":"                    \"list\" => {","highlight_start":1,"highlight_end":32},{"text":"                        ro [iface]","highlight_start":1,"highlight_end":35},{"text":"                        || {","highlight_start":1,"highlight_end":29},{"text":"                            let mut ips = String::new();","highlight_start":1,"highlight_end":57},{"text":"                            for cidr in iface.borrow().ip_addrs() {","highlight_start":1,"highlight_end":68},{"text":"                                ips += &format!(\"{}\\n\", cidr);","highlight_start":1,"highlight_end":63},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            ips","highlight_start":1,"highlight_end":32},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"set\" => {","highlight_start":1,"highlight_end":31},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            if !cur_value.is_empty() {","highlight_start":1,"highlight_end":55},{"text":"                                let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":68},{"text":"                                let mut cidrs = vec![];","highlight_start":1,"highlight_end":56},{"text":"                                mem::swap(cur_value, &mut cidrs);","highlight_start":1,"highlight_end":66},{"text":"                                iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":60},{"text":"                                    *s = From::from(cidrs);","highlight_start":1,"highlight_end":60},{"text":"                                });","highlight_start":1,"highlight_end":36},{"text":"                                notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":96},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"add\" => {","highlight_start":1,"highlight_end":31},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":64},{"text":"                            let mut cidrs = iface.ip_addrs().to_vec();","highlight_start":1,"highlight_end":71},{"text":"                            for cidr in cur_value {","highlight_start":1,"highlight_end":52},{"text":"                                cidrs.insert(0, *cidr);","highlight_start":1,"highlight_end":56},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":56},{"text":"                                *s = From::from(cidrs);","highlight_start":1,"highlight_end":56},{"text":"                            });","highlight_start":1,"highlight_end":32},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":92},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"rm\" => {","highlight_start":1,"highlight_end":30},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":64},{"text":"                            let mut cidrs = iface.ip_addrs().to_vec();","highlight_start":1,"highlight_end":71},{"text":"                            for cidr in cur_value {","highlight_start":1,"highlight_end":52},{"text":"                                let pre_retain_len = cidrs.len();","highlight_start":1,"highlight_end":66},{"text":"                                cidrs.retain(|&c| c != *cidr);","highlight_start":1,"highlight_end":63},{"text":"                                if pre_retain_len == cidrs.len() {","highlight_start":1,"highlight_end":67},{"text":"                                    return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":84},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":56},{"text":"                                *s = From::from(cidrs);","highlight_start":1,"highlight_end":56},{"text":"                            });","highlight_start":1,"highlight_end":32},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":92},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unnecessary trailing semicolon\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/smolnetd/scheme/netcfg/nodes.rs:250:72\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m250\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m                    $(#[allow(unused_variables)] let $c = $c.clone();)*;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this semicolon\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0msrc/smolnetd/scheme/netcfg/mod.rs:51:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m51\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    cfg_node!{\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m52\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        \"resolv\" => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m53\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            \"nameserver\" => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m54\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                rw [dns_config, notifier] (Option<Ipv4Address>, None)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m272\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m273\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_____-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `cfg_node` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"unnecessary trailing semicolon","code":{"code":"redundant_semicolons","explanation":null},"level":"warning","spans":[{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":5804,"byte_end":5805,"line_start":254,"line_end":254,"column_start":72,"column_end":73,"is_primary":true,"text":[{"text":"                    $(#[allow(unused_variables)] let $c = $c.clone();)*;","highlight_start":72,"highlight_end":73}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":6209,"byte_end":6226,"line_start":266,"line_end":266,"column_start":42,"column_end":59,"is_primary":false,"text":[{"text":"            $(children.insert($e.into(), cfg_node!($($t)*));)*","highlight_start":42,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":6209,"byte_end":6226,"line_start":266,"line_end":266,"column_start":42,"column_end":59,"is_primary":false,"text":[{"text":"            $(children.insert($e.into(), cfg_node!($($t)*));)*","highlight_start":42,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/mod.rs","byte_start":1546,"byte_end":11568,"line_start":51,"line_end":273,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    cfg_node!{","highlight_start":5,"highlight_end":15},{"text":"        \"resolv\" => {","highlight_start":1,"highlight_end":22},{"text":"            \"nameserver\" => {","highlight_start":1,"highlight_end":30},{"text":"                rw [dns_config, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":70},{"text":"                || {","highlight_start":1,"highlight_end":21},{"text":"                    format!(\"{}\\n\", dns_config.borrow().name_server)","highlight_start":1,"highlight_end":69},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let ip = Ipv4Address::from_str(line.trim())","highlight_start":1,"highlight_end":68},{"text":"                            .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":79},{"text":"                        if !ip.is_unicast() {","highlight_start":1,"highlight_end":46},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(ip);","highlight_start":1,"highlight_end":47},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(ip) = *cur_value {","highlight_start":1,"highlight_end":51},{"text":"                        dns_config.borrow_mut().name_server = ip;","highlight_start":1,"highlight_end":66},{"text":"                        notifier.borrow_mut().schedule_notify(\"resolv/nameserver\");","highlight_start":1,"highlight_end":84},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    Ok(())","highlight_start":1,"highlight_end":27},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        \"route\" => {","highlight_start":1,"highlight_end":21},{"text":"            \"list\" => {","highlight_start":1,"highlight_end":24},{"text":"                ro [iface] || {","highlight_start":1,"highlight_end":32},{"text":"                    let mut gateway = None;","highlight_start":1,"highlight_end":44},{"text":"                    iface.borrow_mut().routes_mut().update(|map| {","highlight_start":1,"highlight_end":67},{"text":"                        gateway = map.get(&gateway_cidr()).map(|route| route.via_router);","highlight_start":1,"highlight_end":90},{"text":"                    });","highlight_start":1,"highlight_end":24},{"text":"                    if let Some(ip) = gateway {","highlight_start":1,"highlight_end":48},{"text":"                        format!(\"default via {}\\n\", ip)","highlight_start":1,"highlight_end":56},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        String::new()","highlight_start":1,"highlight_end":38},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            \"add\" => {","highlight_start":1,"highlight_end":23},{"text":"                wo [iface, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":65},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let default_gw = parse_default_gw(line)?;","highlight_start":1,"highlight_end":66},{"text":"                        if !default_gw.is_unicast() {","highlight_start":1,"highlight_end":54},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(default_gw);","highlight_start":1,"highlight_end":55},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(default_gw) = *cur_value {","highlight_start":1,"highlight_end":59},{"text":"                        if iface.borrow_mut().routes_mut().add_default_ipv4_route(default_gw).is_err() {","highlight_start":1,"highlight_end":105},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        notifier.borrow_mut().schedule_notify(\"route/list\");","highlight_start":1,"highlight_end":77},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            \"rm\" => {","highlight_start":1,"highlight_end":22},{"text":"                wo [iface, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":65},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let default_gw = parse_default_gw(line)?;","highlight_start":1,"highlight_end":66},{"text":"                        if !default_gw.is_unicast() {","highlight_start":1,"highlight_end":54},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(default_gw);","highlight_start":1,"highlight_end":55},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(default_gw) = *cur_value {","highlight_start":1,"highlight_end":59},{"text":"                        let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":60},{"text":"                        let mut gateway = None;","highlight_start":1,"highlight_end":48},{"text":"                        iface.routes_mut().update(|map| {","highlight_start":1,"highlight_end":58},{"text":"                            gateway = map.get(&gateway_cidr()).map(|route| route.via_router);","highlight_start":1,"highlight_end":94},{"text":"                        });","highlight_start":1,"highlight_end":28},{"text":"                        if gateway != Some(IpAddress::Ipv4(default_gw)) {","highlight_start":1,"highlight_end":74},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        iface.routes_mut().update(|map| {","highlight_start":1,"highlight_end":58},{"text":"                            map.remove(&gateway_cidr());","highlight_start":1,"highlight_end":57},{"text":"                        });","highlight_start":1,"highlight_end":28},{"text":"                        notifier.borrow_mut().schedule_notify(\"route/list\");","highlight_start":1,"highlight_end":77},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        \"ifaces\" => {","highlight_start":1,"highlight_end":22},{"text":"            \"eth0\" => {","highlight_start":1,"highlight_end":24},{"text":"                \"mac\" => {","highlight_start":1,"highlight_end":27},{"text":"                    rw [iface, notifier] (Option<EthernetAddress>, None)","highlight_start":1,"highlight_end":73},{"text":"                    || {","highlight_start":1,"highlight_end":25},{"text":"                        format!(\"{}\\n\", iface.borrow().ethernet_addr())","highlight_start":1,"highlight_end":72},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    |cur_value, line| {","highlight_start":1,"highlight_end":40},{"text":"                        if cur_value.is_none() {","highlight_start":1,"highlight_end":49},{"text":"                            let mac = EthernetAddress::from_str(line).","highlight_start":1,"highlight_end":71},{"text":"                                map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":82},{"text":"                            if !mac.is_unicast() {","highlight_start":1,"highlight_end":51},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            *cur_value = Some(mac);","highlight_start":1,"highlight_end":52},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        } else {","highlight_start":1,"highlight_end":33},{"text":"                            Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":68},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    |cur_value| {","highlight_start":1,"highlight_end":34},{"text":"                        if let Some(mac) = *cur_value {","highlight_start":1,"highlight_end":56},{"text":"                            iface.borrow_mut().set_ethernet_addr(mac);","highlight_start":1,"highlight_end":71},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/mac\");","highlight_start":1,"highlight_end":86},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"                \"addr\" => {","highlight_start":1,"highlight_end":28},{"text":"                    \"list\" => {","highlight_start":1,"highlight_end":32},{"text":"                        ro [iface]","highlight_start":1,"highlight_end":35},{"text":"                        || {","highlight_start":1,"highlight_end":29},{"text":"                            let mut ips = String::new();","highlight_start":1,"highlight_end":57},{"text":"                            for cidr in iface.borrow().ip_addrs() {","highlight_start":1,"highlight_end":68},{"text":"                                ips += &format!(\"{}\\n\", cidr);","highlight_start":1,"highlight_end":63},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            ips","highlight_start":1,"highlight_end":32},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"set\" => {","highlight_start":1,"highlight_end":31},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            if !cur_value.is_empty() {","highlight_start":1,"highlight_end":55},{"text":"                                let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":68},{"text":"                                let mut cidrs = vec![];","highlight_start":1,"highlight_end":56},{"text":"                                mem::swap(cur_value, &mut cidrs);","highlight_start":1,"highlight_end":66},{"text":"                                iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":60},{"text":"                                    *s = From::from(cidrs);","highlight_start":1,"highlight_end":60},{"text":"                                });","highlight_start":1,"highlight_end":36},{"text":"                                notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":96},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"add\" => {","highlight_start":1,"highlight_end":31},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":64},{"text":"                            let mut cidrs = iface.ip_addrs().to_vec();","highlight_start":1,"highlight_end":71},{"text":"                            for cidr in cur_value {","highlight_start":1,"highlight_end":52},{"text":"                                cidrs.insert(0, *cidr);","highlight_start":1,"highlight_end":56},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":56},{"text":"                                *s = From::from(cidrs);","highlight_start":1,"highlight_end":56},{"text":"                            });","highlight_start":1,"highlight_end":32},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":92},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"rm\" => {","highlight_start":1,"highlight_end":30},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":64},{"text":"                            let mut cidrs = iface.ip_addrs().to_vec();","highlight_start":1,"highlight_end":71},{"text":"                            for cidr in cur_value {","highlight_start":1,"highlight_end":52},{"text":"                                let pre_retain_len = cidrs.len();","highlight_start":1,"highlight_end":66},{"text":"                                cidrs.retain(|&c| c != *cidr);","highlight_start":1,"highlight_end":63},{"text":"                                if pre_retain_len == cidrs.len() {","highlight_start":1,"highlight_end":67},{"text":"                                    return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":84},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":56},{"text":"                                *s = From::from(cidrs);","highlight_start":1,"highlight_end":56},{"text":"                            });","highlight_start":1,"highlight_end":32},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":92},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"remove this semicolon","code":null,"level":"help","spans":[{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":5804,"byte_end":5805,"line_start":254,"line_end":254,"column_start":72,"column_end":73,"is_primary":true,"text":[{"text":"                    $(#[allow(unused_variables)] let $c = $c.clone();)*;","highlight_start":72,"highlight_end":73}],"label":null,"suggested_replacement":"","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":6209,"byte_end":6226,"line_start":266,"line_end":266,"column_start":42,"column_end":59,"is_primary":false,"text":[{"text":"            $(children.insert($e.into(), cfg_node!($($t)*));)*","highlight_start":42,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":6209,"byte_end":6226,"line_start":266,"line_end":266,"column_start":42,"column_end":59,"is_primary":false,"text":[{"text":"            $(children.insert($e.into(), cfg_node!($($t)*));)*","highlight_start":42,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/mod.rs","byte_start":1546,"byte_end":11568,"line_start":51,"line_end":273,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    cfg_node!{","highlight_start":5,"highlight_end":15},{"text":"        \"resolv\" => {","highlight_start":1,"highlight_end":22},{"text":"            \"nameserver\" => {","highlight_start":1,"highlight_end":30},{"text":"                rw [dns_config, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":70},{"text":"                || {","highlight_start":1,"highlight_end":21},{"text":"                    format!(\"{}\\n\", dns_config.borrow().name_server)","highlight_start":1,"highlight_end":69},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let ip = Ipv4Address::from_str(line.trim())","highlight_start":1,"highlight_end":68},{"text":"                            .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":79},{"text":"                        if !ip.is_unicast() {","highlight_start":1,"highlight_end":46},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(ip);","highlight_start":1,"highlight_end":47},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(ip) = *cur_value {","highlight_start":1,"highlight_end":51},{"text":"                        dns_config.borrow_mut().name_server = ip;","highlight_start":1,"highlight_end":66},{"text":"                        notifier.borrow_mut().schedule_notify(\"resolv/nameserver\");","highlight_start":1,"highlight_end":84},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    Ok(())","highlight_start":1,"highlight_end":27},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        \"route\" => {","highlight_start":1,"highlight_end":21},{"text":"            \"list\" => {","highlight_start":1,"highlight_end":24},{"text":"                ro [iface] || {","highlight_start":1,"highlight_end":32},{"text":"                    let mut gateway = None;","highlight_start":1,"highlight_end":44},{"text":"                    iface.borrow_mut().routes_mut().update(|map| {","highlight_start":1,"highlight_end":67},{"text":"                        gateway = map.get(&gateway_cidr()).map(|route| route.via_router);","highlight_start":1,"highlight_end":90},{"text":"                    });","highlight_start":1,"highlight_end":24},{"text":"                    if let Some(ip) = gateway {","highlight_start":1,"highlight_end":48},{"text":"                        format!(\"default via {}\\n\", ip)","highlight_start":1,"highlight_end":56},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        String::new()","highlight_start":1,"highlight_end":38},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            \"add\" => {","highlight_start":1,"highlight_end":23},{"text":"                wo [iface, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":65},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let default_gw = parse_default_gw(line)?;","highlight_start":1,"highlight_end":66},{"text":"                        if !default_gw.is_unicast() {","highlight_start":1,"highlight_end":54},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(default_gw);","highlight_start":1,"highlight_end":55},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(default_gw) = *cur_value {","highlight_start":1,"highlight_end":59},{"text":"                        if iface.borrow_mut().routes_mut().add_default_ipv4_route(default_gw).is_err() {","highlight_start":1,"highlight_end":105},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        notifier.borrow_mut().schedule_notify(\"route/list\");","highlight_start":1,"highlight_end":77},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            \"rm\" => {","highlight_start":1,"highlight_end":22},{"text":"                wo [iface, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":65},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let default_gw = parse_default_gw(line)?;","highlight_start":1,"highlight_end":66},{"text":"                        if !default_gw.is_unicast() {","highlight_start":1,"highlight_end":54},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(default_gw);","highlight_start":1,"highlight_end":55},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(default_gw) = *cur_value {","highlight_start":1,"highlight_end":59},{"text":"                        let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":60},{"text":"                        let mut gateway = None;","highlight_start":1,"highlight_end":48},{"text":"                        iface.routes_mut().update(|map| {","highlight_start":1,"highlight_end":58},{"text":"                            gateway = map.get(&gateway_cidr()).map(|route| route.via_router);","highlight_start":1,"highlight_end":94},{"text":"                        });","highlight_start":1,"highlight_end":28},{"text":"                        if gateway != Some(IpAddress::Ipv4(default_gw)) {","highlight_start":1,"highlight_end":74},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        iface.routes_mut().update(|map| {","highlight_start":1,"highlight_end":58},{"text":"                            map.remove(&gateway_cidr());","highlight_start":1,"highlight_end":57},{"text":"                        });","highlight_start":1,"highlight_end":28},{"text":"                        notifier.borrow_mut().schedule_notify(\"route/list\");","highlight_start":1,"highlight_end":77},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        \"ifaces\" => {","highlight_start":1,"highlight_end":22},{"text":"            \"eth0\" => {","highlight_start":1,"highlight_end":24},{"text":"                \"mac\" => {","highlight_start":1,"highlight_end":27},{"text":"                    rw [iface, notifier] (Option<EthernetAddress>, None)","highlight_start":1,"highlight_end":73},{"text":"                    || {","highlight_start":1,"highlight_end":25},{"text":"                        format!(\"{}\\n\", iface.borrow().ethernet_addr())","highlight_start":1,"highlight_end":72},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    |cur_value, line| {","highlight_start":1,"highlight_end":40},{"text":"                        if cur_value.is_none() {","highlight_start":1,"highlight_end":49},{"text":"                            let mac = EthernetAddress::from_str(line).","highlight_start":1,"highlight_end":71},{"text":"                                map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":82},{"text":"                            if !mac.is_unicast() {","highlight_start":1,"highlight_end":51},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            *cur_value = Some(mac);","highlight_start":1,"highlight_end":52},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        } else {","highlight_start":1,"highlight_end":33},{"text":"                            Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":68},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    |cur_value| {","highlight_start":1,"highlight_end":34},{"text":"                        if let Some(mac) = *cur_value {","highlight_start":1,"highlight_end":56},{"text":"                            iface.borrow_mut().set_ethernet_addr(mac);","highlight_start":1,"highlight_end":71},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/mac\");","highlight_start":1,"highlight_end":86},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"                \"addr\" => {","highlight_start":1,"highlight_end":28},{"text":"                    \"list\" => {","highlight_start":1,"highlight_end":32},{"text":"                        ro [iface]","highlight_start":1,"highlight_end":35},{"text":"                        || {","highlight_start":1,"highlight_end":29},{"text":"                            let mut ips = String::new();","highlight_start":1,"highlight_end":57},{"text":"                            for cidr in iface.borrow().ip_addrs() {","highlight_start":1,"highlight_end":68},{"text":"                                ips += &format!(\"{}\\n\", cidr);","highlight_start":1,"highlight_end":63},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            ips","highlight_start":1,"highlight_end":32},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"set\" => {","highlight_start":1,"highlight_end":31},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            if !cur_value.is_empty() {","highlight_start":1,"highlight_end":55},{"text":"                                let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":68},{"text":"                                let mut cidrs = vec![];","highlight_start":1,"highlight_end":56},{"text":"                                mem::swap(cur_value, &mut cidrs);","highlight_start":1,"highlight_end":66},{"text":"                                iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":60},{"text":"                                    *s = From::from(cidrs);","highlight_start":1,"highlight_end":60},{"text":"                                });","highlight_start":1,"highlight_end":36},{"text":"                                notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":96},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"add\" => {","highlight_start":1,"highlight_end":31},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":64},{"text":"                            let mut cidrs = iface.ip_addrs().to_vec();","highlight_start":1,"highlight_end":71},{"text":"                            for cidr in cur_value {","highlight_start":1,"highlight_end":52},{"text":"                                cidrs.insert(0, *cidr);","highlight_start":1,"highlight_end":56},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":56},{"text":"                                *s = From::from(cidrs);","highlight_start":1,"highlight_end":56},{"text":"                            });","highlight_start":1,"highlight_end":32},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":92},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"rm\" => {","highlight_start":1,"highlight_end":30},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":64},{"text":"                            let mut cidrs = iface.ip_addrs().to_vec();","highlight_start":1,"highlight_end":71},{"text":"                            for cidr in cur_value {","highlight_start":1,"highlight_end":52},{"text":"                                let pre_retain_len = cidrs.len();","highlight_start":1,"highlight_end":66},{"text":"                                cidrs.retain(|&c| c != *cidr);","highlight_start":1,"highlight_end":63},{"text":"                                if pre_retain_len == cidrs.len() {","highlight_start":1,"highlight_end":67},{"text":"                                    return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":84},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":56},{"text":"                                *s = From::from(cidrs);","highlight_start":1,"highlight_end":56},{"text":"                            });","highlight_start":1,"highlight_end":32},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":92},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unnecessary trailing semicolon\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/smolnetd/scheme/netcfg/nodes.rs:254:72\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m254\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m                    $(#[allow(unused_variables)] let $c = $c.clone();)*;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this semicolon\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0msrc/smolnetd/scheme/netcfg/mod.rs:51:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m51\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    cfg_node!{\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m52\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        \"resolv\" => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m53\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            \"nameserver\" => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m54\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                rw [dns_config, notifier] (Option<Ipv4Address>, None)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m272\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m273\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_____-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `cfg_node` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"unnecessary trailing semicolon","code":{"code":"redundant_semicolons","explanation":null},"level":"warning","spans":[{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4456,"byte_end":4457,"line_start":224,"line_end":224,"column_start":64,"column_end":65,"is_primary":true,"text":[{"text":"            $(#[allow(unused_variables)] let $c = $c.clone();)*;","highlight_start":64,"highlight_end":65}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":6209,"byte_end":6226,"line_start":266,"line_end":266,"column_start":42,"column_end":59,"is_primary":false,"text":[{"text":"            $(children.insert($e.into(), cfg_node!($($t)*));)*","highlight_start":42,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":6209,"byte_end":6226,"line_start":266,"line_end":266,"column_start":42,"column_end":59,"is_primary":false,"text":[{"text":"            $(children.insert($e.into(), cfg_node!($($t)*));)*","highlight_start":42,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/mod.rs","byte_start":1546,"byte_end":11568,"line_start":51,"line_end":273,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    cfg_node!{","highlight_start":5,"highlight_end":15},{"text":"        \"resolv\" => {","highlight_start":1,"highlight_end":22},{"text":"            \"nameserver\" => {","highlight_start":1,"highlight_end":30},{"text":"                rw [dns_config, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":70},{"text":"                || {","highlight_start":1,"highlight_end":21},{"text":"                    format!(\"{}\\n\", dns_config.borrow().name_server)","highlight_start":1,"highlight_end":69},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let ip = Ipv4Address::from_str(line.trim())","highlight_start":1,"highlight_end":68},{"text":"                            .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":79},{"text":"                        if !ip.is_unicast() {","highlight_start":1,"highlight_end":46},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(ip);","highlight_start":1,"highlight_end":47},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(ip) = *cur_value {","highlight_start":1,"highlight_end":51},{"text":"                        dns_config.borrow_mut().name_server = ip;","highlight_start":1,"highlight_end":66},{"text":"                        notifier.borrow_mut().schedule_notify(\"resolv/nameserver\");","highlight_start":1,"highlight_end":84},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    Ok(())","highlight_start":1,"highlight_end":27},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        \"route\" => {","highlight_start":1,"highlight_end":21},{"text":"            \"list\" => {","highlight_start":1,"highlight_end":24},{"text":"                ro [iface] || {","highlight_start":1,"highlight_end":32},{"text":"                    let mut gateway = None;","highlight_start":1,"highlight_end":44},{"text":"                    iface.borrow_mut().routes_mut().update(|map| {","highlight_start":1,"highlight_end":67},{"text":"                        gateway = map.get(&gateway_cidr()).map(|route| route.via_router);","highlight_start":1,"highlight_end":90},{"text":"                    });","highlight_start":1,"highlight_end":24},{"text":"                    if let Some(ip) = gateway {","highlight_start":1,"highlight_end":48},{"text":"                        format!(\"default via {}\\n\", ip)","highlight_start":1,"highlight_end":56},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        String::new()","highlight_start":1,"highlight_end":38},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            \"add\" => {","highlight_start":1,"highlight_end":23},{"text":"                wo [iface, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":65},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let default_gw = parse_default_gw(line)?;","highlight_start":1,"highlight_end":66},{"text":"                        if !default_gw.is_unicast() {","highlight_start":1,"highlight_end":54},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(default_gw);","highlight_start":1,"highlight_end":55},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(default_gw) = *cur_value {","highlight_start":1,"highlight_end":59},{"text":"                        if iface.borrow_mut().routes_mut().add_default_ipv4_route(default_gw).is_err() {","highlight_start":1,"highlight_end":105},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        notifier.borrow_mut().schedule_notify(\"route/list\");","highlight_start":1,"highlight_end":77},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            \"rm\" => {","highlight_start":1,"highlight_end":22},{"text":"                wo [iface, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":65},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let default_gw = parse_default_gw(line)?;","highlight_start":1,"highlight_end":66},{"text":"                        if !default_gw.is_unicast() {","highlight_start":1,"highlight_end":54},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(default_gw);","highlight_start":1,"highlight_end":55},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(default_gw) = *cur_value {","highlight_start":1,"highlight_end":59},{"text":"                        let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":60},{"text":"                        let mut gateway = None;","highlight_start":1,"highlight_end":48},{"text":"                        iface.routes_mut().update(|map| {","highlight_start":1,"highlight_end":58},{"text":"                            gateway = map.get(&gateway_cidr()).map(|route| route.via_router);","highlight_start":1,"highlight_end":94},{"text":"                        });","highlight_start":1,"highlight_end":28},{"text":"                        if gateway != Some(IpAddress::Ipv4(default_gw)) {","highlight_start":1,"highlight_end":74},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        iface.routes_mut().update(|map| {","highlight_start":1,"highlight_end":58},{"text":"                            map.remove(&gateway_cidr());","highlight_start":1,"highlight_end":57},{"text":"                        });","highlight_start":1,"highlight_end":28},{"text":"                        notifier.borrow_mut().schedule_notify(\"route/list\");","highlight_start":1,"highlight_end":77},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        \"ifaces\" => {","highlight_start":1,"highlight_end":22},{"text":"            \"eth0\" => {","highlight_start":1,"highlight_end":24},{"text":"                \"mac\" => {","highlight_start":1,"highlight_end":27},{"text":"                    rw [iface, notifier] (Option<EthernetAddress>, None)","highlight_start":1,"highlight_end":73},{"text":"                    || {","highlight_start":1,"highlight_end":25},{"text":"                        format!(\"{}\\n\", iface.borrow().ethernet_addr())","highlight_start":1,"highlight_end":72},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    |cur_value, line| {","highlight_start":1,"highlight_end":40},{"text":"                        if cur_value.is_none() {","highlight_start":1,"highlight_end":49},{"text":"                            let mac = EthernetAddress::from_str(line).","highlight_start":1,"highlight_end":71},{"text":"                                map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":82},{"text":"                            if !mac.is_unicast() {","highlight_start":1,"highlight_end":51},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            *cur_value = Some(mac);","highlight_start":1,"highlight_end":52},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        } else {","highlight_start":1,"highlight_end":33},{"text":"                            Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":68},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    |cur_value| {","highlight_start":1,"highlight_end":34},{"text":"                        if let Some(mac) = *cur_value {","highlight_start":1,"highlight_end":56},{"text":"                            iface.borrow_mut().set_ethernet_addr(mac);","highlight_start":1,"highlight_end":71},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/mac\");","highlight_start":1,"highlight_end":86},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"                \"addr\" => {","highlight_start":1,"highlight_end":28},{"text":"                    \"list\" => {","highlight_start":1,"highlight_end":32},{"text":"                        ro [iface]","highlight_start":1,"highlight_end":35},{"text":"                        || {","highlight_start":1,"highlight_end":29},{"text":"                            let mut ips = String::new();","highlight_start":1,"highlight_end":57},{"text":"                            for cidr in iface.borrow().ip_addrs() {","highlight_start":1,"highlight_end":68},{"text":"                                ips += &format!(\"{}\\n\", cidr);","highlight_start":1,"highlight_end":63},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            ips","highlight_start":1,"highlight_end":32},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"set\" => {","highlight_start":1,"highlight_end":31},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            if !cur_value.is_empty() {","highlight_start":1,"highlight_end":55},{"text":"                                let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":68},{"text":"                                let mut cidrs = vec![];","highlight_start":1,"highlight_end":56},{"text":"                                mem::swap(cur_value, &mut cidrs);","highlight_start":1,"highlight_end":66},{"text":"                                iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":60},{"text":"                                    *s = From::from(cidrs);","highlight_start":1,"highlight_end":60},{"text":"                                });","highlight_start":1,"highlight_end":36},{"text":"                                notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":96},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"add\" => {","highlight_start":1,"highlight_end":31},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":64},{"text":"                            let mut cidrs = iface.ip_addrs().to_vec();","highlight_start":1,"highlight_end":71},{"text":"                            for cidr in cur_value {","highlight_start":1,"highlight_end":52},{"text":"                                cidrs.insert(0, *cidr);","highlight_start":1,"highlight_end":56},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":56},{"text":"                                *s = From::from(cidrs);","highlight_start":1,"highlight_end":56},{"text":"                            });","highlight_start":1,"highlight_end":32},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":92},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"rm\" => {","highlight_start":1,"highlight_end":30},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":64},{"text":"                            let mut cidrs = iface.ip_addrs().to_vec();","highlight_start":1,"highlight_end":71},{"text":"                            for cidr in cur_value {","highlight_start":1,"highlight_end":52},{"text":"                                let pre_retain_len = cidrs.len();","highlight_start":1,"highlight_end":66},{"text":"                                cidrs.retain(|&c| c != *cidr);","highlight_start":1,"highlight_end":63},{"text":"                                if pre_retain_len == cidrs.len() {","highlight_start":1,"highlight_end":67},{"text":"                                    return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":84},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":56},{"text":"                                *s = From::from(cidrs);","highlight_start":1,"highlight_end":56},{"text":"                            });","highlight_start":1,"highlight_end":32},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":92},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"remove this semicolon","code":null,"level":"help","spans":[{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4456,"byte_end":4457,"line_start":224,"line_end":224,"column_start":64,"column_end":65,"is_primary":true,"text":[{"text":"            $(#[allow(unused_variables)] let $c = $c.clone();)*;","highlight_start":64,"highlight_end":65}],"label":null,"suggested_replacement":"","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":6209,"byte_end":6226,"line_start":266,"line_end":266,"column_start":42,"column_end":59,"is_primary":false,"text":[{"text":"            $(children.insert($e.into(), cfg_node!($($t)*));)*","highlight_start":42,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":6209,"byte_end":6226,"line_start":266,"line_end":266,"column_start":42,"column_end":59,"is_primary":false,"text":[{"text":"            $(children.insert($e.into(), cfg_node!($($t)*));)*","highlight_start":42,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/mod.rs","byte_start":1546,"byte_end":11568,"line_start":51,"line_end":273,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    cfg_node!{","highlight_start":5,"highlight_end":15},{"text":"        \"resolv\" => {","highlight_start":1,"highlight_end":22},{"text":"            \"nameserver\" => {","highlight_start":1,"highlight_end":30},{"text":"                rw [dns_config, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":70},{"text":"                || {","highlight_start":1,"highlight_end":21},{"text":"                    format!(\"{}\\n\", dns_config.borrow().name_server)","highlight_start":1,"highlight_end":69},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let ip = Ipv4Address::from_str(line.trim())","highlight_start":1,"highlight_end":68},{"text":"                            .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":79},{"text":"                        if !ip.is_unicast() {","highlight_start":1,"highlight_end":46},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(ip);","highlight_start":1,"highlight_end":47},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(ip) = *cur_value {","highlight_start":1,"highlight_end":51},{"text":"                        dns_config.borrow_mut().name_server = ip;","highlight_start":1,"highlight_end":66},{"text":"                        notifier.borrow_mut().schedule_notify(\"resolv/nameserver\");","highlight_start":1,"highlight_end":84},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    Ok(())","highlight_start":1,"highlight_end":27},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        \"route\" => {","highlight_start":1,"highlight_end":21},{"text":"            \"list\" => {","highlight_start":1,"highlight_end":24},{"text":"                ro [iface] || {","highlight_start":1,"highlight_end":32},{"text":"                    let mut gateway = None;","highlight_start":1,"highlight_end":44},{"text":"                    iface.borrow_mut().routes_mut().update(|map| {","highlight_start":1,"highlight_end":67},{"text":"                        gateway = map.get(&gateway_cidr()).map(|route| route.via_router);","highlight_start":1,"highlight_end":90},{"text":"                    });","highlight_start":1,"highlight_end":24},{"text":"                    if let Some(ip) = gateway {","highlight_start":1,"highlight_end":48},{"text":"                        format!(\"default via {}\\n\", ip)","highlight_start":1,"highlight_end":56},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        String::new()","highlight_start":1,"highlight_end":38},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            \"add\" => {","highlight_start":1,"highlight_end":23},{"text":"                wo [iface, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":65},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let default_gw = parse_default_gw(line)?;","highlight_start":1,"highlight_end":66},{"text":"                        if !default_gw.is_unicast() {","highlight_start":1,"highlight_end":54},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(default_gw);","highlight_start":1,"highlight_end":55},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(default_gw) = *cur_value {","highlight_start":1,"highlight_end":59},{"text":"                        if iface.borrow_mut().routes_mut().add_default_ipv4_route(default_gw).is_err() {","highlight_start":1,"highlight_end":105},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        notifier.borrow_mut().schedule_notify(\"route/list\");","highlight_start":1,"highlight_end":77},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            \"rm\" => {","highlight_start":1,"highlight_end":22},{"text":"                wo [iface, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":65},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let default_gw = parse_default_gw(line)?;","highlight_start":1,"highlight_end":66},{"text":"                        if !default_gw.is_unicast() {","highlight_start":1,"highlight_end":54},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(default_gw);","highlight_start":1,"highlight_end":55},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(default_gw) = *cur_value {","highlight_start":1,"highlight_end":59},{"text":"                        let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":60},{"text":"                        let mut gateway = None;","highlight_start":1,"highlight_end":48},{"text":"                        iface.routes_mut().update(|map| {","highlight_start":1,"highlight_end":58},{"text":"                            gateway = map.get(&gateway_cidr()).map(|route| route.via_router);","highlight_start":1,"highlight_end":94},{"text":"                        });","highlight_start":1,"highlight_end":28},{"text":"                        if gateway != Some(IpAddress::Ipv4(default_gw)) {","highlight_start":1,"highlight_end":74},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        iface.routes_mut().update(|map| {","highlight_start":1,"highlight_end":58},{"text":"                            map.remove(&gateway_cidr());","highlight_start":1,"highlight_end":57},{"text":"                        });","highlight_start":1,"highlight_end":28},{"text":"                        notifier.borrow_mut().schedule_notify(\"route/list\");","highlight_start":1,"highlight_end":77},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        \"ifaces\" => {","highlight_start":1,"highlight_end":22},{"text":"            \"eth0\" => {","highlight_start":1,"highlight_end":24},{"text":"                \"mac\" => {","highlight_start":1,"highlight_end":27},{"text":"                    rw [iface, notifier] (Option<EthernetAddress>, None)","highlight_start":1,"highlight_end":73},{"text":"                    || {","highlight_start":1,"highlight_end":25},{"text":"                        format!(\"{}\\n\", iface.borrow().ethernet_addr())","highlight_start":1,"highlight_end":72},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    |cur_value, line| {","highlight_start":1,"highlight_end":40},{"text":"                        if cur_value.is_none() {","highlight_start":1,"highlight_end":49},{"text":"                            let mac = EthernetAddress::from_str(line).","highlight_start":1,"highlight_end":71},{"text":"                                map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":82},{"text":"                            if !mac.is_unicast() {","highlight_start":1,"highlight_end":51},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            *cur_value = Some(mac);","highlight_start":1,"highlight_end":52},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        } else {","highlight_start":1,"highlight_end":33},{"text":"                            Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":68},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    |cur_value| {","highlight_start":1,"highlight_end":34},{"text":"                        if let Some(mac) = *cur_value {","highlight_start":1,"highlight_end":56},{"text":"                            iface.borrow_mut().set_ethernet_addr(mac);","highlight_start":1,"highlight_end":71},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/mac\");","highlight_start":1,"highlight_end":86},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"                \"addr\" => {","highlight_start":1,"highlight_end":28},{"text":"                    \"list\" => {","highlight_start":1,"highlight_end":32},{"text":"                        ro [iface]","highlight_start":1,"highlight_end":35},{"text":"                        || {","highlight_start":1,"highlight_end":29},{"text":"                            let mut ips = String::new();","highlight_start":1,"highlight_end":57},{"text":"                            for cidr in iface.borrow().ip_addrs() {","highlight_start":1,"highlight_end":68},{"text":"                                ips += &format!(\"{}\\n\", cidr);","highlight_start":1,"highlight_end":63},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            ips","highlight_start":1,"highlight_end":32},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"set\" => {","highlight_start":1,"highlight_end":31},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            if !cur_value.is_empty() {","highlight_start":1,"highlight_end":55},{"text":"                                let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":68},{"text":"                                let mut cidrs = vec![];","highlight_start":1,"highlight_end":56},{"text":"                                mem::swap(cur_value, &mut cidrs);","highlight_start":1,"highlight_end":66},{"text":"                                iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":60},{"text":"                                    *s = From::from(cidrs);","highlight_start":1,"highlight_end":60},{"text":"                                });","highlight_start":1,"highlight_end":36},{"text":"                                notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":96},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"add\" => {","highlight_start":1,"highlight_end":31},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":64},{"text":"                            let mut cidrs = iface.ip_addrs().to_vec();","highlight_start":1,"highlight_end":71},{"text":"                            for cidr in cur_value {","highlight_start":1,"highlight_end":52},{"text":"                                cidrs.insert(0, *cidr);","highlight_start":1,"highlight_end":56},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":56},{"text":"                                *s = From::from(cidrs);","highlight_start":1,"highlight_end":56},{"text":"                            });","highlight_start":1,"highlight_end":32},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":92},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"rm\" => {","highlight_start":1,"highlight_end":30},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":64},{"text":"                            let mut cidrs = iface.ip_addrs().to_vec();","highlight_start":1,"highlight_end":71},{"text":"                            for cidr in cur_value {","highlight_start":1,"highlight_end":52},{"text":"                                let pre_retain_len = cidrs.len();","highlight_start":1,"highlight_end":66},{"text":"                                cidrs.retain(|&c| c != *cidr);","highlight_start":1,"highlight_end":63},{"text":"                                if pre_retain_len == cidrs.len() {","highlight_start":1,"highlight_end":67},{"text":"                                    return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":84},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":56},{"text":"                                *s = From::from(cidrs);","highlight_start":1,"highlight_end":56},{"text":"                            });","highlight_start":1,"highlight_end":32},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":92},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unnecessary trailing semicolon\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/smolnetd/scheme/netcfg/nodes.rs:224:64\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m224\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m            $(#[allow(unused_variables)] let $c = $c.clone();)*;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this semicolon\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0msrc/smolnetd/scheme/netcfg/mod.rs:51:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m51\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    cfg_node!{\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m52\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        \"resolv\" => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m53\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            \"nameserver\" => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m54\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                rw [dns_config, notifier] (Option<Ipv4Address>, None)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m272\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m273\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_____-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `cfg_node` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"unnecessary trailing semicolon","code":{"code":"redundant_semicolons","explanation":null},"level":"warning","spans":[{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4622,"byte_end":4623,"line_start":227,"line_end":227,"column_start":72,"column_end":73,"is_primary":true,"text":[{"text":"                    $(#[allow(unused_variables)] let $c = $c.clone();)*;","highlight_start":72,"highlight_end":73}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":6209,"byte_end":6226,"line_start":266,"line_end":266,"column_start":42,"column_end":59,"is_primary":false,"text":[{"text":"            $(children.insert($e.into(), cfg_node!($($t)*));)*","highlight_start":42,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":6209,"byte_end":6226,"line_start":266,"line_end":266,"column_start":42,"column_end":59,"is_primary":false,"text":[{"text":"            $(children.insert($e.into(), cfg_node!($($t)*));)*","highlight_start":42,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/mod.rs","byte_start":1546,"byte_end":11568,"line_start":51,"line_end":273,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    cfg_node!{","highlight_start":5,"highlight_end":15},{"text":"        \"resolv\" => {","highlight_start":1,"highlight_end":22},{"text":"            \"nameserver\" => {","highlight_start":1,"highlight_end":30},{"text":"                rw [dns_config, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":70},{"text":"                || {","highlight_start":1,"highlight_end":21},{"text":"                    format!(\"{}\\n\", dns_config.borrow().name_server)","highlight_start":1,"highlight_end":69},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let ip = Ipv4Address::from_str(line.trim())","highlight_start":1,"highlight_end":68},{"text":"                            .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":79},{"text":"                        if !ip.is_unicast() {","highlight_start":1,"highlight_end":46},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(ip);","highlight_start":1,"highlight_end":47},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(ip) = *cur_value {","highlight_start":1,"highlight_end":51},{"text":"                        dns_config.borrow_mut().name_server = ip;","highlight_start":1,"highlight_end":66},{"text":"                        notifier.borrow_mut().schedule_notify(\"resolv/nameserver\");","highlight_start":1,"highlight_end":84},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    Ok(())","highlight_start":1,"highlight_end":27},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        \"route\" => {","highlight_start":1,"highlight_end":21},{"text":"            \"list\" => {","highlight_start":1,"highlight_end":24},{"text":"                ro [iface] || {","highlight_start":1,"highlight_end":32},{"text":"                    let mut gateway = None;","highlight_start":1,"highlight_end":44},{"text":"                    iface.borrow_mut().routes_mut().update(|map| {","highlight_start":1,"highlight_end":67},{"text":"                        gateway = map.get(&gateway_cidr()).map(|route| route.via_router);","highlight_start":1,"highlight_end":90},{"text":"                    });","highlight_start":1,"highlight_end":24},{"text":"                    if let Some(ip) = gateway {","highlight_start":1,"highlight_end":48},{"text":"                        format!(\"default via {}\\n\", ip)","highlight_start":1,"highlight_end":56},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        String::new()","highlight_start":1,"highlight_end":38},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            \"add\" => {","highlight_start":1,"highlight_end":23},{"text":"                wo [iface, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":65},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let default_gw = parse_default_gw(line)?;","highlight_start":1,"highlight_end":66},{"text":"                        if !default_gw.is_unicast() {","highlight_start":1,"highlight_end":54},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(default_gw);","highlight_start":1,"highlight_end":55},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(default_gw) = *cur_value {","highlight_start":1,"highlight_end":59},{"text":"                        if iface.borrow_mut().routes_mut().add_default_ipv4_route(default_gw).is_err() {","highlight_start":1,"highlight_end":105},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        notifier.borrow_mut().schedule_notify(\"route/list\");","highlight_start":1,"highlight_end":77},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            \"rm\" => {","highlight_start":1,"highlight_end":22},{"text":"                wo [iface, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":65},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let default_gw = parse_default_gw(line)?;","highlight_start":1,"highlight_end":66},{"text":"                        if !default_gw.is_unicast() {","highlight_start":1,"highlight_end":54},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(default_gw);","highlight_start":1,"highlight_end":55},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(default_gw) = *cur_value {","highlight_start":1,"highlight_end":59},{"text":"                        let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":60},{"text":"                        let mut gateway = None;","highlight_start":1,"highlight_end":48},{"text":"                        iface.routes_mut().update(|map| {","highlight_start":1,"highlight_end":58},{"text":"                            gateway = map.get(&gateway_cidr()).map(|route| route.via_router);","highlight_start":1,"highlight_end":94},{"text":"                        });","highlight_start":1,"highlight_end":28},{"text":"                        if gateway != Some(IpAddress::Ipv4(default_gw)) {","highlight_start":1,"highlight_end":74},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        iface.routes_mut().update(|map| {","highlight_start":1,"highlight_end":58},{"text":"                            map.remove(&gateway_cidr());","highlight_start":1,"highlight_end":57},{"text":"                        });","highlight_start":1,"highlight_end":28},{"text":"                        notifier.borrow_mut().schedule_notify(\"route/list\");","highlight_start":1,"highlight_end":77},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        \"ifaces\" => {","highlight_start":1,"highlight_end":22},{"text":"            \"eth0\" => {","highlight_start":1,"highlight_end":24},{"text":"                \"mac\" => {","highlight_start":1,"highlight_end":27},{"text":"                    rw [iface, notifier] (Option<EthernetAddress>, None)","highlight_start":1,"highlight_end":73},{"text":"                    || {","highlight_start":1,"highlight_end":25},{"text":"                        format!(\"{}\\n\", iface.borrow().ethernet_addr())","highlight_start":1,"highlight_end":72},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    |cur_value, line| {","highlight_start":1,"highlight_end":40},{"text":"                        if cur_value.is_none() {","highlight_start":1,"highlight_end":49},{"text":"                            let mac = EthernetAddress::from_str(line).","highlight_start":1,"highlight_end":71},{"text":"                                map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":82},{"text":"                            if !mac.is_unicast() {","highlight_start":1,"highlight_end":51},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            *cur_value = Some(mac);","highlight_start":1,"highlight_end":52},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        } else {","highlight_start":1,"highlight_end":33},{"text":"                            Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":68},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    |cur_value| {","highlight_start":1,"highlight_end":34},{"text":"                        if let Some(mac) = *cur_value {","highlight_start":1,"highlight_end":56},{"text":"                            iface.borrow_mut().set_ethernet_addr(mac);","highlight_start":1,"highlight_end":71},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/mac\");","highlight_start":1,"highlight_end":86},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"                \"addr\" => {","highlight_start":1,"highlight_end":28},{"text":"                    \"list\" => {","highlight_start":1,"highlight_end":32},{"text":"                        ro [iface]","highlight_start":1,"highlight_end":35},{"text":"                        || {","highlight_start":1,"highlight_end":29},{"text":"                            let mut ips = String::new();","highlight_start":1,"highlight_end":57},{"text":"                            for cidr in iface.borrow().ip_addrs() {","highlight_start":1,"highlight_end":68},{"text":"                                ips += &format!(\"{}\\n\", cidr);","highlight_start":1,"highlight_end":63},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            ips","highlight_start":1,"highlight_end":32},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"set\" => {","highlight_start":1,"highlight_end":31},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            if !cur_value.is_empty() {","highlight_start":1,"highlight_end":55},{"text":"                                let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":68},{"text":"                                let mut cidrs = vec![];","highlight_start":1,"highlight_end":56},{"text":"                                mem::swap(cur_value, &mut cidrs);","highlight_start":1,"highlight_end":66},{"text":"                                iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":60},{"text":"                                    *s = From::from(cidrs);","highlight_start":1,"highlight_end":60},{"text":"                                });","highlight_start":1,"highlight_end":36},{"text":"                                notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":96},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"add\" => {","highlight_start":1,"highlight_end":31},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":64},{"text":"                            let mut cidrs = iface.ip_addrs().to_vec();","highlight_start":1,"highlight_end":71},{"text":"                            for cidr in cur_value {","highlight_start":1,"highlight_end":52},{"text":"                                cidrs.insert(0, *cidr);","highlight_start":1,"highlight_end":56},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":56},{"text":"                                *s = From::from(cidrs);","highlight_start":1,"highlight_end":56},{"text":"                            });","highlight_start":1,"highlight_end":32},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":92},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"rm\" => {","highlight_start":1,"highlight_end":30},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":64},{"text":"                            let mut cidrs = iface.ip_addrs().to_vec();","highlight_start":1,"highlight_end":71},{"text":"                            for cidr in cur_value {","highlight_start":1,"highlight_end":52},{"text":"                                let pre_retain_len = cidrs.len();","highlight_start":1,"highlight_end":66},{"text":"                                cidrs.retain(|&c| c != *cidr);","highlight_start":1,"highlight_end":63},{"text":"                                if pre_retain_len == cidrs.len() {","highlight_start":1,"highlight_end":67},{"text":"                                    return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":84},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":56},{"text":"                                *s = From::from(cidrs);","highlight_start":1,"highlight_end":56},{"text":"                            });","highlight_start":1,"highlight_end":32},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":92},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"remove this semicolon","code":null,"level":"help","spans":[{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4622,"byte_end":4623,"line_start":227,"line_end":227,"column_start":72,"column_end":73,"is_primary":true,"text":[{"text":"                    $(#[allow(unused_variables)] let $c = $c.clone();)*;","highlight_start":72,"highlight_end":73}],"label":null,"suggested_replacement":"","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":6209,"byte_end":6226,"line_start":266,"line_end":266,"column_start":42,"column_end":59,"is_primary":false,"text":[{"text":"            $(children.insert($e.into(), cfg_node!($($t)*));)*","highlight_start":42,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":6209,"byte_end":6226,"line_start":266,"line_end":266,"column_start":42,"column_end":59,"is_primary":false,"text":[{"text":"            $(children.insert($e.into(), cfg_node!($($t)*));)*","highlight_start":42,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/mod.rs","byte_start":1546,"byte_end":11568,"line_start":51,"line_end":273,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    cfg_node!{","highlight_start":5,"highlight_end":15},{"text":"        \"resolv\" => {","highlight_start":1,"highlight_end":22},{"text":"            \"nameserver\" => {","highlight_start":1,"highlight_end":30},{"text":"                rw [dns_config, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":70},{"text":"                || {","highlight_start":1,"highlight_end":21},{"text":"                    format!(\"{}\\n\", dns_config.borrow().name_server)","highlight_start":1,"highlight_end":69},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let ip = Ipv4Address::from_str(line.trim())","highlight_start":1,"highlight_end":68},{"text":"                            .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":79},{"text":"                        if !ip.is_unicast() {","highlight_start":1,"highlight_end":46},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(ip);","highlight_start":1,"highlight_end":47},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(ip) = *cur_value {","highlight_start":1,"highlight_end":51},{"text":"                        dns_config.borrow_mut().name_server = ip;","highlight_start":1,"highlight_end":66},{"text":"                        notifier.borrow_mut().schedule_notify(\"resolv/nameserver\");","highlight_start":1,"highlight_end":84},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    Ok(())","highlight_start":1,"highlight_end":27},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        \"route\" => {","highlight_start":1,"highlight_end":21},{"text":"            \"list\" => {","highlight_start":1,"highlight_end":24},{"text":"                ro [iface] || {","highlight_start":1,"highlight_end":32},{"text":"                    let mut gateway = None;","highlight_start":1,"highlight_end":44},{"text":"                    iface.borrow_mut().routes_mut().update(|map| {","highlight_start":1,"highlight_end":67},{"text":"                        gateway = map.get(&gateway_cidr()).map(|route| route.via_router);","highlight_start":1,"highlight_end":90},{"text":"                    });","highlight_start":1,"highlight_end":24},{"text":"                    if let Some(ip) = gateway {","highlight_start":1,"highlight_end":48},{"text":"                        format!(\"default via {}\\n\", ip)","highlight_start":1,"highlight_end":56},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        String::new()","highlight_start":1,"highlight_end":38},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            \"add\" => {","highlight_start":1,"highlight_end":23},{"text":"                wo [iface, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":65},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let default_gw = parse_default_gw(line)?;","highlight_start":1,"highlight_end":66},{"text":"                        if !default_gw.is_unicast() {","highlight_start":1,"highlight_end":54},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(default_gw);","highlight_start":1,"highlight_end":55},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(default_gw) = *cur_value {","highlight_start":1,"highlight_end":59},{"text":"                        if iface.borrow_mut().routes_mut().add_default_ipv4_route(default_gw).is_err() {","highlight_start":1,"highlight_end":105},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        notifier.borrow_mut().schedule_notify(\"route/list\");","highlight_start":1,"highlight_end":77},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            \"rm\" => {","highlight_start":1,"highlight_end":22},{"text":"                wo [iface, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":65},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let default_gw = parse_default_gw(line)?;","highlight_start":1,"highlight_end":66},{"text":"                        if !default_gw.is_unicast() {","highlight_start":1,"highlight_end":54},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(default_gw);","highlight_start":1,"highlight_end":55},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(default_gw) = *cur_value {","highlight_start":1,"highlight_end":59},{"text":"                        let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":60},{"text":"                        let mut gateway = None;","highlight_start":1,"highlight_end":48},{"text":"                        iface.routes_mut().update(|map| {","highlight_start":1,"highlight_end":58},{"text":"                            gateway = map.get(&gateway_cidr()).map(|route| route.via_router);","highlight_start":1,"highlight_end":94},{"text":"                        });","highlight_start":1,"highlight_end":28},{"text":"                        if gateway != Some(IpAddress::Ipv4(default_gw)) {","highlight_start":1,"highlight_end":74},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        iface.routes_mut().update(|map| {","highlight_start":1,"highlight_end":58},{"text":"                            map.remove(&gateway_cidr());","highlight_start":1,"highlight_end":57},{"text":"                        });","highlight_start":1,"highlight_end":28},{"text":"                        notifier.borrow_mut().schedule_notify(\"route/list\");","highlight_start":1,"highlight_end":77},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        \"ifaces\" => {","highlight_start":1,"highlight_end":22},{"text":"            \"eth0\" => {","highlight_start":1,"highlight_end":24},{"text":"                \"mac\" => {","highlight_start":1,"highlight_end":27},{"text":"                    rw [iface, notifier] (Option<EthernetAddress>, None)","highlight_start":1,"highlight_end":73},{"text":"                    || {","highlight_start":1,"highlight_end":25},{"text":"                        format!(\"{}\\n\", iface.borrow().ethernet_addr())","highlight_start":1,"highlight_end":72},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    |cur_value, line| {","highlight_start":1,"highlight_end":40},{"text":"                        if cur_value.is_none() {","highlight_start":1,"highlight_end":49},{"text":"                            let mac = EthernetAddress::from_str(line).","highlight_start":1,"highlight_end":71},{"text":"                                map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":82},{"text":"                            if !mac.is_unicast() {","highlight_start":1,"highlight_end":51},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            *cur_value = Some(mac);","highlight_start":1,"highlight_end":52},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        } else {","highlight_start":1,"highlight_end":33},{"text":"                            Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":68},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    |cur_value| {","highlight_start":1,"highlight_end":34},{"text":"                        if let Some(mac) = *cur_value {","highlight_start":1,"highlight_end":56},{"text":"                            iface.borrow_mut().set_ethernet_addr(mac);","highlight_start":1,"highlight_end":71},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/mac\");","highlight_start":1,"highlight_end":86},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"                \"addr\" => {","highlight_start":1,"highlight_end":28},{"text":"                    \"list\" => {","highlight_start":1,"highlight_end":32},{"text":"                        ro [iface]","highlight_start":1,"highlight_end":35},{"text":"                        || {","highlight_start":1,"highlight_end":29},{"text":"                            let mut ips = String::new();","highlight_start":1,"highlight_end":57},{"text":"                            for cidr in iface.borrow().ip_addrs() {","highlight_start":1,"highlight_end":68},{"text":"                                ips += &format!(\"{}\\n\", cidr);","highlight_start":1,"highlight_end":63},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            ips","highlight_start":1,"highlight_end":32},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"set\" => {","highlight_start":1,"highlight_end":31},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            if !cur_value.is_empty() {","highlight_start":1,"highlight_end":55},{"text":"                                let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":68},{"text":"                                let mut cidrs = vec![];","highlight_start":1,"highlight_end":56},{"text":"                                mem::swap(cur_value, &mut cidrs);","highlight_start":1,"highlight_end":66},{"text":"                                iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":60},{"text":"                                    *s = From::from(cidrs);","highlight_start":1,"highlight_end":60},{"text":"                                });","highlight_start":1,"highlight_end":36},{"text":"                                notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":96},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"add\" => {","highlight_start":1,"highlight_end":31},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":64},{"text":"                            let mut cidrs = iface.ip_addrs().to_vec();","highlight_start":1,"highlight_end":71},{"text":"                            for cidr in cur_value {","highlight_start":1,"highlight_end":52},{"text":"                                cidrs.insert(0, *cidr);","highlight_start":1,"highlight_end":56},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":56},{"text":"                                *s = From::from(cidrs);","highlight_start":1,"highlight_end":56},{"text":"                            });","highlight_start":1,"highlight_end":32},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":92},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"rm\" => {","highlight_start":1,"highlight_end":30},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":64},{"text":"                            let mut cidrs = iface.ip_addrs().to_vec();","highlight_start":1,"highlight_end":71},{"text":"                            for cidr in cur_value {","highlight_start":1,"highlight_end":52},{"text":"                                let pre_retain_len = cidrs.len();","highlight_start":1,"highlight_end":66},{"text":"                                cidrs.retain(|&c| c != *cidr);","highlight_start":1,"highlight_end":63},{"text":"                                if pre_retain_len == cidrs.len() {","highlight_start":1,"highlight_end":67},{"text":"                                    return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":84},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":56},{"text":"                                *s = From::from(cidrs);","highlight_start":1,"highlight_end":56},{"text":"                            });","highlight_start":1,"highlight_end":32},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":92},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unnecessary trailing semicolon\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/smolnetd/scheme/netcfg/nodes.rs:227:72\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m227\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m                    $(#[allow(unused_variables)] let $c = $c.clone();)*;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this semicolon\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0msrc/smolnetd/scheme/netcfg/mod.rs:51:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m51\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    cfg_node!{\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m52\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        \"resolv\" => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m53\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            \"nameserver\" => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m54\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                rw [dns_config, notifier] (Option<Ipv4Address>, None)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m272\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m273\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_____-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `cfg_node` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"unnecessary trailing semicolon","code":{"code":"redundant_semicolons","explanation":null},"level":"warning","spans":[{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4817,"byte_end":4818,"line_start":231,"line_end":231,"column_start":72,"column_end":73,"is_primary":true,"text":[{"text":"                    $(#[allow(unused_variables)] let $c = $c.clone();)*;","highlight_start":72,"highlight_end":73}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":6209,"byte_end":6226,"line_start":266,"line_end":266,"column_start":42,"column_end":59,"is_primary":false,"text":[{"text":"            $(children.insert($e.into(), cfg_node!($($t)*));)*","highlight_start":42,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":6209,"byte_end":6226,"line_start":266,"line_end":266,"column_start":42,"column_end":59,"is_primary":false,"text":[{"text":"            $(children.insert($e.into(), cfg_node!($($t)*));)*","highlight_start":42,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/mod.rs","byte_start":1546,"byte_end":11568,"line_start":51,"line_end":273,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    cfg_node!{","highlight_start":5,"highlight_end":15},{"text":"        \"resolv\" => {","highlight_start":1,"highlight_end":22},{"text":"            \"nameserver\" => {","highlight_start":1,"highlight_end":30},{"text":"                rw [dns_config, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":70},{"text":"                || {","highlight_start":1,"highlight_end":21},{"text":"                    format!(\"{}\\n\", dns_config.borrow().name_server)","highlight_start":1,"highlight_end":69},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let ip = Ipv4Address::from_str(line.trim())","highlight_start":1,"highlight_end":68},{"text":"                            .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":79},{"text":"                        if !ip.is_unicast() {","highlight_start":1,"highlight_end":46},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(ip);","highlight_start":1,"highlight_end":47},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(ip) = *cur_value {","highlight_start":1,"highlight_end":51},{"text":"                        dns_config.borrow_mut().name_server = ip;","highlight_start":1,"highlight_end":66},{"text":"                        notifier.borrow_mut().schedule_notify(\"resolv/nameserver\");","highlight_start":1,"highlight_end":84},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    Ok(())","highlight_start":1,"highlight_end":27},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        \"route\" => {","highlight_start":1,"highlight_end":21},{"text":"            \"list\" => {","highlight_start":1,"highlight_end":24},{"text":"                ro [iface] || {","highlight_start":1,"highlight_end":32},{"text":"                    let mut gateway = None;","highlight_start":1,"highlight_end":44},{"text":"                    iface.borrow_mut().routes_mut().update(|map| {","highlight_start":1,"highlight_end":67},{"text":"                        gateway = map.get(&gateway_cidr()).map(|route| route.via_router);","highlight_start":1,"highlight_end":90},{"text":"                    });","highlight_start":1,"highlight_end":24},{"text":"                    if let Some(ip) = gateway {","highlight_start":1,"highlight_end":48},{"text":"                        format!(\"default via {}\\n\", ip)","highlight_start":1,"highlight_end":56},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        String::new()","highlight_start":1,"highlight_end":38},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            \"add\" => {","highlight_start":1,"highlight_end":23},{"text":"                wo [iface, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":65},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let default_gw = parse_default_gw(line)?;","highlight_start":1,"highlight_end":66},{"text":"                        if !default_gw.is_unicast() {","highlight_start":1,"highlight_end":54},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(default_gw);","highlight_start":1,"highlight_end":55},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(default_gw) = *cur_value {","highlight_start":1,"highlight_end":59},{"text":"                        if iface.borrow_mut().routes_mut().add_default_ipv4_route(default_gw).is_err() {","highlight_start":1,"highlight_end":105},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        notifier.borrow_mut().schedule_notify(\"route/list\");","highlight_start":1,"highlight_end":77},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            \"rm\" => {","highlight_start":1,"highlight_end":22},{"text":"                wo [iface, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":65},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let default_gw = parse_default_gw(line)?;","highlight_start":1,"highlight_end":66},{"text":"                        if !default_gw.is_unicast() {","highlight_start":1,"highlight_end":54},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(default_gw);","highlight_start":1,"highlight_end":55},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(default_gw) = *cur_value {","highlight_start":1,"highlight_end":59},{"text":"                        let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":60},{"text":"                        let mut gateway = None;","highlight_start":1,"highlight_end":48},{"text":"                        iface.routes_mut().update(|map| {","highlight_start":1,"highlight_end":58},{"text":"                            gateway = map.get(&gateway_cidr()).map(|route| route.via_router);","highlight_start":1,"highlight_end":94},{"text":"                        });","highlight_start":1,"highlight_end":28},{"text":"                        if gateway != Some(IpAddress::Ipv4(default_gw)) {","highlight_start":1,"highlight_end":74},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        iface.routes_mut().update(|map| {","highlight_start":1,"highlight_end":58},{"text":"                            map.remove(&gateway_cidr());","highlight_start":1,"highlight_end":57},{"text":"                        });","highlight_start":1,"highlight_end":28},{"text":"                        notifier.borrow_mut().schedule_notify(\"route/list\");","highlight_start":1,"highlight_end":77},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        \"ifaces\" => {","highlight_start":1,"highlight_end":22},{"text":"            \"eth0\" => {","highlight_start":1,"highlight_end":24},{"text":"                \"mac\" => {","highlight_start":1,"highlight_end":27},{"text":"                    rw [iface, notifier] (Option<EthernetAddress>, None)","highlight_start":1,"highlight_end":73},{"text":"                    || {","highlight_start":1,"highlight_end":25},{"text":"                        format!(\"{}\\n\", iface.borrow().ethernet_addr())","highlight_start":1,"highlight_end":72},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    |cur_value, line| {","highlight_start":1,"highlight_end":40},{"text":"                        if cur_value.is_none() {","highlight_start":1,"highlight_end":49},{"text":"                            let mac = EthernetAddress::from_str(line).","highlight_start":1,"highlight_end":71},{"text":"                                map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":82},{"text":"                            if !mac.is_unicast() {","highlight_start":1,"highlight_end":51},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            *cur_value = Some(mac);","highlight_start":1,"highlight_end":52},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        } else {","highlight_start":1,"highlight_end":33},{"text":"                            Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":68},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    |cur_value| {","highlight_start":1,"highlight_end":34},{"text":"                        if let Some(mac) = *cur_value {","highlight_start":1,"highlight_end":56},{"text":"                            iface.borrow_mut().set_ethernet_addr(mac);","highlight_start":1,"highlight_end":71},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/mac\");","highlight_start":1,"highlight_end":86},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"                \"addr\" => {","highlight_start":1,"highlight_end":28},{"text":"                    \"list\" => {","highlight_start":1,"highlight_end":32},{"text":"                        ro [iface]","highlight_start":1,"highlight_end":35},{"text":"                        || {","highlight_start":1,"highlight_end":29},{"text":"                            let mut ips = String::new();","highlight_start":1,"highlight_end":57},{"text":"                            for cidr in iface.borrow().ip_addrs() {","highlight_start":1,"highlight_end":68},{"text":"                                ips += &format!(\"{}\\n\", cidr);","highlight_start":1,"highlight_end":63},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            ips","highlight_start":1,"highlight_end":32},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"set\" => {","highlight_start":1,"highlight_end":31},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            if !cur_value.is_empty() {","highlight_start":1,"highlight_end":55},{"text":"                                let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":68},{"text":"                                let mut cidrs = vec![];","highlight_start":1,"highlight_end":56},{"text":"                                mem::swap(cur_value, &mut cidrs);","highlight_start":1,"highlight_end":66},{"text":"                                iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":60},{"text":"                                    *s = From::from(cidrs);","highlight_start":1,"highlight_end":60},{"text":"                                });","highlight_start":1,"highlight_end":36},{"text":"                                notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":96},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"add\" => {","highlight_start":1,"highlight_end":31},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":64},{"text":"                            let mut cidrs = iface.ip_addrs().to_vec();","highlight_start":1,"highlight_end":71},{"text":"                            for cidr in cur_value {","highlight_start":1,"highlight_end":52},{"text":"                                cidrs.insert(0, *cidr);","highlight_start":1,"highlight_end":56},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":56},{"text":"                                *s = From::from(cidrs);","highlight_start":1,"highlight_end":56},{"text":"                            });","highlight_start":1,"highlight_end":32},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":92},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"rm\" => {","highlight_start":1,"highlight_end":30},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":64},{"text":"                            let mut cidrs = iface.ip_addrs().to_vec();","highlight_start":1,"highlight_end":71},{"text":"                            for cidr in cur_value {","highlight_start":1,"highlight_end":52},{"text":"                                let pre_retain_len = cidrs.len();","highlight_start":1,"highlight_end":66},{"text":"                                cidrs.retain(|&c| c != *cidr);","highlight_start":1,"highlight_end":63},{"text":"                                if pre_retain_len == cidrs.len() {","highlight_start":1,"highlight_end":67},{"text":"                                    return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":84},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":56},{"text":"                                *s = From::from(cidrs);","highlight_start":1,"highlight_end":56},{"text":"                            });","highlight_start":1,"highlight_end":32},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":92},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"remove this semicolon","code":null,"level":"help","spans":[{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4817,"byte_end":4818,"line_start":231,"line_end":231,"column_start":72,"column_end":73,"is_primary":true,"text":[{"text":"                    $(#[allow(unused_variables)] let $c = $c.clone();)*;","highlight_start":72,"highlight_end":73}],"label":null,"suggested_replacement":"","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":6209,"byte_end":6226,"line_start":266,"line_end":266,"column_start":42,"column_end":59,"is_primary":false,"text":[{"text":"            $(children.insert($e.into(), cfg_node!($($t)*));)*","highlight_start":42,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":6209,"byte_end":6226,"line_start":266,"line_end":266,"column_start":42,"column_end":59,"is_primary":false,"text":[{"text":"            $(children.insert($e.into(), cfg_node!($($t)*));)*","highlight_start":42,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/mod.rs","byte_start":1546,"byte_end":11568,"line_start":51,"line_end":273,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    cfg_node!{","highlight_start":5,"highlight_end":15},{"text":"        \"resolv\" => {","highlight_start":1,"highlight_end":22},{"text":"            \"nameserver\" => {","highlight_start":1,"highlight_end":30},{"text":"                rw [dns_config, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":70},{"text":"                || {","highlight_start":1,"highlight_end":21},{"text":"                    format!(\"{}\\n\", dns_config.borrow().name_server)","highlight_start":1,"highlight_end":69},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let ip = Ipv4Address::from_str(line.trim())","highlight_start":1,"highlight_end":68},{"text":"                            .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":79},{"text":"                        if !ip.is_unicast() {","highlight_start":1,"highlight_end":46},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(ip);","highlight_start":1,"highlight_end":47},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(ip) = *cur_value {","highlight_start":1,"highlight_end":51},{"text":"                        dns_config.borrow_mut().name_server = ip;","highlight_start":1,"highlight_end":66},{"text":"                        notifier.borrow_mut().schedule_notify(\"resolv/nameserver\");","highlight_start":1,"highlight_end":84},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    Ok(())","highlight_start":1,"highlight_end":27},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        \"route\" => {","highlight_start":1,"highlight_end":21},{"text":"            \"list\" => {","highlight_start":1,"highlight_end":24},{"text":"                ro [iface] || {","highlight_start":1,"highlight_end":32},{"text":"                    let mut gateway = None;","highlight_start":1,"highlight_end":44},{"text":"                    iface.borrow_mut().routes_mut().update(|map| {","highlight_start":1,"highlight_end":67},{"text":"                        gateway = map.get(&gateway_cidr()).map(|route| route.via_router);","highlight_start":1,"highlight_end":90},{"text":"                    });","highlight_start":1,"highlight_end":24},{"text":"                    if let Some(ip) = gateway {","highlight_start":1,"highlight_end":48},{"text":"                        format!(\"default via {}\\n\", ip)","highlight_start":1,"highlight_end":56},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        String::new()","highlight_start":1,"highlight_end":38},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            \"add\" => {","highlight_start":1,"highlight_end":23},{"text":"                wo [iface, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":65},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let default_gw = parse_default_gw(line)?;","highlight_start":1,"highlight_end":66},{"text":"                        if !default_gw.is_unicast() {","highlight_start":1,"highlight_end":54},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(default_gw);","highlight_start":1,"highlight_end":55},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(default_gw) = *cur_value {","highlight_start":1,"highlight_end":59},{"text":"                        if iface.borrow_mut().routes_mut().add_default_ipv4_route(default_gw).is_err() {","highlight_start":1,"highlight_end":105},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        notifier.borrow_mut().schedule_notify(\"route/list\");","highlight_start":1,"highlight_end":77},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            \"rm\" => {","highlight_start":1,"highlight_end":22},{"text":"                wo [iface, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":65},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let default_gw = parse_default_gw(line)?;","highlight_start":1,"highlight_end":66},{"text":"                        if !default_gw.is_unicast() {","highlight_start":1,"highlight_end":54},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(default_gw);","highlight_start":1,"highlight_end":55},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(default_gw) = *cur_value {","highlight_start":1,"highlight_end":59},{"text":"                        let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":60},{"text":"                        let mut gateway = None;","highlight_start":1,"highlight_end":48},{"text":"                        iface.routes_mut().update(|map| {","highlight_start":1,"highlight_end":58},{"text":"                            gateway = map.get(&gateway_cidr()).map(|route| route.via_router);","highlight_start":1,"highlight_end":94},{"text":"                        });","highlight_start":1,"highlight_end":28},{"text":"                        if gateway != Some(IpAddress::Ipv4(default_gw)) {","highlight_start":1,"highlight_end":74},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        iface.routes_mut().update(|map| {","highlight_start":1,"highlight_end":58},{"text":"                            map.remove(&gateway_cidr());","highlight_start":1,"highlight_end":57},{"text":"                        });","highlight_start":1,"highlight_end":28},{"text":"                        notifier.borrow_mut().schedule_notify(\"route/list\");","highlight_start":1,"highlight_end":77},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        \"ifaces\" => {","highlight_start":1,"highlight_end":22},{"text":"            \"eth0\" => {","highlight_start":1,"highlight_end":24},{"text":"                \"mac\" => {","highlight_start":1,"highlight_end":27},{"text":"                    rw [iface, notifier] (Option<EthernetAddress>, None)","highlight_start":1,"highlight_end":73},{"text":"                    || {","highlight_start":1,"highlight_end":25},{"text":"                        format!(\"{}\\n\", iface.borrow().ethernet_addr())","highlight_start":1,"highlight_end":72},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    |cur_value, line| {","highlight_start":1,"highlight_end":40},{"text":"                        if cur_value.is_none() {","highlight_start":1,"highlight_end":49},{"text":"                            let mac = EthernetAddress::from_str(line).","highlight_start":1,"highlight_end":71},{"text":"                                map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":82},{"text":"                            if !mac.is_unicast() {","highlight_start":1,"highlight_end":51},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            *cur_value = Some(mac);","highlight_start":1,"highlight_end":52},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        } else {","highlight_start":1,"highlight_end":33},{"text":"                            Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":68},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    |cur_value| {","highlight_start":1,"highlight_end":34},{"text":"                        if let Some(mac) = *cur_value {","highlight_start":1,"highlight_end":56},{"text":"                            iface.borrow_mut().set_ethernet_addr(mac);","highlight_start":1,"highlight_end":71},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/mac\");","highlight_start":1,"highlight_end":86},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"                \"addr\" => {","highlight_start":1,"highlight_end":28},{"text":"                    \"list\" => {","highlight_start":1,"highlight_end":32},{"text":"                        ro [iface]","highlight_start":1,"highlight_end":35},{"text":"                        || {","highlight_start":1,"highlight_end":29},{"text":"                            let mut ips = String::new();","highlight_start":1,"highlight_end":57},{"text":"                            for cidr in iface.borrow().ip_addrs() {","highlight_start":1,"highlight_end":68},{"text":"                                ips += &format!(\"{}\\n\", cidr);","highlight_start":1,"highlight_end":63},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            ips","highlight_start":1,"highlight_end":32},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"set\" => {","highlight_start":1,"highlight_end":31},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            if !cur_value.is_empty() {","highlight_start":1,"highlight_end":55},{"text":"                                let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":68},{"text":"                                let mut cidrs = vec![];","highlight_start":1,"highlight_end":56},{"text":"                                mem::swap(cur_value, &mut cidrs);","highlight_start":1,"highlight_end":66},{"text":"                                iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":60},{"text":"                                    *s = From::from(cidrs);","highlight_start":1,"highlight_end":60},{"text":"                                });","highlight_start":1,"highlight_end":36},{"text":"                                notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":96},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"add\" => {","highlight_start":1,"highlight_end":31},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":64},{"text":"                            let mut cidrs = iface.ip_addrs().to_vec();","highlight_start":1,"highlight_end":71},{"text":"                            for cidr in cur_value {","highlight_start":1,"highlight_end":52},{"text":"                                cidrs.insert(0, *cidr);","highlight_start":1,"highlight_end":56},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":56},{"text":"                                *s = From::from(cidrs);","highlight_start":1,"highlight_end":56},{"text":"                            });","highlight_start":1,"highlight_end":32},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":92},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"rm\" => {","highlight_start":1,"highlight_end":30},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":64},{"text":"                            let mut cidrs = iface.ip_addrs().to_vec();","highlight_start":1,"highlight_end":71},{"text":"                            for cidr in cur_value {","highlight_start":1,"highlight_end":52},{"text":"                                let pre_retain_len = cidrs.len();","highlight_start":1,"highlight_end":66},{"text":"                                cidrs.retain(|&c| c != *cidr);","highlight_start":1,"highlight_end":63},{"text":"                                if pre_retain_len == cidrs.len() {","highlight_start":1,"highlight_end":67},{"text":"                                    return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":84},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":56},{"text":"                                *s = From::from(cidrs);","highlight_start":1,"highlight_end":56},{"text":"                            });","highlight_start":1,"highlight_end":32},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":92},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unnecessary trailing semicolon\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/smolnetd/scheme/netcfg/nodes.rs:231:72\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m231\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m                    $(#[allow(unused_variables)] let $c = $c.clone();)*;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this semicolon\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0msrc/smolnetd/scheme/netcfg/mod.rs:51:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m51\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    cfg_node!{\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m52\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        \"resolv\" => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m53\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            \"nameserver\" => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m54\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                rw [dns_config, notifier] (Option<Ipv4Address>, None)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m272\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m273\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_____-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `cfg_node` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"unnecessary trailing semicolon","code":{"code":"redundant_semicolons","explanation":null},"level":"warning","spans":[{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4456,"byte_end":4457,"line_start":224,"line_end":224,"column_start":64,"column_end":65,"is_primary":true,"text":[{"text":"            $(#[allow(unused_variables)] let $c = $c.clone();)*;","highlight_start":64,"highlight_end":65}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":6209,"byte_end":6226,"line_start":266,"line_end":266,"column_start":42,"column_end":59,"is_primary":false,"text":[{"text":"            $(children.insert($e.into(), cfg_node!($($t)*));)*","highlight_start":42,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":6209,"byte_end":6226,"line_start":266,"line_end":266,"column_start":42,"column_end":59,"is_primary":false,"text":[{"text":"            $(children.insert($e.into(), cfg_node!($($t)*));)*","highlight_start":42,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/mod.rs","byte_start":1546,"byte_end":11568,"line_start":51,"line_end":273,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    cfg_node!{","highlight_start":5,"highlight_end":15},{"text":"        \"resolv\" => {","highlight_start":1,"highlight_end":22},{"text":"            \"nameserver\" => {","highlight_start":1,"highlight_end":30},{"text":"                rw [dns_config, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":70},{"text":"                || {","highlight_start":1,"highlight_end":21},{"text":"                    format!(\"{}\\n\", dns_config.borrow().name_server)","highlight_start":1,"highlight_end":69},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let ip = Ipv4Address::from_str(line.trim())","highlight_start":1,"highlight_end":68},{"text":"                            .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":79},{"text":"                        if !ip.is_unicast() {","highlight_start":1,"highlight_end":46},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(ip);","highlight_start":1,"highlight_end":47},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(ip) = *cur_value {","highlight_start":1,"highlight_end":51},{"text":"                        dns_config.borrow_mut().name_server = ip;","highlight_start":1,"highlight_end":66},{"text":"                        notifier.borrow_mut().schedule_notify(\"resolv/nameserver\");","highlight_start":1,"highlight_end":84},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    Ok(())","highlight_start":1,"highlight_end":27},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        \"route\" => {","highlight_start":1,"highlight_end":21},{"text":"            \"list\" => {","highlight_start":1,"highlight_end":24},{"text":"                ro [iface] || {","highlight_start":1,"highlight_end":32},{"text":"                    let mut gateway = None;","highlight_start":1,"highlight_end":44},{"text":"                    iface.borrow_mut().routes_mut().update(|map| {","highlight_start":1,"highlight_end":67},{"text":"                        gateway = map.get(&gateway_cidr()).map(|route| route.via_router);","highlight_start":1,"highlight_end":90},{"text":"                    });","highlight_start":1,"highlight_end":24},{"text":"                    if let Some(ip) = gateway {","highlight_start":1,"highlight_end":48},{"text":"                        format!(\"default via {}\\n\", ip)","highlight_start":1,"highlight_end":56},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        String::new()","highlight_start":1,"highlight_end":38},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            \"add\" => {","highlight_start":1,"highlight_end":23},{"text":"                wo [iface, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":65},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let default_gw = parse_default_gw(line)?;","highlight_start":1,"highlight_end":66},{"text":"                        if !default_gw.is_unicast() {","highlight_start":1,"highlight_end":54},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(default_gw);","highlight_start":1,"highlight_end":55},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(default_gw) = *cur_value {","highlight_start":1,"highlight_end":59},{"text":"                        if iface.borrow_mut().routes_mut().add_default_ipv4_route(default_gw).is_err() {","highlight_start":1,"highlight_end":105},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        notifier.borrow_mut().schedule_notify(\"route/list\");","highlight_start":1,"highlight_end":77},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            \"rm\" => {","highlight_start":1,"highlight_end":22},{"text":"                wo [iface, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":65},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let default_gw = parse_default_gw(line)?;","highlight_start":1,"highlight_end":66},{"text":"                        if !default_gw.is_unicast() {","highlight_start":1,"highlight_end":54},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(default_gw);","highlight_start":1,"highlight_end":55},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(default_gw) = *cur_value {","highlight_start":1,"highlight_end":59},{"text":"                        let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":60},{"text":"                        let mut gateway = None;","highlight_start":1,"highlight_end":48},{"text":"                        iface.routes_mut().update(|map| {","highlight_start":1,"highlight_end":58},{"text":"                            gateway = map.get(&gateway_cidr()).map(|route| route.via_router);","highlight_start":1,"highlight_end":94},{"text":"                        });","highlight_start":1,"highlight_end":28},{"text":"                        if gateway != Some(IpAddress::Ipv4(default_gw)) {","highlight_start":1,"highlight_end":74},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        iface.routes_mut().update(|map| {","highlight_start":1,"highlight_end":58},{"text":"                            map.remove(&gateway_cidr());","highlight_start":1,"highlight_end":57},{"text":"                        });","highlight_start":1,"highlight_end":28},{"text":"                        notifier.borrow_mut().schedule_notify(\"route/list\");","highlight_start":1,"highlight_end":77},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        \"ifaces\" => {","highlight_start":1,"highlight_end":22},{"text":"            \"eth0\" => {","highlight_start":1,"highlight_end":24},{"text":"                \"mac\" => {","highlight_start":1,"highlight_end":27},{"text":"                    rw [iface, notifier] (Option<EthernetAddress>, None)","highlight_start":1,"highlight_end":73},{"text":"                    || {","highlight_start":1,"highlight_end":25},{"text":"                        format!(\"{}\\n\", iface.borrow().ethernet_addr())","highlight_start":1,"highlight_end":72},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    |cur_value, line| {","highlight_start":1,"highlight_end":40},{"text":"                        if cur_value.is_none() {","highlight_start":1,"highlight_end":49},{"text":"                            let mac = EthernetAddress::from_str(line).","highlight_start":1,"highlight_end":71},{"text":"                                map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":82},{"text":"                            if !mac.is_unicast() {","highlight_start":1,"highlight_end":51},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            *cur_value = Some(mac);","highlight_start":1,"highlight_end":52},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        } else {","highlight_start":1,"highlight_end":33},{"text":"                            Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":68},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    |cur_value| {","highlight_start":1,"highlight_end":34},{"text":"                        if let Some(mac) = *cur_value {","highlight_start":1,"highlight_end":56},{"text":"                            iface.borrow_mut().set_ethernet_addr(mac);","highlight_start":1,"highlight_end":71},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/mac\");","highlight_start":1,"highlight_end":86},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"                \"addr\" => {","highlight_start":1,"highlight_end":28},{"text":"                    \"list\" => {","highlight_start":1,"highlight_end":32},{"text":"                        ro [iface]","highlight_start":1,"highlight_end":35},{"text":"                        || {","highlight_start":1,"highlight_end":29},{"text":"                            let mut ips = String::new();","highlight_start":1,"highlight_end":57},{"text":"                            for cidr in iface.borrow().ip_addrs() {","highlight_start":1,"highlight_end":68},{"text":"                                ips += &format!(\"{}\\n\", cidr);","highlight_start":1,"highlight_end":63},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            ips","highlight_start":1,"highlight_end":32},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"set\" => {","highlight_start":1,"highlight_end":31},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            if !cur_value.is_empty() {","highlight_start":1,"highlight_end":55},{"text":"                                let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":68},{"text":"                                let mut cidrs = vec![];","highlight_start":1,"highlight_end":56},{"text":"                                mem::swap(cur_value, &mut cidrs);","highlight_start":1,"highlight_end":66},{"text":"                                iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":60},{"text":"                                    *s = From::from(cidrs);","highlight_start":1,"highlight_end":60},{"text":"                                });","highlight_start":1,"highlight_end":36},{"text":"                                notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":96},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"add\" => {","highlight_start":1,"highlight_end":31},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":64},{"text":"                            let mut cidrs = iface.ip_addrs().to_vec();","highlight_start":1,"highlight_end":71},{"text":"                            for cidr in cur_value {","highlight_start":1,"highlight_end":52},{"text":"                                cidrs.insert(0, *cidr);","highlight_start":1,"highlight_end":56},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":56},{"text":"                                *s = From::from(cidrs);","highlight_start":1,"highlight_end":56},{"text":"                            });","highlight_start":1,"highlight_end":32},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":92},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"rm\" => {","highlight_start":1,"highlight_end":30},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":64},{"text":"                            let mut cidrs = iface.ip_addrs().to_vec();","highlight_start":1,"highlight_end":71},{"text":"                            for cidr in cur_value {","highlight_start":1,"highlight_end":52},{"text":"                                let pre_retain_len = cidrs.len();","highlight_start":1,"highlight_end":66},{"text":"                                cidrs.retain(|&c| c != *cidr);","highlight_start":1,"highlight_end":63},{"text":"                                if pre_retain_len == cidrs.len() {","highlight_start":1,"highlight_end":67},{"text":"                                    return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":84},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":56},{"text":"                                *s = From::from(cidrs);","highlight_start":1,"highlight_end":56},{"text":"                            });","highlight_start":1,"highlight_end":32},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":92},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"remove this semicolon","code":null,"level":"help","spans":[{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4456,"byte_end":4457,"line_start":224,"line_end":224,"column_start":64,"column_end":65,"is_primary":true,"text":[{"text":"            $(#[allow(unused_variables)] let $c = $c.clone();)*;","highlight_start":64,"highlight_end":65}],"label":null,"suggested_replacement":"","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":6209,"byte_end":6226,"line_start":266,"line_end":266,"column_start":42,"column_end":59,"is_primary":false,"text":[{"text":"            $(children.insert($e.into(), cfg_node!($($t)*));)*","highlight_start":42,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":6209,"byte_end":6226,"line_start":266,"line_end":266,"column_start":42,"column_end":59,"is_primary":false,"text":[{"text":"            $(children.insert($e.into(), cfg_node!($($t)*));)*","highlight_start":42,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/mod.rs","byte_start":1546,"byte_end":11568,"line_start":51,"line_end":273,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    cfg_node!{","highlight_start":5,"highlight_end":15},{"text":"        \"resolv\" => {","highlight_start":1,"highlight_end":22},{"text":"            \"nameserver\" => {","highlight_start":1,"highlight_end":30},{"text":"                rw [dns_config, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":70},{"text":"                || {","highlight_start":1,"highlight_end":21},{"text":"                    format!(\"{}\\n\", dns_config.borrow().name_server)","highlight_start":1,"highlight_end":69},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let ip = Ipv4Address::from_str(line.trim())","highlight_start":1,"highlight_end":68},{"text":"                            .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":79},{"text":"                        if !ip.is_unicast() {","highlight_start":1,"highlight_end":46},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(ip);","highlight_start":1,"highlight_end":47},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(ip) = *cur_value {","highlight_start":1,"highlight_end":51},{"text":"                        dns_config.borrow_mut().name_server = ip;","highlight_start":1,"highlight_end":66},{"text":"                        notifier.borrow_mut().schedule_notify(\"resolv/nameserver\");","highlight_start":1,"highlight_end":84},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    Ok(())","highlight_start":1,"highlight_end":27},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        \"route\" => {","highlight_start":1,"highlight_end":21},{"text":"            \"list\" => {","highlight_start":1,"highlight_end":24},{"text":"                ro [iface] || {","highlight_start":1,"highlight_end":32},{"text":"                    let mut gateway = None;","highlight_start":1,"highlight_end":44},{"text":"                    iface.borrow_mut().routes_mut().update(|map| {","highlight_start":1,"highlight_end":67},{"text":"                        gateway = map.get(&gateway_cidr()).map(|route| route.via_router);","highlight_start":1,"highlight_end":90},{"text":"                    });","highlight_start":1,"highlight_end":24},{"text":"                    if let Some(ip) = gateway {","highlight_start":1,"highlight_end":48},{"text":"                        format!(\"default via {}\\n\", ip)","highlight_start":1,"highlight_end":56},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        String::new()","highlight_start":1,"highlight_end":38},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            \"add\" => {","highlight_start":1,"highlight_end":23},{"text":"                wo [iface, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":65},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let default_gw = parse_default_gw(line)?;","highlight_start":1,"highlight_end":66},{"text":"                        if !default_gw.is_unicast() {","highlight_start":1,"highlight_end":54},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(default_gw);","highlight_start":1,"highlight_end":55},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(default_gw) = *cur_value {","highlight_start":1,"highlight_end":59},{"text":"                        if iface.borrow_mut().routes_mut().add_default_ipv4_route(default_gw).is_err() {","highlight_start":1,"highlight_end":105},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        notifier.borrow_mut().schedule_notify(\"route/list\");","highlight_start":1,"highlight_end":77},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            \"rm\" => {","highlight_start":1,"highlight_end":22},{"text":"                wo [iface, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":65},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let default_gw = parse_default_gw(line)?;","highlight_start":1,"highlight_end":66},{"text":"                        if !default_gw.is_unicast() {","highlight_start":1,"highlight_end":54},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(default_gw);","highlight_start":1,"highlight_end":55},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(default_gw) = *cur_value {","highlight_start":1,"highlight_end":59},{"text":"                        let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":60},{"text":"                        let mut gateway = None;","highlight_start":1,"highlight_end":48},{"text":"                        iface.routes_mut().update(|map| {","highlight_start":1,"highlight_end":58},{"text":"                            gateway = map.get(&gateway_cidr()).map(|route| route.via_router);","highlight_start":1,"highlight_end":94},{"text":"                        });","highlight_start":1,"highlight_end":28},{"text":"                        if gateway != Some(IpAddress::Ipv4(default_gw)) {","highlight_start":1,"highlight_end":74},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        iface.routes_mut().update(|map| {","highlight_start":1,"highlight_end":58},{"text":"                            map.remove(&gateway_cidr());","highlight_start":1,"highlight_end":57},{"text":"                        });","highlight_start":1,"highlight_end":28},{"text":"                        notifier.borrow_mut().schedule_notify(\"route/list\");","highlight_start":1,"highlight_end":77},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        \"ifaces\" => {","highlight_start":1,"highlight_end":22},{"text":"            \"eth0\" => {","highlight_start":1,"highlight_end":24},{"text":"                \"mac\" => {","highlight_start":1,"highlight_end":27},{"text":"                    rw [iface, notifier] (Option<EthernetAddress>, None)","highlight_start":1,"highlight_end":73},{"text":"                    || {","highlight_start":1,"highlight_end":25},{"text":"                        format!(\"{}\\n\", iface.borrow().ethernet_addr())","highlight_start":1,"highlight_end":72},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    |cur_value, line| {","highlight_start":1,"highlight_end":40},{"text":"                        if cur_value.is_none() {","highlight_start":1,"highlight_end":49},{"text":"                            let mac = EthernetAddress::from_str(line).","highlight_start":1,"highlight_end":71},{"text":"                                map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":82},{"text":"                            if !mac.is_unicast() {","highlight_start":1,"highlight_end":51},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            *cur_value = Some(mac);","highlight_start":1,"highlight_end":52},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        } else {","highlight_start":1,"highlight_end":33},{"text":"                            Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":68},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    |cur_value| {","highlight_start":1,"highlight_end":34},{"text":"                        if let Some(mac) = *cur_value {","highlight_start":1,"highlight_end":56},{"text":"                            iface.borrow_mut().set_ethernet_addr(mac);","highlight_start":1,"highlight_end":71},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/mac\");","highlight_start":1,"highlight_end":86},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"                \"addr\" => {","highlight_start":1,"highlight_end":28},{"text":"                    \"list\" => {","highlight_start":1,"highlight_end":32},{"text":"                        ro [iface]","highlight_start":1,"highlight_end":35},{"text":"                        || {","highlight_start":1,"highlight_end":29},{"text":"                            let mut ips = String::new();","highlight_start":1,"highlight_end":57},{"text":"                            for cidr in iface.borrow().ip_addrs() {","highlight_start":1,"highlight_end":68},{"text":"                                ips += &format!(\"{}\\n\", cidr);","highlight_start":1,"highlight_end":63},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            ips","highlight_start":1,"highlight_end":32},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"set\" => {","highlight_start":1,"highlight_end":31},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            if !cur_value.is_empty() {","highlight_start":1,"highlight_end":55},{"text":"                                let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":68},{"text":"                                let mut cidrs = vec![];","highlight_start":1,"highlight_end":56},{"text":"                                mem::swap(cur_value, &mut cidrs);","highlight_start":1,"highlight_end":66},{"text":"                                iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":60},{"text":"                                    *s = From::from(cidrs);","highlight_start":1,"highlight_end":60},{"text":"                                });","highlight_start":1,"highlight_end":36},{"text":"                                notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":96},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"add\" => {","highlight_start":1,"highlight_end":31},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":64},{"text":"                            let mut cidrs = iface.ip_addrs().to_vec();","highlight_start":1,"highlight_end":71},{"text":"                            for cidr in cur_value {","highlight_start":1,"highlight_end":52},{"text":"                                cidrs.insert(0, *cidr);","highlight_start":1,"highlight_end":56},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":56},{"text":"                                *s = From::from(cidrs);","highlight_start":1,"highlight_end":56},{"text":"                            });","highlight_start":1,"highlight_end":32},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":92},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"rm\" => {","highlight_start":1,"highlight_end":30},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":64},{"text":"                            let mut cidrs = iface.ip_addrs().to_vec();","highlight_start":1,"highlight_end":71},{"text":"                            for cidr in cur_value {","highlight_start":1,"highlight_end":52},{"text":"                                let pre_retain_len = cidrs.len();","highlight_start":1,"highlight_end":66},{"text":"                                cidrs.retain(|&c| c != *cidr);","highlight_start":1,"highlight_end":63},{"text":"                                if pre_retain_len == cidrs.len() {","highlight_start":1,"highlight_end":67},{"text":"                                    return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":84},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":56},{"text":"                                *s = From::from(cidrs);","highlight_start":1,"highlight_end":56},{"text":"                            });","highlight_start":1,"highlight_end":32},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":92},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unnecessary trailing semicolon\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/smolnetd/scheme/netcfg/nodes.rs:224:64\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m224\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m            $(#[allow(unused_variables)] let $c = $c.clone();)*;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this semicolon\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0msrc/smolnetd/scheme/netcfg/mod.rs:51:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m51\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    cfg_node!{\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m52\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        \"resolv\" => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m53\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            \"nameserver\" => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m54\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                rw [dns_config, notifier] (Option<Ipv4Address>, None)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m272\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m273\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_____-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `cfg_node` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"unnecessary trailing semicolon","code":{"code":"redundant_semicolons","explanation":null},"level":"warning","spans":[{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4622,"byte_end":4623,"line_start":227,"line_end":227,"column_start":72,"column_end":73,"is_primary":true,"text":[{"text":"                    $(#[allow(unused_variables)] let $c = $c.clone();)*;","highlight_start":72,"highlight_end":73}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":6209,"byte_end":6226,"line_start":266,"line_end":266,"column_start":42,"column_end":59,"is_primary":false,"text":[{"text":"            $(children.insert($e.into(), cfg_node!($($t)*));)*","highlight_start":42,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":6209,"byte_end":6226,"line_start":266,"line_end":266,"column_start":42,"column_end":59,"is_primary":false,"text":[{"text":"            $(children.insert($e.into(), cfg_node!($($t)*));)*","highlight_start":42,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/mod.rs","byte_start":1546,"byte_end":11568,"line_start":51,"line_end":273,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    cfg_node!{","highlight_start":5,"highlight_end":15},{"text":"        \"resolv\" => {","highlight_start":1,"highlight_end":22},{"text":"            \"nameserver\" => {","highlight_start":1,"highlight_end":30},{"text":"                rw [dns_config, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":70},{"text":"                || {","highlight_start":1,"highlight_end":21},{"text":"                    format!(\"{}\\n\", dns_config.borrow().name_server)","highlight_start":1,"highlight_end":69},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let ip = Ipv4Address::from_str(line.trim())","highlight_start":1,"highlight_end":68},{"text":"                            .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":79},{"text":"                        if !ip.is_unicast() {","highlight_start":1,"highlight_end":46},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(ip);","highlight_start":1,"highlight_end":47},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(ip) = *cur_value {","highlight_start":1,"highlight_end":51},{"text":"                        dns_config.borrow_mut().name_server = ip;","highlight_start":1,"highlight_end":66},{"text":"                        notifier.borrow_mut().schedule_notify(\"resolv/nameserver\");","highlight_start":1,"highlight_end":84},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    Ok(())","highlight_start":1,"highlight_end":27},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        \"route\" => {","highlight_start":1,"highlight_end":21},{"text":"            \"list\" => {","highlight_start":1,"highlight_end":24},{"text":"                ro [iface] || {","highlight_start":1,"highlight_end":32},{"text":"                    let mut gateway = None;","highlight_start":1,"highlight_end":44},{"text":"                    iface.borrow_mut().routes_mut().update(|map| {","highlight_start":1,"highlight_end":67},{"text":"                        gateway = map.get(&gateway_cidr()).map(|route| route.via_router);","highlight_start":1,"highlight_end":90},{"text":"                    });","highlight_start":1,"highlight_end":24},{"text":"                    if let Some(ip) = gateway {","highlight_start":1,"highlight_end":48},{"text":"                        format!(\"default via {}\\n\", ip)","highlight_start":1,"highlight_end":56},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        String::new()","highlight_start":1,"highlight_end":38},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            \"add\" => {","highlight_start":1,"highlight_end":23},{"text":"                wo [iface, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":65},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let default_gw = parse_default_gw(line)?;","highlight_start":1,"highlight_end":66},{"text":"                        if !default_gw.is_unicast() {","highlight_start":1,"highlight_end":54},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(default_gw);","highlight_start":1,"highlight_end":55},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(default_gw) = *cur_value {","highlight_start":1,"highlight_end":59},{"text":"                        if iface.borrow_mut().routes_mut().add_default_ipv4_route(default_gw).is_err() {","highlight_start":1,"highlight_end":105},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        notifier.borrow_mut().schedule_notify(\"route/list\");","highlight_start":1,"highlight_end":77},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            \"rm\" => {","highlight_start":1,"highlight_end":22},{"text":"                wo [iface, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":65},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let default_gw = parse_default_gw(line)?;","highlight_start":1,"highlight_end":66},{"text":"                        if !default_gw.is_unicast() {","highlight_start":1,"highlight_end":54},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(default_gw);","highlight_start":1,"highlight_end":55},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(default_gw) = *cur_value {","highlight_start":1,"highlight_end":59},{"text":"                        let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":60},{"text":"                        let mut gateway = None;","highlight_start":1,"highlight_end":48},{"text":"                        iface.routes_mut().update(|map| {","highlight_start":1,"highlight_end":58},{"text":"                            gateway = map.get(&gateway_cidr()).map(|route| route.via_router);","highlight_start":1,"highlight_end":94},{"text":"                        });","highlight_start":1,"highlight_end":28},{"text":"                        if gateway != Some(IpAddress::Ipv4(default_gw)) {","highlight_start":1,"highlight_end":74},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        iface.routes_mut().update(|map| {","highlight_start":1,"highlight_end":58},{"text":"                            map.remove(&gateway_cidr());","highlight_start":1,"highlight_end":57},{"text":"                        });","highlight_start":1,"highlight_end":28},{"text":"                        notifier.borrow_mut().schedule_notify(\"route/list\");","highlight_start":1,"highlight_end":77},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        \"ifaces\" => {","highlight_start":1,"highlight_end":22},{"text":"            \"eth0\" => {","highlight_start":1,"highlight_end":24},{"text":"                \"mac\" => {","highlight_start":1,"highlight_end":27},{"text":"                    rw [iface, notifier] (Option<EthernetAddress>, None)","highlight_start":1,"highlight_end":73},{"text":"                    || {","highlight_start":1,"highlight_end":25},{"text":"                        format!(\"{}\\n\", iface.borrow().ethernet_addr())","highlight_start":1,"highlight_end":72},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    |cur_value, line| {","highlight_start":1,"highlight_end":40},{"text":"                        if cur_value.is_none() {","highlight_start":1,"highlight_end":49},{"text":"                            let mac = EthernetAddress::from_str(line).","highlight_start":1,"highlight_end":71},{"text":"                                map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":82},{"text":"                            if !mac.is_unicast() {","highlight_start":1,"highlight_end":51},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            *cur_value = Some(mac);","highlight_start":1,"highlight_end":52},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        } else {","highlight_start":1,"highlight_end":33},{"text":"                            Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":68},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    |cur_value| {","highlight_start":1,"highlight_end":34},{"text":"                        if let Some(mac) = *cur_value {","highlight_start":1,"highlight_end":56},{"text":"                            iface.borrow_mut().set_ethernet_addr(mac);","highlight_start":1,"highlight_end":71},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/mac\");","highlight_start":1,"highlight_end":86},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"                \"addr\" => {","highlight_start":1,"highlight_end":28},{"text":"                    \"list\" => {","highlight_start":1,"highlight_end":32},{"text":"                        ro [iface]","highlight_start":1,"highlight_end":35},{"text":"                        || {","highlight_start":1,"highlight_end":29},{"text":"                            let mut ips = String::new();","highlight_start":1,"highlight_end":57},{"text":"                            for cidr in iface.borrow().ip_addrs() {","highlight_start":1,"highlight_end":68},{"text":"                                ips += &format!(\"{}\\n\", cidr);","highlight_start":1,"highlight_end":63},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            ips","highlight_start":1,"highlight_end":32},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"set\" => {","highlight_start":1,"highlight_end":31},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            if !cur_value.is_empty() {","highlight_start":1,"highlight_end":55},{"text":"                                let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":68},{"text":"                                let mut cidrs = vec![];","highlight_start":1,"highlight_end":56},{"text":"                                mem::swap(cur_value, &mut cidrs);","highlight_start":1,"highlight_end":66},{"text":"                                iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":60},{"text":"                                    *s = From::from(cidrs);","highlight_start":1,"highlight_end":60},{"text":"                                });","highlight_start":1,"highlight_end":36},{"text":"                                notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":96},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"add\" => {","highlight_start":1,"highlight_end":31},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":64},{"text":"                            let mut cidrs = iface.ip_addrs().to_vec();","highlight_start":1,"highlight_end":71},{"text":"                            for cidr in cur_value {","highlight_start":1,"highlight_end":52},{"text":"                                cidrs.insert(0, *cidr);","highlight_start":1,"highlight_end":56},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":56},{"text":"                                *s = From::from(cidrs);","highlight_start":1,"highlight_end":56},{"text":"                            });","highlight_start":1,"highlight_end":32},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":92},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"rm\" => {","highlight_start":1,"highlight_end":30},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":64},{"text":"                            let mut cidrs = iface.ip_addrs().to_vec();","highlight_start":1,"highlight_end":71},{"text":"                            for cidr in cur_value {","highlight_start":1,"highlight_end":52},{"text":"                                let pre_retain_len = cidrs.len();","highlight_start":1,"highlight_end":66},{"text":"                                cidrs.retain(|&c| c != *cidr);","highlight_start":1,"highlight_end":63},{"text":"                                if pre_retain_len == cidrs.len() {","highlight_start":1,"highlight_end":67},{"text":"                                    return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":84},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":56},{"text":"                                *s = From::from(cidrs);","highlight_start":1,"highlight_end":56},{"text":"                            });","highlight_start":1,"highlight_end":32},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":92},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"remove this semicolon","code":null,"level":"help","spans":[{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4622,"byte_end":4623,"line_start":227,"line_end":227,"column_start":72,"column_end":73,"is_primary":true,"text":[{"text":"                    $(#[allow(unused_variables)] let $c = $c.clone();)*;","highlight_start":72,"highlight_end":73}],"label":null,"suggested_replacement":"","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":6209,"byte_end":6226,"line_start":266,"line_end":266,"column_start":42,"column_end":59,"is_primary":false,"text":[{"text":"            $(children.insert($e.into(), cfg_node!($($t)*));)*","highlight_start":42,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":6209,"byte_end":6226,"line_start":266,"line_end":266,"column_start":42,"column_end":59,"is_primary":false,"text":[{"text":"            $(children.insert($e.into(), cfg_node!($($t)*));)*","highlight_start":42,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/mod.rs","byte_start":1546,"byte_end":11568,"line_start":51,"line_end":273,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    cfg_node!{","highlight_start":5,"highlight_end":15},{"text":"        \"resolv\" => {","highlight_start":1,"highlight_end":22},{"text":"            \"nameserver\" => {","highlight_start":1,"highlight_end":30},{"text":"                rw [dns_config, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":70},{"text":"                || {","highlight_start":1,"highlight_end":21},{"text":"                    format!(\"{}\\n\", dns_config.borrow().name_server)","highlight_start":1,"highlight_end":69},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let ip = Ipv4Address::from_str(line.trim())","highlight_start":1,"highlight_end":68},{"text":"                            .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":79},{"text":"                        if !ip.is_unicast() {","highlight_start":1,"highlight_end":46},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(ip);","highlight_start":1,"highlight_end":47},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(ip) = *cur_value {","highlight_start":1,"highlight_end":51},{"text":"                        dns_config.borrow_mut().name_server = ip;","highlight_start":1,"highlight_end":66},{"text":"                        notifier.borrow_mut().schedule_notify(\"resolv/nameserver\");","highlight_start":1,"highlight_end":84},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    Ok(())","highlight_start":1,"highlight_end":27},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        \"route\" => {","highlight_start":1,"highlight_end":21},{"text":"            \"list\" => {","highlight_start":1,"highlight_end":24},{"text":"                ro [iface] || {","highlight_start":1,"highlight_end":32},{"text":"                    let mut gateway = None;","highlight_start":1,"highlight_end":44},{"text":"                    iface.borrow_mut().routes_mut().update(|map| {","highlight_start":1,"highlight_end":67},{"text":"                        gateway = map.get(&gateway_cidr()).map(|route| route.via_router);","highlight_start":1,"highlight_end":90},{"text":"                    });","highlight_start":1,"highlight_end":24},{"text":"                    if let Some(ip) = gateway {","highlight_start":1,"highlight_end":48},{"text":"                        format!(\"default via {}\\n\", ip)","highlight_start":1,"highlight_end":56},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        String::new()","highlight_start":1,"highlight_end":38},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            \"add\" => {","highlight_start":1,"highlight_end":23},{"text":"                wo [iface, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":65},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let default_gw = parse_default_gw(line)?;","highlight_start":1,"highlight_end":66},{"text":"                        if !default_gw.is_unicast() {","highlight_start":1,"highlight_end":54},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(default_gw);","highlight_start":1,"highlight_end":55},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(default_gw) = *cur_value {","highlight_start":1,"highlight_end":59},{"text":"                        if iface.borrow_mut().routes_mut().add_default_ipv4_route(default_gw).is_err() {","highlight_start":1,"highlight_end":105},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        notifier.borrow_mut().schedule_notify(\"route/list\");","highlight_start":1,"highlight_end":77},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            \"rm\" => {","highlight_start":1,"highlight_end":22},{"text":"                wo [iface, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":65},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let default_gw = parse_default_gw(line)?;","highlight_start":1,"highlight_end":66},{"text":"                        if !default_gw.is_unicast() {","highlight_start":1,"highlight_end":54},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(default_gw);","highlight_start":1,"highlight_end":55},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(default_gw) = *cur_value {","highlight_start":1,"highlight_end":59},{"text":"                        let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":60},{"text":"                        let mut gateway = None;","highlight_start":1,"highlight_end":48},{"text":"                        iface.routes_mut().update(|map| {","highlight_start":1,"highlight_end":58},{"text":"                            gateway = map.get(&gateway_cidr()).map(|route| route.via_router);","highlight_start":1,"highlight_end":94},{"text":"                        });","highlight_start":1,"highlight_end":28},{"text":"                        if gateway != Some(IpAddress::Ipv4(default_gw)) {","highlight_start":1,"highlight_end":74},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        iface.routes_mut().update(|map| {","highlight_start":1,"highlight_end":58},{"text":"                            map.remove(&gateway_cidr());","highlight_start":1,"highlight_end":57},{"text":"                        });","highlight_start":1,"highlight_end":28},{"text":"                        notifier.borrow_mut().schedule_notify(\"route/list\");","highlight_start":1,"highlight_end":77},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        \"ifaces\" => {","highlight_start":1,"highlight_end":22},{"text":"            \"eth0\" => {","highlight_start":1,"highlight_end":24},{"text":"                \"mac\" => {","highlight_start":1,"highlight_end":27},{"text":"                    rw [iface, notifier] (Option<EthernetAddress>, None)","highlight_start":1,"highlight_end":73},{"text":"                    || {","highlight_start":1,"highlight_end":25},{"text":"                        format!(\"{}\\n\", iface.borrow().ethernet_addr())","highlight_start":1,"highlight_end":72},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    |cur_value, line| {","highlight_start":1,"highlight_end":40},{"text":"                        if cur_value.is_none() {","highlight_start":1,"highlight_end":49},{"text":"                            let mac = EthernetAddress::from_str(line).","highlight_start":1,"highlight_end":71},{"text":"                                map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":82},{"text":"                            if !mac.is_unicast() {","highlight_start":1,"highlight_end":51},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            *cur_value = Some(mac);","highlight_start":1,"highlight_end":52},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        } else {","highlight_start":1,"highlight_end":33},{"text":"                            Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":68},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    |cur_value| {","highlight_start":1,"highlight_end":34},{"text":"                        if let Some(mac) = *cur_value {","highlight_start":1,"highlight_end":56},{"text":"                            iface.borrow_mut().set_ethernet_addr(mac);","highlight_start":1,"highlight_end":71},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/mac\");","highlight_start":1,"highlight_end":86},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"                \"addr\" => {","highlight_start":1,"highlight_end":28},{"text":"                    \"list\" => {","highlight_start":1,"highlight_end":32},{"text":"                        ro [iface]","highlight_start":1,"highlight_end":35},{"text":"                        || {","highlight_start":1,"highlight_end":29},{"text":"                            let mut ips = String::new();","highlight_start":1,"highlight_end":57},{"text":"                            for cidr in iface.borrow().ip_addrs() {","highlight_start":1,"highlight_end":68},{"text":"                                ips += &format!(\"{}\\n\", cidr);","highlight_start":1,"highlight_end":63},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            ips","highlight_start":1,"highlight_end":32},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"set\" => {","highlight_start":1,"highlight_end":31},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            if !cur_value.is_empty() {","highlight_start":1,"highlight_end":55},{"text":"                                let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":68},{"text":"                                let mut cidrs = vec![];","highlight_start":1,"highlight_end":56},{"text":"                                mem::swap(cur_value, &mut cidrs);","highlight_start":1,"highlight_end":66},{"text":"                                iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":60},{"text":"                                    *s = From::from(cidrs);","highlight_start":1,"highlight_end":60},{"text":"                                });","highlight_start":1,"highlight_end":36},{"text":"                                notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":96},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"add\" => {","highlight_start":1,"highlight_end":31},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":64},{"text":"                            let mut cidrs = iface.ip_addrs().to_vec();","highlight_start":1,"highlight_end":71},{"text":"                            for cidr in cur_value {","highlight_start":1,"highlight_end":52},{"text":"                                cidrs.insert(0, *cidr);","highlight_start":1,"highlight_end":56},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":56},{"text":"                                *s = From::from(cidrs);","highlight_start":1,"highlight_end":56},{"text":"                            });","highlight_start":1,"highlight_end":32},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":92},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"rm\" => {","highlight_start":1,"highlight_end":30},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":64},{"text":"                            let mut cidrs = iface.ip_addrs().to_vec();","highlight_start":1,"highlight_end":71},{"text":"                            for cidr in cur_value {","highlight_start":1,"highlight_end":52},{"text":"                                let pre_retain_len = cidrs.len();","highlight_start":1,"highlight_end":66},{"text":"                                cidrs.retain(|&c| c != *cidr);","highlight_start":1,"highlight_end":63},{"text":"                                if pre_retain_len == cidrs.len() {","highlight_start":1,"highlight_end":67},{"text":"                                    return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":84},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":56},{"text":"                                *s = From::from(cidrs);","highlight_start":1,"highlight_end":56},{"text":"                            });","highlight_start":1,"highlight_end":32},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":92},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unnecessary trailing semicolon\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/smolnetd/scheme/netcfg/nodes.rs:227:72\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m227\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m                    $(#[allow(unused_variables)] let $c = $c.clone();)*;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this semicolon\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0msrc/smolnetd/scheme/netcfg/mod.rs:51:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m51\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    cfg_node!{\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m52\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        \"resolv\" => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m53\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            \"nameserver\" => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m54\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                rw [dns_config, notifier] (Option<Ipv4Address>, None)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m272\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m273\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_____-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `cfg_node` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"unnecessary trailing semicolon","code":{"code":"redundant_semicolons","explanation":null},"level":"warning","spans":[{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4817,"byte_end":4818,"line_start":231,"line_end":231,"column_start":72,"column_end":73,"is_primary":true,"text":[{"text":"                    $(#[allow(unused_variables)] let $c = $c.clone();)*;","highlight_start":72,"highlight_end":73}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":6209,"byte_end":6226,"line_start":266,"line_end":266,"column_start":42,"column_end":59,"is_primary":false,"text":[{"text":"            $(children.insert($e.into(), cfg_node!($($t)*));)*","highlight_start":42,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":6209,"byte_end":6226,"line_start":266,"line_end":266,"column_start":42,"column_end":59,"is_primary":false,"text":[{"text":"            $(children.insert($e.into(), cfg_node!($($t)*));)*","highlight_start":42,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/mod.rs","byte_start":1546,"byte_end":11568,"line_start":51,"line_end":273,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    cfg_node!{","highlight_start":5,"highlight_end":15},{"text":"        \"resolv\" => {","highlight_start":1,"highlight_end":22},{"text":"            \"nameserver\" => {","highlight_start":1,"highlight_end":30},{"text":"                rw [dns_config, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":70},{"text":"                || {","highlight_start":1,"highlight_end":21},{"text":"                    format!(\"{}\\n\", dns_config.borrow().name_server)","highlight_start":1,"highlight_end":69},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let ip = Ipv4Address::from_str(line.trim())","highlight_start":1,"highlight_end":68},{"text":"                            .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":79},{"text":"                        if !ip.is_unicast() {","highlight_start":1,"highlight_end":46},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(ip);","highlight_start":1,"highlight_end":47},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(ip) = *cur_value {","highlight_start":1,"highlight_end":51},{"text":"                        dns_config.borrow_mut().name_server = ip;","highlight_start":1,"highlight_end":66},{"text":"                        notifier.borrow_mut().schedule_notify(\"resolv/nameserver\");","highlight_start":1,"highlight_end":84},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    Ok(())","highlight_start":1,"highlight_end":27},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        \"route\" => {","highlight_start":1,"highlight_end":21},{"text":"            \"list\" => {","highlight_start":1,"highlight_end":24},{"text":"                ro [iface] || {","highlight_start":1,"highlight_end":32},{"text":"                    let mut gateway = None;","highlight_start":1,"highlight_end":44},{"text":"                    iface.borrow_mut().routes_mut().update(|map| {","highlight_start":1,"highlight_end":67},{"text":"                        gateway = map.get(&gateway_cidr()).map(|route| route.via_router);","highlight_start":1,"highlight_end":90},{"text":"                    });","highlight_start":1,"highlight_end":24},{"text":"                    if let Some(ip) = gateway {","highlight_start":1,"highlight_end":48},{"text":"                        format!(\"default via {}\\n\", ip)","highlight_start":1,"highlight_end":56},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        String::new()","highlight_start":1,"highlight_end":38},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            \"add\" => {","highlight_start":1,"highlight_end":23},{"text":"                wo [iface, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":65},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let default_gw = parse_default_gw(line)?;","highlight_start":1,"highlight_end":66},{"text":"                        if !default_gw.is_unicast() {","highlight_start":1,"highlight_end":54},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(default_gw);","highlight_start":1,"highlight_end":55},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(default_gw) = *cur_value {","highlight_start":1,"highlight_end":59},{"text":"                        if iface.borrow_mut().routes_mut().add_default_ipv4_route(default_gw).is_err() {","highlight_start":1,"highlight_end":105},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        notifier.borrow_mut().schedule_notify(\"route/list\");","highlight_start":1,"highlight_end":77},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            \"rm\" => {","highlight_start":1,"highlight_end":22},{"text":"                wo [iface, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":65},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let default_gw = parse_default_gw(line)?;","highlight_start":1,"highlight_end":66},{"text":"                        if !default_gw.is_unicast() {","highlight_start":1,"highlight_end":54},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(default_gw);","highlight_start":1,"highlight_end":55},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(default_gw) = *cur_value {","highlight_start":1,"highlight_end":59},{"text":"                        let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":60},{"text":"                        let mut gateway = None;","highlight_start":1,"highlight_end":48},{"text":"                        iface.routes_mut().update(|map| {","highlight_start":1,"highlight_end":58},{"text":"                            gateway = map.get(&gateway_cidr()).map(|route| route.via_router);","highlight_start":1,"highlight_end":94},{"text":"                        });","highlight_start":1,"highlight_end":28},{"text":"                        if gateway != Some(IpAddress::Ipv4(default_gw)) {","highlight_start":1,"highlight_end":74},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        iface.routes_mut().update(|map| {","highlight_start":1,"highlight_end":58},{"text":"                            map.remove(&gateway_cidr());","highlight_start":1,"highlight_end":57},{"text":"                        });","highlight_start":1,"highlight_end":28},{"text":"                        notifier.borrow_mut().schedule_notify(\"route/list\");","highlight_start":1,"highlight_end":77},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        \"ifaces\" => {","highlight_start":1,"highlight_end":22},{"text":"            \"eth0\" => {","highlight_start":1,"highlight_end":24},{"text":"                \"mac\" => {","highlight_start":1,"highlight_end":27},{"text":"                    rw [iface, notifier] (Option<EthernetAddress>, None)","highlight_start":1,"highlight_end":73},{"text":"                    || {","highlight_start":1,"highlight_end":25},{"text":"                        format!(\"{}\\n\", iface.borrow().ethernet_addr())","highlight_start":1,"highlight_end":72},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    |cur_value, line| {","highlight_start":1,"highlight_end":40},{"text":"                        if cur_value.is_none() {","highlight_start":1,"highlight_end":49},{"text":"                            let mac = EthernetAddress::from_str(line).","highlight_start":1,"highlight_end":71},{"text":"                                map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":82},{"text":"                            if !mac.is_unicast() {","highlight_start":1,"highlight_end":51},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            *cur_value = Some(mac);","highlight_start":1,"highlight_end":52},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        } else {","highlight_start":1,"highlight_end":33},{"text":"                            Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":68},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    |cur_value| {","highlight_start":1,"highlight_end":34},{"text":"                        if let Some(mac) = *cur_value {","highlight_start":1,"highlight_end":56},{"text":"                            iface.borrow_mut().set_ethernet_addr(mac);","highlight_start":1,"highlight_end":71},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/mac\");","highlight_start":1,"highlight_end":86},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"                \"addr\" => {","highlight_start":1,"highlight_end":28},{"text":"                    \"list\" => {","highlight_start":1,"highlight_end":32},{"text":"                        ro [iface]","highlight_start":1,"highlight_end":35},{"text":"                        || {","highlight_start":1,"highlight_end":29},{"text":"                            let mut ips = String::new();","highlight_start":1,"highlight_end":57},{"text":"                            for cidr in iface.borrow().ip_addrs() {","highlight_start":1,"highlight_end":68},{"text":"                                ips += &format!(\"{}\\n\", cidr);","highlight_start":1,"highlight_end":63},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            ips","highlight_start":1,"highlight_end":32},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"set\" => {","highlight_start":1,"highlight_end":31},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            if !cur_value.is_empty() {","highlight_start":1,"highlight_end":55},{"text":"                                let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":68},{"text":"                                let mut cidrs = vec![];","highlight_start":1,"highlight_end":56},{"text":"                                mem::swap(cur_value, &mut cidrs);","highlight_start":1,"highlight_end":66},{"text":"                                iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":60},{"text":"                                    *s = From::from(cidrs);","highlight_start":1,"highlight_end":60},{"text":"                                });","highlight_start":1,"highlight_end":36},{"text":"                                notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":96},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"add\" => {","highlight_start":1,"highlight_end":31},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":64},{"text":"                            let mut cidrs = iface.ip_addrs().to_vec();","highlight_start":1,"highlight_end":71},{"text":"                            for cidr in cur_value {","highlight_start":1,"highlight_end":52},{"text":"                                cidrs.insert(0, *cidr);","highlight_start":1,"highlight_end":56},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":56},{"text":"                                *s = From::from(cidrs);","highlight_start":1,"highlight_end":56},{"text":"                            });","highlight_start":1,"highlight_end":32},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":92},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"rm\" => {","highlight_start":1,"highlight_end":30},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":64},{"text":"                            let mut cidrs = iface.ip_addrs().to_vec();","highlight_start":1,"highlight_end":71},{"text":"                            for cidr in cur_value {","highlight_start":1,"highlight_end":52},{"text":"                                let pre_retain_len = cidrs.len();","highlight_start":1,"highlight_end":66},{"text":"                                cidrs.retain(|&c| c != *cidr);","highlight_start":1,"highlight_end":63},{"text":"                                if pre_retain_len == cidrs.len() {","highlight_start":1,"highlight_end":67},{"text":"                                    return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":84},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":56},{"text":"                                *s = From::from(cidrs);","highlight_start":1,"highlight_end":56},{"text":"                            });","highlight_start":1,"highlight_end":32},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":92},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"remove this semicolon","code":null,"level":"help","spans":[{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4817,"byte_end":4818,"line_start":231,"line_end":231,"column_start":72,"column_end":73,"is_primary":true,"text":[{"text":"                    $(#[allow(unused_variables)] let $c = $c.clone();)*;","highlight_start":72,"highlight_end":73}],"label":null,"suggested_replacement":"","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":6209,"byte_end":6226,"line_start":266,"line_end":266,"column_start":42,"column_end":59,"is_primary":false,"text":[{"text":"            $(children.insert($e.into(), cfg_node!($($t)*));)*","highlight_start":42,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":6209,"byte_end":6226,"line_start":266,"line_end":266,"column_start":42,"column_end":59,"is_primary":false,"text":[{"text":"            $(children.insert($e.into(), cfg_node!($($t)*));)*","highlight_start":42,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/mod.rs","byte_start":1546,"byte_end":11568,"line_start":51,"line_end":273,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    cfg_node!{","highlight_start":5,"highlight_end":15},{"text":"        \"resolv\" => {","highlight_start":1,"highlight_end":22},{"text":"            \"nameserver\" => {","highlight_start":1,"highlight_end":30},{"text":"                rw [dns_config, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":70},{"text":"                || {","highlight_start":1,"highlight_end":21},{"text":"                    format!(\"{}\\n\", dns_config.borrow().name_server)","highlight_start":1,"highlight_end":69},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let ip = Ipv4Address::from_str(line.trim())","highlight_start":1,"highlight_end":68},{"text":"                            .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":79},{"text":"                        if !ip.is_unicast() {","highlight_start":1,"highlight_end":46},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(ip);","highlight_start":1,"highlight_end":47},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(ip) = *cur_value {","highlight_start":1,"highlight_end":51},{"text":"                        dns_config.borrow_mut().name_server = ip;","highlight_start":1,"highlight_end":66},{"text":"                        notifier.borrow_mut().schedule_notify(\"resolv/nameserver\");","highlight_start":1,"highlight_end":84},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    Ok(())","highlight_start":1,"highlight_end":27},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        \"route\" => {","highlight_start":1,"highlight_end":21},{"text":"            \"list\" => {","highlight_start":1,"highlight_end":24},{"text":"                ro [iface] || {","highlight_start":1,"highlight_end":32},{"text":"                    let mut gateway = None;","highlight_start":1,"highlight_end":44},{"text":"                    iface.borrow_mut().routes_mut().update(|map| {","highlight_start":1,"highlight_end":67},{"text":"                        gateway = map.get(&gateway_cidr()).map(|route| route.via_router);","highlight_start":1,"highlight_end":90},{"text":"                    });","highlight_start":1,"highlight_end":24},{"text":"                    if let Some(ip) = gateway {","highlight_start":1,"highlight_end":48},{"text":"                        format!(\"default via {}\\n\", ip)","highlight_start":1,"highlight_end":56},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        String::new()","highlight_start":1,"highlight_end":38},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            \"add\" => {","highlight_start":1,"highlight_end":23},{"text":"                wo [iface, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":65},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let default_gw = parse_default_gw(line)?;","highlight_start":1,"highlight_end":66},{"text":"                        if !default_gw.is_unicast() {","highlight_start":1,"highlight_end":54},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(default_gw);","highlight_start":1,"highlight_end":55},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(default_gw) = *cur_value {","highlight_start":1,"highlight_end":59},{"text":"                        if iface.borrow_mut().routes_mut().add_default_ipv4_route(default_gw).is_err() {","highlight_start":1,"highlight_end":105},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        notifier.borrow_mut().schedule_notify(\"route/list\");","highlight_start":1,"highlight_end":77},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            \"rm\" => {","highlight_start":1,"highlight_end":22},{"text":"                wo [iface, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":65},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let default_gw = parse_default_gw(line)?;","highlight_start":1,"highlight_end":66},{"text":"                        if !default_gw.is_unicast() {","highlight_start":1,"highlight_end":54},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(default_gw);","highlight_start":1,"highlight_end":55},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(default_gw) = *cur_value {","highlight_start":1,"highlight_end":59},{"text":"                        let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":60},{"text":"                        let mut gateway = None;","highlight_start":1,"highlight_end":48},{"text":"                        iface.routes_mut().update(|map| {","highlight_start":1,"highlight_end":58},{"text":"                            gateway = map.get(&gateway_cidr()).map(|route| route.via_router);","highlight_start":1,"highlight_end":94},{"text":"                        });","highlight_start":1,"highlight_end":28},{"text":"                        if gateway != Some(IpAddress::Ipv4(default_gw)) {","highlight_start":1,"highlight_end":74},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        iface.routes_mut().update(|map| {","highlight_start":1,"highlight_end":58},{"text":"                            map.remove(&gateway_cidr());","highlight_start":1,"highlight_end":57},{"text":"                        });","highlight_start":1,"highlight_end":28},{"text":"                        notifier.borrow_mut().schedule_notify(\"route/list\");","highlight_start":1,"highlight_end":77},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        \"ifaces\" => {","highlight_start":1,"highlight_end":22},{"text":"            \"eth0\" => {","highlight_start":1,"highlight_end":24},{"text":"                \"mac\" => {","highlight_start":1,"highlight_end":27},{"text":"                    rw [iface, notifier] (Option<EthernetAddress>, None)","highlight_start":1,"highlight_end":73},{"text":"                    || {","highlight_start":1,"highlight_end":25},{"text":"                        format!(\"{}\\n\", iface.borrow().ethernet_addr())","highlight_start":1,"highlight_end":72},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    |cur_value, line| {","highlight_start":1,"highlight_end":40},{"text":"                        if cur_value.is_none() {","highlight_start":1,"highlight_end":49},{"text":"                            let mac = EthernetAddress::from_str(line).","highlight_start":1,"highlight_end":71},{"text":"                                map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":82},{"text":"                            if !mac.is_unicast() {","highlight_start":1,"highlight_end":51},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            *cur_value = Some(mac);","highlight_start":1,"highlight_end":52},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        } else {","highlight_start":1,"highlight_end":33},{"text":"                            Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":68},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    |cur_value| {","highlight_start":1,"highlight_end":34},{"text":"                        if let Some(mac) = *cur_value {","highlight_start":1,"highlight_end":56},{"text":"                            iface.borrow_mut().set_ethernet_addr(mac);","highlight_start":1,"highlight_end":71},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/mac\");","highlight_start":1,"highlight_end":86},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"                \"addr\" => {","highlight_start":1,"highlight_end":28},{"text":"                    \"list\" => {","highlight_start":1,"highlight_end":32},{"text":"                        ro [iface]","highlight_start":1,"highlight_end":35},{"text":"                        || {","highlight_start":1,"highlight_end":29},{"text":"                            let mut ips = String::new();","highlight_start":1,"highlight_end":57},{"text":"                            for cidr in iface.borrow().ip_addrs() {","highlight_start":1,"highlight_end":68},{"text":"                                ips += &format!(\"{}\\n\", cidr);","highlight_start":1,"highlight_end":63},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            ips","highlight_start":1,"highlight_end":32},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"set\" => {","highlight_start":1,"highlight_end":31},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            if !cur_value.is_empty() {","highlight_start":1,"highlight_end":55},{"text":"                                let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":68},{"text":"                                let mut cidrs = vec![];","highlight_start":1,"highlight_end":56},{"text":"                                mem::swap(cur_value, &mut cidrs);","highlight_start":1,"highlight_end":66},{"text":"                                iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":60},{"text":"                                    *s = From::from(cidrs);","highlight_start":1,"highlight_end":60},{"text":"                                });","highlight_start":1,"highlight_end":36},{"text":"                                notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":96},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"add\" => {","highlight_start":1,"highlight_end":31},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":64},{"text":"                            let mut cidrs = iface.ip_addrs().to_vec();","highlight_start":1,"highlight_end":71},{"text":"                            for cidr in cur_value {","highlight_start":1,"highlight_end":52},{"text":"                                cidrs.insert(0, *cidr);","highlight_start":1,"highlight_end":56},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":56},{"text":"                                *s = From::from(cidrs);","highlight_start":1,"highlight_end":56},{"text":"                            });","highlight_start":1,"highlight_end":32},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":92},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"rm\" => {","highlight_start":1,"highlight_end":30},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":64},{"text":"                            let mut cidrs = iface.ip_addrs().to_vec();","highlight_start":1,"highlight_end":71},{"text":"                            for cidr in cur_value {","highlight_start":1,"highlight_end":52},{"text":"                                let pre_retain_len = cidrs.len();","highlight_start":1,"highlight_end":66},{"text":"                                cidrs.retain(|&c| c != *cidr);","highlight_start":1,"highlight_end":63},{"text":"                                if pre_retain_len == cidrs.len() {","highlight_start":1,"highlight_end":67},{"text":"                                    return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":84},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":56},{"text":"                                *s = From::from(cidrs);","highlight_start":1,"highlight_end":56},{"text":"                            });","highlight_start":1,"highlight_end":32},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":92},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unnecessary trailing semicolon\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/smolnetd/scheme/netcfg/nodes.rs:231:72\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m231\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m                    $(#[allow(unused_variables)] let $c = $c.clone();)*;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this semicolon\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0msrc/smolnetd/scheme/netcfg/mod.rs:51:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m51\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    cfg_node!{\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m52\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        \"resolv\" => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m53\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            \"nameserver\" => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m54\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                rw [dns_config, notifier] (Option<Ipv4Address>, None)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m272\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m273\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_____-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `cfg_node` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"unnecessary trailing semicolon","code":{"code":"redundant_semicolons","explanation":null},"level":"warning","spans":[{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4456,"byte_end":4457,"line_start":224,"line_end":224,"column_start":64,"column_end":65,"is_primary":true,"text":[{"text":"            $(#[allow(unused_variables)] let $c = $c.clone();)*;","highlight_start":64,"highlight_end":65}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":6209,"byte_end":6226,"line_start":266,"line_end":266,"column_start":42,"column_end":59,"is_primary":false,"text":[{"text":"            $(children.insert($e.into(), cfg_node!($($t)*));)*","highlight_start":42,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":6209,"byte_end":6226,"line_start":266,"line_end":266,"column_start":42,"column_end":59,"is_primary":false,"text":[{"text":"            $(children.insert($e.into(), cfg_node!($($t)*));)*","highlight_start":42,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/mod.rs","byte_start":1546,"byte_end":11568,"line_start":51,"line_end":273,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    cfg_node!{","highlight_start":5,"highlight_end":15},{"text":"        \"resolv\" => {","highlight_start":1,"highlight_end":22},{"text":"            \"nameserver\" => {","highlight_start":1,"highlight_end":30},{"text":"                rw [dns_config, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":70},{"text":"                || {","highlight_start":1,"highlight_end":21},{"text":"                    format!(\"{}\\n\", dns_config.borrow().name_server)","highlight_start":1,"highlight_end":69},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let ip = Ipv4Address::from_str(line.trim())","highlight_start":1,"highlight_end":68},{"text":"                            .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":79},{"text":"                        if !ip.is_unicast() {","highlight_start":1,"highlight_end":46},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(ip);","highlight_start":1,"highlight_end":47},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(ip) = *cur_value {","highlight_start":1,"highlight_end":51},{"text":"                        dns_config.borrow_mut().name_server = ip;","highlight_start":1,"highlight_end":66},{"text":"                        notifier.borrow_mut().schedule_notify(\"resolv/nameserver\");","highlight_start":1,"highlight_end":84},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    Ok(())","highlight_start":1,"highlight_end":27},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        \"route\" => {","highlight_start":1,"highlight_end":21},{"text":"            \"list\" => {","highlight_start":1,"highlight_end":24},{"text":"                ro [iface] || {","highlight_start":1,"highlight_end":32},{"text":"                    let mut gateway = None;","highlight_start":1,"highlight_end":44},{"text":"                    iface.borrow_mut().routes_mut().update(|map| {","highlight_start":1,"highlight_end":67},{"text":"                        gateway = map.get(&gateway_cidr()).map(|route| route.via_router);","highlight_start":1,"highlight_end":90},{"text":"                    });","highlight_start":1,"highlight_end":24},{"text":"                    if let Some(ip) = gateway {","highlight_start":1,"highlight_end":48},{"text":"                        format!(\"default via {}\\n\", ip)","highlight_start":1,"highlight_end":56},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        String::new()","highlight_start":1,"highlight_end":38},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            \"add\" => {","highlight_start":1,"highlight_end":23},{"text":"                wo [iface, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":65},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let default_gw = parse_default_gw(line)?;","highlight_start":1,"highlight_end":66},{"text":"                        if !default_gw.is_unicast() {","highlight_start":1,"highlight_end":54},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(default_gw);","highlight_start":1,"highlight_end":55},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(default_gw) = *cur_value {","highlight_start":1,"highlight_end":59},{"text":"                        if iface.borrow_mut().routes_mut().add_default_ipv4_route(default_gw).is_err() {","highlight_start":1,"highlight_end":105},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        notifier.borrow_mut().schedule_notify(\"route/list\");","highlight_start":1,"highlight_end":77},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            \"rm\" => {","highlight_start":1,"highlight_end":22},{"text":"                wo [iface, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":65},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let default_gw = parse_default_gw(line)?;","highlight_start":1,"highlight_end":66},{"text":"                        if !default_gw.is_unicast() {","highlight_start":1,"highlight_end":54},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(default_gw);","highlight_start":1,"highlight_end":55},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(default_gw) = *cur_value {","highlight_start":1,"highlight_end":59},{"text":"                        let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":60},{"text":"                        let mut gateway = None;","highlight_start":1,"highlight_end":48},{"text":"                        iface.routes_mut().update(|map| {","highlight_start":1,"highlight_end":58},{"text":"                            gateway = map.get(&gateway_cidr()).map(|route| route.via_router);","highlight_start":1,"highlight_end":94},{"text":"                        });","highlight_start":1,"highlight_end":28},{"text":"                        if gateway != Some(IpAddress::Ipv4(default_gw)) {","highlight_start":1,"highlight_end":74},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        iface.routes_mut().update(|map| {","highlight_start":1,"highlight_end":58},{"text":"                            map.remove(&gateway_cidr());","highlight_start":1,"highlight_end":57},{"text":"                        });","highlight_start":1,"highlight_end":28},{"text":"                        notifier.borrow_mut().schedule_notify(\"route/list\");","highlight_start":1,"highlight_end":77},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        \"ifaces\" => {","highlight_start":1,"highlight_end":22},{"text":"            \"eth0\" => {","highlight_start":1,"highlight_end":24},{"text":"                \"mac\" => {","highlight_start":1,"highlight_end":27},{"text":"                    rw [iface, notifier] (Option<EthernetAddress>, None)","highlight_start":1,"highlight_end":73},{"text":"                    || {","highlight_start":1,"highlight_end":25},{"text":"                        format!(\"{}\\n\", iface.borrow().ethernet_addr())","highlight_start":1,"highlight_end":72},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    |cur_value, line| {","highlight_start":1,"highlight_end":40},{"text":"                        if cur_value.is_none() {","highlight_start":1,"highlight_end":49},{"text":"                            let mac = EthernetAddress::from_str(line).","highlight_start":1,"highlight_end":71},{"text":"                                map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":82},{"text":"                            if !mac.is_unicast() {","highlight_start":1,"highlight_end":51},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            *cur_value = Some(mac);","highlight_start":1,"highlight_end":52},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        } else {","highlight_start":1,"highlight_end":33},{"text":"                            Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":68},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    |cur_value| {","highlight_start":1,"highlight_end":34},{"text":"                        if let Some(mac) = *cur_value {","highlight_start":1,"highlight_end":56},{"text":"                            iface.borrow_mut().set_ethernet_addr(mac);","highlight_start":1,"highlight_end":71},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/mac\");","highlight_start":1,"highlight_end":86},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"                \"addr\" => {","highlight_start":1,"highlight_end":28},{"text":"                    \"list\" => {","highlight_start":1,"highlight_end":32},{"text":"                        ro [iface]","highlight_start":1,"highlight_end":35},{"text":"                        || {","highlight_start":1,"highlight_end":29},{"text":"                            let mut ips = String::new();","highlight_start":1,"highlight_end":57},{"text":"                            for cidr in iface.borrow().ip_addrs() {","highlight_start":1,"highlight_end":68},{"text":"                                ips += &format!(\"{}\\n\", cidr);","highlight_start":1,"highlight_end":63},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            ips","highlight_start":1,"highlight_end":32},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"set\" => {","highlight_start":1,"highlight_end":31},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            if !cur_value.is_empty() {","highlight_start":1,"highlight_end":55},{"text":"                                let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":68},{"text":"                                let mut cidrs = vec![];","highlight_start":1,"highlight_end":56},{"text":"                                mem::swap(cur_value, &mut cidrs);","highlight_start":1,"highlight_end":66},{"text":"                                iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":60},{"text":"                                    *s = From::from(cidrs);","highlight_start":1,"highlight_end":60},{"text":"                                });","highlight_start":1,"highlight_end":36},{"text":"                                notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":96},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"add\" => {","highlight_start":1,"highlight_end":31},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":64},{"text":"                            let mut cidrs = iface.ip_addrs().to_vec();","highlight_start":1,"highlight_end":71},{"text":"                            for cidr in cur_value {","highlight_start":1,"highlight_end":52},{"text":"                                cidrs.insert(0, *cidr);","highlight_start":1,"highlight_end":56},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":56},{"text":"                                *s = From::from(cidrs);","highlight_start":1,"highlight_end":56},{"text":"                            });","highlight_start":1,"highlight_end":32},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":92},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"rm\" => {","highlight_start":1,"highlight_end":30},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":64},{"text":"                            let mut cidrs = iface.ip_addrs().to_vec();","highlight_start":1,"highlight_end":71},{"text":"                            for cidr in cur_value {","highlight_start":1,"highlight_end":52},{"text":"                                let pre_retain_len = cidrs.len();","highlight_start":1,"highlight_end":66},{"text":"                                cidrs.retain(|&c| c != *cidr);","highlight_start":1,"highlight_end":63},{"text":"                                if pre_retain_len == cidrs.len() {","highlight_start":1,"highlight_end":67},{"text":"                                    return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":84},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":56},{"text":"                                *s = From::from(cidrs);","highlight_start":1,"highlight_end":56},{"text":"                            });","highlight_start":1,"highlight_end":32},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":92},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"remove this semicolon","code":null,"level":"help","spans":[{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4456,"byte_end":4457,"line_start":224,"line_end":224,"column_start":64,"column_end":65,"is_primary":true,"text":[{"text":"            $(#[allow(unused_variables)] let $c = $c.clone();)*;","highlight_start":64,"highlight_end":65}],"label":null,"suggested_replacement":"","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":6209,"byte_end":6226,"line_start":266,"line_end":266,"column_start":42,"column_end":59,"is_primary":false,"text":[{"text":"            $(children.insert($e.into(), cfg_node!($($t)*));)*","highlight_start":42,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":6209,"byte_end":6226,"line_start":266,"line_end":266,"column_start":42,"column_end":59,"is_primary":false,"text":[{"text":"            $(children.insert($e.into(), cfg_node!($($t)*));)*","highlight_start":42,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/mod.rs","byte_start":1546,"byte_end":11568,"line_start":51,"line_end":273,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    cfg_node!{","highlight_start":5,"highlight_end":15},{"text":"        \"resolv\" => {","highlight_start":1,"highlight_end":22},{"text":"            \"nameserver\" => {","highlight_start":1,"highlight_end":30},{"text":"                rw [dns_config, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":70},{"text":"                || {","highlight_start":1,"highlight_end":21},{"text":"                    format!(\"{}\\n\", dns_config.borrow().name_server)","highlight_start":1,"highlight_end":69},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let ip = Ipv4Address::from_str(line.trim())","highlight_start":1,"highlight_end":68},{"text":"                            .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":79},{"text":"                        if !ip.is_unicast() {","highlight_start":1,"highlight_end":46},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(ip);","highlight_start":1,"highlight_end":47},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(ip) = *cur_value {","highlight_start":1,"highlight_end":51},{"text":"                        dns_config.borrow_mut().name_server = ip;","highlight_start":1,"highlight_end":66},{"text":"                        notifier.borrow_mut().schedule_notify(\"resolv/nameserver\");","highlight_start":1,"highlight_end":84},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    Ok(())","highlight_start":1,"highlight_end":27},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        \"route\" => {","highlight_start":1,"highlight_end":21},{"text":"            \"list\" => {","highlight_start":1,"highlight_end":24},{"text":"                ro [iface] || {","highlight_start":1,"highlight_end":32},{"text":"                    let mut gateway = None;","highlight_start":1,"highlight_end":44},{"text":"                    iface.borrow_mut().routes_mut().update(|map| {","highlight_start":1,"highlight_end":67},{"text":"                        gateway = map.get(&gateway_cidr()).map(|route| route.via_router);","highlight_start":1,"highlight_end":90},{"text":"                    });","highlight_start":1,"highlight_end":24},{"text":"                    if let Some(ip) = gateway {","highlight_start":1,"highlight_end":48},{"text":"                        format!(\"default via {}\\n\", ip)","highlight_start":1,"highlight_end":56},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        String::new()","highlight_start":1,"highlight_end":38},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            \"add\" => {","highlight_start":1,"highlight_end":23},{"text":"                wo [iface, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":65},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let default_gw = parse_default_gw(line)?;","highlight_start":1,"highlight_end":66},{"text":"                        if !default_gw.is_unicast() {","highlight_start":1,"highlight_end":54},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(default_gw);","highlight_start":1,"highlight_end":55},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(default_gw) = *cur_value {","highlight_start":1,"highlight_end":59},{"text":"                        if iface.borrow_mut().routes_mut().add_default_ipv4_route(default_gw).is_err() {","highlight_start":1,"highlight_end":105},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        notifier.borrow_mut().schedule_notify(\"route/list\");","highlight_start":1,"highlight_end":77},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            \"rm\" => {","highlight_start":1,"highlight_end":22},{"text":"                wo [iface, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":65},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let default_gw = parse_default_gw(line)?;","highlight_start":1,"highlight_end":66},{"text":"                        if !default_gw.is_unicast() {","highlight_start":1,"highlight_end":54},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(default_gw);","highlight_start":1,"highlight_end":55},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(default_gw) = *cur_value {","highlight_start":1,"highlight_end":59},{"text":"                        let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":60},{"text":"                        let mut gateway = None;","highlight_start":1,"highlight_end":48},{"text":"                        iface.routes_mut().update(|map| {","highlight_start":1,"highlight_end":58},{"text":"                            gateway = map.get(&gateway_cidr()).map(|route| route.via_router);","highlight_start":1,"highlight_end":94},{"text":"                        });","highlight_start":1,"highlight_end":28},{"text":"                        if gateway != Some(IpAddress::Ipv4(default_gw)) {","highlight_start":1,"highlight_end":74},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        iface.routes_mut().update(|map| {","highlight_start":1,"highlight_end":58},{"text":"                            map.remove(&gateway_cidr());","highlight_start":1,"highlight_end":57},{"text":"                        });","highlight_start":1,"highlight_end":28},{"text":"                        notifier.borrow_mut().schedule_notify(\"route/list\");","highlight_start":1,"highlight_end":77},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        \"ifaces\" => {","highlight_start":1,"highlight_end":22},{"text":"            \"eth0\" => {","highlight_start":1,"highlight_end":24},{"text":"                \"mac\" => {","highlight_start":1,"highlight_end":27},{"text":"                    rw [iface, notifier] (Option<EthernetAddress>, None)","highlight_start":1,"highlight_end":73},{"text":"                    || {","highlight_start":1,"highlight_end":25},{"text":"                        format!(\"{}\\n\", iface.borrow().ethernet_addr())","highlight_start":1,"highlight_end":72},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    |cur_value, line| {","highlight_start":1,"highlight_end":40},{"text":"                        if cur_value.is_none() {","highlight_start":1,"highlight_end":49},{"text":"                            let mac = EthernetAddress::from_str(line).","highlight_start":1,"highlight_end":71},{"text":"                                map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":82},{"text":"                            if !mac.is_unicast() {","highlight_start":1,"highlight_end":51},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            *cur_value = Some(mac);","highlight_start":1,"highlight_end":52},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        } else {","highlight_start":1,"highlight_end":33},{"text":"                            Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":68},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    |cur_value| {","highlight_start":1,"highlight_end":34},{"text":"                        if let Some(mac) = *cur_value {","highlight_start":1,"highlight_end":56},{"text":"                            iface.borrow_mut().set_ethernet_addr(mac);","highlight_start":1,"highlight_end":71},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/mac\");","highlight_start":1,"highlight_end":86},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"                \"addr\" => {","highlight_start":1,"highlight_end":28},{"text":"                    \"list\" => {","highlight_start":1,"highlight_end":32},{"text":"                        ro [iface]","highlight_start":1,"highlight_end":35},{"text":"                        || {","highlight_start":1,"highlight_end":29},{"text":"                            let mut ips = String::new();","highlight_start":1,"highlight_end":57},{"text":"                            for cidr in iface.borrow().ip_addrs() {","highlight_start":1,"highlight_end":68},{"text":"                                ips += &format!(\"{}\\n\", cidr);","highlight_start":1,"highlight_end":63},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            ips","highlight_start":1,"highlight_end":32},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"set\" => {","highlight_start":1,"highlight_end":31},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            if !cur_value.is_empty() {","highlight_start":1,"highlight_end":55},{"text":"                                let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":68},{"text":"                                let mut cidrs = vec![];","highlight_start":1,"highlight_end":56},{"text":"                                mem::swap(cur_value, &mut cidrs);","highlight_start":1,"highlight_end":66},{"text":"                                iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":60},{"text":"                                    *s = From::from(cidrs);","highlight_start":1,"highlight_end":60},{"text":"                                });","highlight_start":1,"highlight_end":36},{"text":"                                notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":96},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"add\" => {","highlight_start":1,"highlight_end":31},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":64},{"text":"                            let mut cidrs = iface.ip_addrs().to_vec();","highlight_start":1,"highlight_end":71},{"text":"                            for cidr in cur_value {","highlight_start":1,"highlight_end":52},{"text":"                                cidrs.insert(0, *cidr);","highlight_start":1,"highlight_end":56},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":56},{"text":"                                *s = From::from(cidrs);","highlight_start":1,"highlight_end":56},{"text":"                            });","highlight_start":1,"highlight_end":32},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":92},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"rm\" => {","highlight_start":1,"highlight_end":30},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":64},{"text":"                            let mut cidrs = iface.ip_addrs().to_vec();","highlight_start":1,"highlight_end":71},{"text":"                            for cidr in cur_value {","highlight_start":1,"highlight_end":52},{"text":"                                let pre_retain_len = cidrs.len();","highlight_start":1,"highlight_end":66},{"text":"                                cidrs.retain(|&c| c != *cidr);","highlight_start":1,"highlight_end":63},{"text":"                                if pre_retain_len == cidrs.len() {","highlight_start":1,"highlight_end":67},{"text":"                                    return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":84},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":56},{"text":"                                *s = From::from(cidrs);","highlight_start":1,"highlight_end":56},{"text":"                            });","highlight_start":1,"highlight_end":32},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":92},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unnecessary trailing semicolon\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/smolnetd/scheme/netcfg/nodes.rs:224:64\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m224\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m            $(#[allow(unused_variables)] let $c = $c.clone();)*;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this semicolon\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0msrc/smolnetd/scheme/netcfg/mod.rs:51:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m51\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    cfg_node!{\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m52\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        \"resolv\" => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m53\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            \"nameserver\" => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m54\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                rw [dns_config, notifier] (Option<Ipv4Address>, None)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m272\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m273\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_____-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `cfg_node` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"unnecessary trailing semicolon","code":{"code":"redundant_semicolons","explanation":null},"level":"warning","spans":[{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4622,"byte_end":4623,"line_start":227,"line_end":227,"column_start":72,"column_end":73,"is_primary":true,"text":[{"text":"                    $(#[allow(unused_variables)] let $c = $c.clone();)*;","highlight_start":72,"highlight_end":73}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":6209,"byte_end":6226,"line_start":266,"line_end":266,"column_start":42,"column_end":59,"is_primary":false,"text":[{"text":"            $(children.insert($e.into(), cfg_node!($($t)*));)*","highlight_start":42,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":6209,"byte_end":6226,"line_start":266,"line_end":266,"column_start":42,"column_end":59,"is_primary":false,"text":[{"text":"            $(children.insert($e.into(), cfg_node!($($t)*));)*","highlight_start":42,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/mod.rs","byte_start":1546,"byte_end":11568,"line_start":51,"line_end":273,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    cfg_node!{","highlight_start":5,"highlight_end":15},{"text":"        \"resolv\" => {","highlight_start":1,"highlight_end":22},{"text":"            \"nameserver\" => {","highlight_start":1,"highlight_end":30},{"text":"                rw [dns_config, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":70},{"text":"                || {","highlight_start":1,"highlight_end":21},{"text":"                    format!(\"{}\\n\", dns_config.borrow().name_server)","highlight_start":1,"highlight_end":69},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let ip = Ipv4Address::from_str(line.trim())","highlight_start":1,"highlight_end":68},{"text":"                            .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":79},{"text":"                        if !ip.is_unicast() {","highlight_start":1,"highlight_end":46},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(ip);","highlight_start":1,"highlight_end":47},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(ip) = *cur_value {","highlight_start":1,"highlight_end":51},{"text":"                        dns_config.borrow_mut().name_server = ip;","highlight_start":1,"highlight_end":66},{"text":"                        notifier.borrow_mut().schedule_notify(\"resolv/nameserver\");","highlight_start":1,"highlight_end":84},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    Ok(())","highlight_start":1,"highlight_end":27},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        \"route\" => {","highlight_start":1,"highlight_end":21},{"text":"            \"list\" => {","highlight_start":1,"highlight_end":24},{"text":"                ro [iface] || {","highlight_start":1,"highlight_end":32},{"text":"                    let mut gateway = None;","highlight_start":1,"highlight_end":44},{"text":"                    iface.borrow_mut().routes_mut().update(|map| {","highlight_start":1,"highlight_end":67},{"text":"                        gateway = map.get(&gateway_cidr()).map(|route| route.via_router);","highlight_start":1,"highlight_end":90},{"text":"                    });","highlight_start":1,"highlight_end":24},{"text":"                    if let Some(ip) = gateway {","highlight_start":1,"highlight_end":48},{"text":"                        format!(\"default via {}\\n\", ip)","highlight_start":1,"highlight_end":56},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        String::new()","highlight_start":1,"highlight_end":38},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            \"add\" => {","highlight_start":1,"highlight_end":23},{"text":"                wo [iface, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":65},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let default_gw = parse_default_gw(line)?;","highlight_start":1,"highlight_end":66},{"text":"                        if !default_gw.is_unicast() {","highlight_start":1,"highlight_end":54},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(default_gw);","highlight_start":1,"highlight_end":55},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(default_gw) = *cur_value {","highlight_start":1,"highlight_end":59},{"text":"                        if iface.borrow_mut().routes_mut().add_default_ipv4_route(default_gw).is_err() {","highlight_start":1,"highlight_end":105},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        notifier.borrow_mut().schedule_notify(\"route/list\");","highlight_start":1,"highlight_end":77},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            \"rm\" => {","highlight_start":1,"highlight_end":22},{"text":"                wo [iface, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":65},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let default_gw = parse_default_gw(line)?;","highlight_start":1,"highlight_end":66},{"text":"                        if !default_gw.is_unicast() {","highlight_start":1,"highlight_end":54},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(default_gw);","highlight_start":1,"highlight_end":55},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(default_gw) = *cur_value {","highlight_start":1,"highlight_end":59},{"text":"                        let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":60},{"text":"                        let mut gateway = None;","highlight_start":1,"highlight_end":48},{"text":"                        iface.routes_mut().update(|map| {","highlight_start":1,"highlight_end":58},{"text":"                            gateway = map.get(&gateway_cidr()).map(|route| route.via_router);","highlight_start":1,"highlight_end":94},{"text":"                        });","highlight_start":1,"highlight_end":28},{"text":"                        if gateway != Some(IpAddress::Ipv4(default_gw)) {","highlight_start":1,"highlight_end":74},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        iface.routes_mut().update(|map| {","highlight_start":1,"highlight_end":58},{"text":"                            map.remove(&gateway_cidr());","highlight_start":1,"highlight_end":57},{"text":"                        });","highlight_start":1,"highlight_end":28},{"text":"                        notifier.borrow_mut().schedule_notify(\"route/list\");","highlight_start":1,"highlight_end":77},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        \"ifaces\" => {","highlight_start":1,"highlight_end":22},{"text":"            \"eth0\" => {","highlight_start":1,"highlight_end":24},{"text":"                \"mac\" => {","highlight_start":1,"highlight_end":27},{"text":"                    rw [iface, notifier] (Option<EthernetAddress>, None)","highlight_start":1,"highlight_end":73},{"text":"                    || {","highlight_start":1,"highlight_end":25},{"text":"                        format!(\"{}\\n\", iface.borrow().ethernet_addr())","highlight_start":1,"highlight_end":72},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    |cur_value, line| {","highlight_start":1,"highlight_end":40},{"text":"                        if cur_value.is_none() {","highlight_start":1,"highlight_end":49},{"text":"                            let mac = EthernetAddress::from_str(line).","highlight_start":1,"highlight_end":71},{"text":"                                map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":82},{"text":"                            if !mac.is_unicast() {","highlight_start":1,"highlight_end":51},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            *cur_value = Some(mac);","highlight_start":1,"highlight_end":52},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        } else {","highlight_start":1,"highlight_end":33},{"text":"                            Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":68},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    |cur_value| {","highlight_start":1,"highlight_end":34},{"text":"                        if let Some(mac) = *cur_value {","highlight_start":1,"highlight_end":56},{"text":"                            iface.borrow_mut().set_ethernet_addr(mac);","highlight_start":1,"highlight_end":71},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/mac\");","highlight_start":1,"highlight_end":86},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"                \"addr\" => {","highlight_start":1,"highlight_end":28},{"text":"                    \"list\" => {","highlight_start":1,"highlight_end":32},{"text":"                        ro [iface]","highlight_start":1,"highlight_end":35},{"text":"                        || {","highlight_start":1,"highlight_end":29},{"text":"                            let mut ips = String::new();","highlight_start":1,"highlight_end":57},{"text":"                            for cidr in iface.borrow().ip_addrs() {","highlight_start":1,"highlight_end":68},{"text":"                                ips += &format!(\"{}\\n\", cidr);","highlight_start":1,"highlight_end":63},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            ips","highlight_start":1,"highlight_end":32},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"set\" => {","highlight_start":1,"highlight_end":31},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            if !cur_value.is_empty() {","highlight_start":1,"highlight_end":55},{"text":"                                let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":68},{"text":"                                let mut cidrs = vec![];","highlight_start":1,"highlight_end":56},{"text":"                                mem::swap(cur_value, &mut cidrs);","highlight_start":1,"highlight_end":66},{"text":"                                iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":60},{"text":"                                    *s = From::from(cidrs);","highlight_start":1,"highlight_end":60},{"text":"                                });","highlight_start":1,"highlight_end":36},{"text":"                                notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":96},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"add\" => {","highlight_start":1,"highlight_end":31},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":64},{"text":"                            let mut cidrs = iface.ip_addrs().to_vec();","highlight_start":1,"highlight_end":71},{"text":"                            for cidr in cur_value {","highlight_start":1,"highlight_end":52},{"text":"                                cidrs.insert(0, *cidr);","highlight_start":1,"highlight_end":56},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":56},{"text":"                                *s = From::from(cidrs);","highlight_start":1,"highlight_end":56},{"text":"                            });","highlight_start":1,"highlight_end":32},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":92},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"rm\" => {","highlight_start":1,"highlight_end":30},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":64},{"text":"                            let mut cidrs = iface.ip_addrs().to_vec();","highlight_start":1,"highlight_end":71},{"text":"                            for cidr in cur_value {","highlight_start":1,"highlight_end":52},{"text":"                                let pre_retain_len = cidrs.len();","highlight_start":1,"highlight_end":66},{"text":"                                cidrs.retain(|&c| c != *cidr);","highlight_start":1,"highlight_end":63},{"text":"                                if pre_retain_len == cidrs.len() {","highlight_start":1,"highlight_end":67},{"text":"                                    return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":84},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":56},{"text":"                                *s = From::from(cidrs);","highlight_start":1,"highlight_end":56},{"text":"                            });","highlight_start":1,"highlight_end":32},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":92},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"remove this semicolon","code":null,"level":"help","spans":[{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4622,"byte_end":4623,"line_start":227,"line_end":227,"column_start":72,"column_end":73,"is_primary":true,"text":[{"text":"                    $(#[allow(unused_variables)] let $c = $c.clone();)*;","highlight_start":72,"highlight_end":73}],"label":null,"suggested_replacement":"","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":6209,"byte_end":6226,"line_start":266,"line_end":266,"column_start":42,"column_end":59,"is_primary":false,"text":[{"text":"            $(children.insert($e.into(), cfg_node!($($t)*));)*","highlight_start":42,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":6209,"byte_end":6226,"line_start":266,"line_end":266,"column_start":42,"column_end":59,"is_primary":false,"text":[{"text":"            $(children.insert($e.into(), cfg_node!($($t)*));)*","highlight_start":42,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/mod.rs","byte_start":1546,"byte_end":11568,"line_start":51,"line_end":273,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    cfg_node!{","highlight_start":5,"highlight_end":15},{"text":"        \"resolv\" => {","highlight_start":1,"highlight_end":22},{"text":"            \"nameserver\" => {","highlight_start":1,"highlight_end":30},{"text":"                rw [dns_config, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":70},{"text":"                || {","highlight_start":1,"highlight_end":21},{"text":"                    format!(\"{}\\n\", dns_config.borrow().name_server)","highlight_start":1,"highlight_end":69},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let ip = Ipv4Address::from_str(line.trim())","highlight_start":1,"highlight_end":68},{"text":"                            .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":79},{"text":"                        if !ip.is_unicast() {","highlight_start":1,"highlight_end":46},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(ip);","highlight_start":1,"highlight_end":47},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(ip) = *cur_value {","highlight_start":1,"highlight_end":51},{"text":"                        dns_config.borrow_mut().name_server = ip;","highlight_start":1,"highlight_end":66},{"text":"                        notifier.borrow_mut().schedule_notify(\"resolv/nameserver\");","highlight_start":1,"highlight_end":84},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    Ok(())","highlight_start":1,"highlight_end":27},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        \"route\" => {","highlight_start":1,"highlight_end":21},{"text":"            \"list\" => {","highlight_start":1,"highlight_end":24},{"text":"                ro [iface] || {","highlight_start":1,"highlight_end":32},{"text":"                    let mut gateway = None;","highlight_start":1,"highlight_end":44},{"text":"                    iface.borrow_mut().routes_mut().update(|map| {","highlight_start":1,"highlight_end":67},{"text":"                        gateway = map.get(&gateway_cidr()).map(|route| route.via_router);","highlight_start":1,"highlight_end":90},{"text":"                    });","highlight_start":1,"highlight_end":24},{"text":"                    if let Some(ip) = gateway {","highlight_start":1,"highlight_end":48},{"text":"                        format!(\"default via {}\\n\", ip)","highlight_start":1,"highlight_end":56},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        String::new()","highlight_start":1,"highlight_end":38},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            \"add\" => {","highlight_start":1,"highlight_end":23},{"text":"                wo [iface, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":65},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let default_gw = parse_default_gw(line)?;","highlight_start":1,"highlight_end":66},{"text":"                        if !default_gw.is_unicast() {","highlight_start":1,"highlight_end":54},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(default_gw);","highlight_start":1,"highlight_end":55},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(default_gw) = *cur_value {","highlight_start":1,"highlight_end":59},{"text":"                        if iface.borrow_mut().routes_mut().add_default_ipv4_route(default_gw).is_err() {","highlight_start":1,"highlight_end":105},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        notifier.borrow_mut().schedule_notify(\"route/list\");","highlight_start":1,"highlight_end":77},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            \"rm\" => {","highlight_start":1,"highlight_end":22},{"text":"                wo [iface, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":65},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let default_gw = parse_default_gw(line)?;","highlight_start":1,"highlight_end":66},{"text":"                        if !default_gw.is_unicast() {","highlight_start":1,"highlight_end":54},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(default_gw);","highlight_start":1,"highlight_end":55},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(default_gw) = *cur_value {","highlight_start":1,"highlight_end":59},{"text":"                        let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":60},{"text":"                        let mut gateway = None;","highlight_start":1,"highlight_end":48},{"text":"                        iface.routes_mut().update(|map| {","highlight_start":1,"highlight_end":58},{"text":"                            gateway = map.get(&gateway_cidr()).map(|route| route.via_router);","highlight_start":1,"highlight_end":94},{"text":"                        });","highlight_start":1,"highlight_end":28},{"text":"                        if gateway != Some(IpAddress::Ipv4(default_gw)) {","highlight_start":1,"highlight_end":74},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        iface.routes_mut().update(|map| {","highlight_start":1,"highlight_end":58},{"text":"                            map.remove(&gateway_cidr());","highlight_start":1,"highlight_end":57},{"text":"                        });","highlight_start":1,"highlight_end":28},{"text":"                        notifier.borrow_mut().schedule_notify(\"route/list\");","highlight_start":1,"highlight_end":77},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        \"ifaces\" => {","highlight_start":1,"highlight_end":22},{"text":"            \"eth0\" => {","highlight_start":1,"highlight_end":24},{"text":"                \"mac\" => {","highlight_start":1,"highlight_end":27},{"text":"                    rw [iface, notifier] (Option<EthernetAddress>, None)","highlight_start":1,"highlight_end":73},{"text":"                    || {","highlight_start":1,"highlight_end":25},{"text":"                        format!(\"{}\\n\", iface.borrow().ethernet_addr())","highlight_start":1,"highlight_end":72},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    |cur_value, line| {","highlight_start":1,"highlight_end":40},{"text":"                        if cur_value.is_none() {","highlight_start":1,"highlight_end":49},{"text":"                            let mac = EthernetAddress::from_str(line).","highlight_start":1,"highlight_end":71},{"text":"                                map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":82},{"text":"                            if !mac.is_unicast() {","highlight_start":1,"highlight_end":51},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            *cur_value = Some(mac);","highlight_start":1,"highlight_end":52},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        } else {","highlight_start":1,"highlight_end":33},{"text":"                            Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":68},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    |cur_value| {","highlight_start":1,"highlight_end":34},{"text":"                        if let Some(mac) = *cur_value {","highlight_start":1,"highlight_end":56},{"text":"                            iface.borrow_mut().set_ethernet_addr(mac);","highlight_start":1,"highlight_end":71},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/mac\");","highlight_start":1,"highlight_end":86},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"                \"addr\" => {","highlight_start":1,"highlight_end":28},{"text":"                    \"list\" => {","highlight_start":1,"highlight_end":32},{"text":"                        ro [iface]","highlight_start":1,"highlight_end":35},{"text":"                        || {","highlight_start":1,"highlight_end":29},{"text":"                            let mut ips = String::new();","highlight_start":1,"highlight_end":57},{"text":"                            for cidr in iface.borrow().ip_addrs() {","highlight_start":1,"highlight_end":68},{"text":"                                ips += &format!(\"{}\\n\", cidr);","highlight_start":1,"highlight_end":63},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            ips","highlight_start":1,"highlight_end":32},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"set\" => {","highlight_start":1,"highlight_end":31},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            if !cur_value.is_empty() {","highlight_start":1,"highlight_end":55},{"text":"                                let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":68},{"text":"                                let mut cidrs = vec![];","highlight_start":1,"highlight_end":56},{"text":"                                mem::swap(cur_value, &mut cidrs);","highlight_start":1,"highlight_end":66},{"text":"                                iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":60},{"text":"                                    *s = From::from(cidrs);","highlight_start":1,"highlight_end":60},{"text":"                                });","highlight_start":1,"highlight_end":36},{"text":"                                notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":96},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"add\" => {","highlight_start":1,"highlight_end":31},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":64},{"text":"                            let mut cidrs = iface.ip_addrs().to_vec();","highlight_start":1,"highlight_end":71},{"text":"                            for cidr in cur_value {","highlight_start":1,"highlight_end":52},{"text":"                                cidrs.insert(0, *cidr);","highlight_start":1,"highlight_end":56},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":56},{"text":"                                *s = From::from(cidrs);","highlight_start":1,"highlight_end":56},{"text":"                            });","highlight_start":1,"highlight_end":32},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":92},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"rm\" => {","highlight_start":1,"highlight_end":30},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":64},{"text":"                            let mut cidrs = iface.ip_addrs().to_vec();","highlight_start":1,"highlight_end":71},{"text":"                            for cidr in cur_value {","highlight_start":1,"highlight_end":52},{"text":"                                let pre_retain_len = cidrs.len();","highlight_start":1,"highlight_end":66},{"text":"                                cidrs.retain(|&c| c != *cidr);","highlight_start":1,"highlight_end":63},{"text":"                                if pre_retain_len == cidrs.len() {","highlight_start":1,"highlight_end":67},{"text":"                                    return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":84},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":56},{"text":"                                *s = From::from(cidrs);","highlight_start":1,"highlight_end":56},{"text":"                            });","highlight_start":1,"highlight_end":32},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":92},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unnecessary trailing semicolon\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/smolnetd/scheme/netcfg/nodes.rs:227:72\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m227\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m                    $(#[allow(unused_variables)] let $c = $c.clone();)*;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this semicolon\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0msrc/smolnetd/scheme/netcfg/mod.rs:51:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m51\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    cfg_node!{\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m52\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        \"resolv\" => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m53\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            \"nameserver\" => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m54\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                rw [dns_config, notifier] (Option<Ipv4Address>, None)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m272\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m273\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_____-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `cfg_node` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"unnecessary trailing semicolon","code":{"code":"redundant_semicolons","explanation":null},"level":"warning","spans":[{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4817,"byte_end":4818,"line_start":231,"line_end":231,"column_start":72,"column_end":73,"is_primary":true,"text":[{"text":"                    $(#[allow(unused_variables)] let $c = $c.clone();)*;","highlight_start":72,"highlight_end":73}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":6209,"byte_end":6226,"line_start":266,"line_end":266,"column_start":42,"column_end":59,"is_primary":false,"text":[{"text":"            $(children.insert($e.into(), cfg_node!($($t)*));)*","highlight_start":42,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":6209,"byte_end":6226,"line_start":266,"line_end":266,"column_start":42,"column_end":59,"is_primary":false,"text":[{"text":"            $(children.insert($e.into(), cfg_node!($($t)*));)*","highlight_start":42,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/mod.rs","byte_start":1546,"byte_end":11568,"line_start":51,"line_end":273,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    cfg_node!{","highlight_start":5,"highlight_end":15},{"text":"        \"resolv\" => {","highlight_start":1,"highlight_end":22},{"text":"            \"nameserver\" => {","highlight_start":1,"highlight_end":30},{"text":"                rw [dns_config, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":70},{"text":"                || {","highlight_start":1,"highlight_end":21},{"text":"                    format!(\"{}\\n\", dns_config.borrow().name_server)","highlight_start":1,"highlight_end":69},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let ip = Ipv4Address::from_str(line.trim())","highlight_start":1,"highlight_end":68},{"text":"                            .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":79},{"text":"                        if !ip.is_unicast() {","highlight_start":1,"highlight_end":46},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(ip);","highlight_start":1,"highlight_end":47},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(ip) = *cur_value {","highlight_start":1,"highlight_end":51},{"text":"                        dns_config.borrow_mut().name_server = ip;","highlight_start":1,"highlight_end":66},{"text":"                        notifier.borrow_mut().schedule_notify(\"resolv/nameserver\");","highlight_start":1,"highlight_end":84},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    Ok(())","highlight_start":1,"highlight_end":27},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        \"route\" => {","highlight_start":1,"highlight_end":21},{"text":"            \"list\" => {","highlight_start":1,"highlight_end":24},{"text":"                ro [iface] || {","highlight_start":1,"highlight_end":32},{"text":"                    let mut gateway = None;","highlight_start":1,"highlight_end":44},{"text":"                    iface.borrow_mut().routes_mut().update(|map| {","highlight_start":1,"highlight_end":67},{"text":"                        gateway = map.get(&gateway_cidr()).map(|route| route.via_router);","highlight_start":1,"highlight_end":90},{"text":"                    });","highlight_start":1,"highlight_end":24},{"text":"                    if let Some(ip) = gateway {","highlight_start":1,"highlight_end":48},{"text":"                        format!(\"default via {}\\n\", ip)","highlight_start":1,"highlight_end":56},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        String::new()","highlight_start":1,"highlight_end":38},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            \"add\" => {","highlight_start":1,"highlight_end":23},{"text":"                wo [iface, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":65},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let default_gw = parse_default_gw(line)?;","highlight_start":1,"highlight_end":66},{"text":"                        if !default_gw.is_unicast() {","highlight_start":1,"highlight_end":54},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(default_gw);","highlight_start":1,"highlight_end":55},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(default_gw) = *cur_value {","highlight_start":1,"highlight_end":59},{"text":"                        if iface.borrow_mut().routes_mut().add_default_ipv4_route(default_gw).is_err() {","highlight_start":1,"highlight_end":105},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        notifier.borrow_mut().schedule_notify(\"route/list\");","highlight_start":1,"highlight_end":77},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            \"rm\" => {","highlight_start":1,"highlight_end":22},{"text":"                wo [iface, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":65},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let default_gw = parse_default_gw(line)?;","highlight_start":1,"highlight_end":66},{"text":"                        if !default_gw.is_unicast() {","highlight_start":1,"highlight_end":54},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(default_gw);","highlight_start":1,"highlight_end":55},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(default_gw) = *cur_value {","highlight_start":1,"highlight_end":59},{"text":"                        let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":60},{"text":"                        let mut gateway = None;","highlight_start":1,"highlight_end":48},{"text":"                        iface.routes_mut().update(|map| {","highlight_start":1,"highlight_end":58},{"text":"                            gateway = map.get(&gateway_cidr()).map(|route| route.via_router);","highlight_start":1,"highlight_end":94},{"text":"                        });","highlight_start":1,"highlight_end":28},{"text":"                        if gateway != Some(IpAddress::Ipv4(default_gw)) {","highlight_start":1,"highlight_end":74},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        iface.routes_mut().update(|map| {","highlight_start":1,"highlight_end":58},{"text":"                            map.remove(&gateway_cidr());","highlight_start":1,"highlight_end":57},{"text":"                        });","highlight_start":1,"highlight_end":28},{"text":"                        notifier.borrow_mut().schedule_notify(\"route/list\");","highlight_start":1,"highlight_end":77},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        \"ifaces\" => {","highlight_start":1,"highlight_end":22},{"text":"            \"eth0\" => {","highlight_start":1,"highlight_end":24},{"text":"                \"mac\" => {","highlight_start":1,"highlight_end":27},{"text":"                    rw [iface, notifier] (Option<EthernetAddress>, None)","highlight_start":1,"highlight_end":73},{"text":"                    || {","highlight_start":1,"highlight_end":25},{"text":"                        format!(\"{}\\n\", iface.borrow().ethernet_addr())","highlight_start":1,"highlight_end":72},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    |cur_value, line| {","highlight_start":1,"highlight_end":40},{"text":"                        if cur_value.is_none() {","highlight_start":1,"highlight_end":49},{"text":"                            let mac = EthernetAddress::from_str(line).","highlight_start":1,"highlight_end":71},{"text":"                                map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":82},{"text":"                            if !mac.is_unicast() {","highlight_start":1,"highlight_end":51},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            *cur_value = Some(mac);","highlight_start":1,"highlight_end":52},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        } else {","highlight_start":1,"highlight_end":33},{"text":"                            Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":68},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    |cur_value| {","highlight_start":1,"highlight_end":34},{"text":"                        if let Some(mac) = *cur_value {","highlight_start":1,"highlight_end":56},{"text":"                            iface.borrow_mut().set_ethernet_addr(mac);","highlight_start":1,"highlight_end":71},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/mac\");","highlight_start":1,"highlight_end":86},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"                \"addr\" => {","highlight_start":1,"highlight_end":28},{"text":"                    \"list\" => {","highlight_start":1,"highlight_end":32},{"text":"                        ro [iface]","highlight_start":1,"highlight_end":35},{"text":"                        || {","highlight_start":1,"highlight_end":29},{"text":"                            let mut ips = String::new();","highlight_start":1,"highlight_end":57},{"text":"                            for cidr in iface.borrow().ip_addrs() {","highlight_start":1,"highlight_end":68},{"text":"                                ips += &format!(\"{}\\n\", cidr);","highlight_start":1,"highlight_end":63},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            ips","highlight_start":1,"highlight_end":32},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"set\" => {","highlight_start":1,"highlight_end":31},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            if !cur_value.is_empty() {","highlight_start":1,"highlight_end":55},{"text":"                                let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":68},{"text":"                                let mut cidrs = vec![];","highlight_start":1,"highlight_end":56},{"text":"                                mem::swap(cur_value, &mut cidrs);","highlight_start":1,"highlight_end":66},{"text":"                                iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":60},{"text":"                                    *s = From::from(cidrs);","highlight_start":1,"highlight_end":60},{"text":"                                });","highlight_start":1,"highlight_end":36},{"text":"                                notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":96},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"add\" => {","highlight_start":1,"highlight_end":31},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":64},{"text":"                            let mut cidrs = iface.ip_addrs().to_vec();","highlight_start":1,"highlight_end":71},{"text":"                            for cidr in cur_value {","highlight_start":1,"highlight_end":52},{"text":"                                cidrs.insert(0, *cidr);","highlight_start":1,"highlight_end":56},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":56},{"text":"                                *s = From::from(cidrs);","highlight_start":1,"highlight_end":56},{"text":"                            });","highlight_start":1,"highlight_end":32},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":92},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"rm\" => {","highlight_start":1,"highlight_end":30},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":64},{"text":"                            let mut cidrs = iface.ip_addrs().to_vec();","highlight_start":1,"highlight_end":71},{"text":"                            for cidr in cur_value {","highlight_start":1,"highlight_end":52},{"text":"                                let pre_retain_len = cidrs.len();","highlight_start":1,"highlight_end":66},{"text":"                                cidrs.retain(|&c| c != *cidr);","highlight_start":1,"highlight_end":63},{"text":"                                if pre_retain_len == cidrs.len() {","highlight_start":1,"highlight_end":67},{"text":"                                    return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":84},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":56},{"text":"                                *s = From::from(cidrs);","highlight_start":1,"highlight_end":56},{"text":"                            });","highlight_start":1,"highlight_end":32},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":92},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"remove this semicolon","code":null,"level":"help","spans":[{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4817,"byte_end":4818,"line_start":231,"line_end":231,"column_start":72,"column_end":73,"is_primary":true,"text":[{"text":"                    $(#[allow(unused_variables)] let $c = $c.clone();)*;","highlight_start":72,"highlight_end":73}],"label":null,"suggested_replacement":"","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":6209,"byte_end":6226,"line_start":266,"line_end":266,"column_start":42,"column_end":59,"is_primary":false,"text":[{"text":"            $(children.insert($e.into(), cfg_node!($($t)*));)*","highlight_start":42,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":6209,"byte_end":6226,"line_start":266,"line_end":266,"column_start":42,"column_end":59,"is_primary":false,"text":[{"text":"            $(children.insert($e.into(), cfg_node!($($t)*));)*","highlight_start":42,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/mod.rs","byte_start":1546,"byte_end":11568,"line_start":51,"line_end":273,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    cfg_node!{","highlight_start":5,"highlight_end":15},{"text":"        \"resolv\" => {","highlight_start":1,"highlight_end":22},{"text":"            \"nameserver\" => {","highlight_start":1,"highlight_end":30},{"text":"                rw [dns_config, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":70},{"text":"                || {","highlight_start":1,"highlight_end":21},{"text":"                    format!(\"{}\\n\", dns_config.borrow().name_server)","highlight_start":1,"highlight_end":69},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let ip = Ipv4Address::from_str(line.trim())","highlight_start":1,"highlight_end":68},{"text":"                            .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":79},{"text":"                        if !ip.is_unicast() {","highlight_start":1,"highlight_end":46},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(ip);","highlight_start":1,"highlight_end":47},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(ip) = *cur_value {","highlight_start":1,"highlight_end":51},{"text":"                        dns_config.borrow_mut().name_server = ip;","highlight_start":1,"highlight_end":66},{"text":"                        notifier.borrow_mut().schedule_notify(\"resolv/nameserver\");","highlight_start":1,"highlight_end":84},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    Ok(())","highlight_start":1,"highlight_end":27},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        \"route\" => {","highlight_start":1,"highlight_end":21},{"text":"            \"list\" => {","highlight_start":1,"highlight_end":24},{"text":"                ro [iface] || {","highlight_start":1,"highlight_end":32},{"text":"                    let mut gateway = None;","highlight_start":1,"highlight_end":44},{"text":"                    iface.borrow_mut().routes_mut().update(|map| {","highlight_start":1,"highlight_end":67},{"text":"                        gateway = map.get(&gateway_cidr()).map(|route| route.via_router);","highlight_start":1,"highlight_end":90},{"text":"                    });","highlight_start":1,"highlight_end":24},{"text":"                    if let Some(ip) = gateway {","highlight_start":1,"highlight_end":48},{"text":"                        format!(\"default via {}\\n\", ip)","highlight_start":1,"highlight_end":56},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        String::new()","highlight_start":1,"highlight_end":38},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            \"add\" => {","highlight_start":1,"highlight_end":23},{"text":"                wo [iface, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":65},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let default_gw = parse_default_gw(line)?;","highlight_start":1,"highlight_end":66},{"text":"                        if !default_gw.is_unicast() {","highlight_start":1,"highlight_end":54},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(default_gw);","highlight_start":1,"highlight_end":55},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(default_gw) = *cur_value {","highlight_start":1,"highlight_end":59},{"text":"                        if iface.borrow_mut().routes_mut().add_default_ipv4_route(default_gw).is_err() {","highlight_start":1,"highlight_end":105},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        notifier.borrow_mut().schedule_notify(\"route/list\");","highlight_start":1,"highlight_end":77},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            \"rm\" => {","highlight_start":1,"highlight_end":22},{"text":"                wo [iface, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":65},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let default_gw = parse_default_gw(line)?;","highlight_start":1,"highlight_end":66},{"text":"                        if !default_gw.is_unicast() {","highlight_start":1,"highlight_end":54},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(default_gw);","highlight_start":1,"highlight_end":55},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(default_gw) = *cur_value {","highlight_start":1,"highlight_end":59},{"text":"                        let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":60},{"text":"                        let mut gateway = None;","highlight_start":1,"highlight_end":48},{"text":"                        iface.routes_mut().update(|map| {","highlight_start":1,"highlight_end":58},{"text":"                            gateway = map.get(&gateway_cidr()).map(|route| route.via_router);","highlight_start":1,"highlight_end":94},{"text":"                        });","highlight_start":1,"highlight_end":28},{"text":"                        if gateway != Some(IpAddress::Ipv4(default_gw)) {","highlight_start":1,"highlight_end":74},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        iface.routes_mut().update(|map| {","highlight_start":1,"highlight_end":58},{"text":"                            map.remove(&gateway_cidr());","highlight_start":1,"highlight_end":57},{"text":"                        });","highlight_start":1,"highlight_end":28},{"text":"                        notifier.borrow_mut().schedule_notify(\"route/list\");","highlight_start":1,"highlight_end":77},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        \"ifaces\" => {","highlight_start":1,"highlight_end":22},{"text":"            \"eth0\" => {","highlight_start":1,"highlight_end":24},{"text":"                \"mac\" => {","highlight_start":1,"highlight_end":27},{"text":"                    rw [iface, notifier] (Option<EthernetAddress>, None)","highlight_start":1,"highlight_end":73},{"text":"                    || {","highlight_start":1,"highlight_end":25},{"text":"                        format!(\"{}\\n\", iface.borrow().ethernet_addr())","highlight_start":1,"highlight_end":72},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    |cur_value, line| {","highlight_start":1,"highlight_end":40},{"text":"                        if cur_value.is_none() {","highlight_start":1,"highlight_end":49},{"text":"                            let mac = EthernetAddress::from_str(line).","highlight_start":1,"highlight_end":71},{"text":"                                map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":82},{"text":"                            if !mac.is_unicast() {","highlight_start":1,"highlight_end":51},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            *cur_value = Some(mac);","highlight_start":1,"highlight_end":52},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        } else {","highlight_start":1,"highlight_end":33},{"text":"                            Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":68},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    |cur_value| {","highlight_start":1,"highlight_end":34},{"text":"                        if let Some(mac) = *cur_value {","highlight_start":1,"highlight_end":56},{"text":"                            iface.borrow_mut().set_ethernet_addr(mac);","highlight_start":1,"highlight_end":71},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/mac\");","highlight_start":1,"highlight_end":86},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"                \"addr\" => {","highlight_start":1,"highlight_end":28},{"text":"                    \"list\" => {","highlight_start":1,"highlight_end":32},{"text":"                        ro [iface]","highlight_start":1,"highlight_end":35},{"text":"                        || {","highlight_start":1,"highlight_end":29},{"text":"                            let mut ips = String::new();","highlight_start":1,"highlight_end":57},{"text":"                            for cidr in iface.borrow().ip_addrs() {","highlight_start":1,"highlight_end":68},{"text":"                                ips += &format!(\"{}\\n\", cidr);","highlight_start":1,"highlight_end":63},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            ips","highlight_start":1,"highlight_end":32},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"set\" => {","highlight_start":1,"highlight_end":31},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            if !cur_value.is_empty() {","highlight_start":1,"highlight_end":55},{"text":"                                let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":68},{"text":"                                let mut cidrs = vec![];","highlight_start":1,"highlight_end":56},{"text":"                                mem::swap(cur_value, &mut cidrs);","highlight_start":1,"highlight_end":66},{"text":"                                iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":60},{"text":"                                    *s = From::from(cidrs);","highlight_start":1,"highlight_end":60},{"text":"                                });","highlight_start":1,"highlight_end":36},{"text":"                                notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":96},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"add\" => {","highlight_start":1,"highlight_end":31},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":64},{"text":"                            let mut cidrs = iface.ip_addrs().to_vec();","highlight_start":1,"highlight_end":71},{"text":"                            for cidr in cur_value {","highlight_start":1,"highlight_end":52},{"text":"                                cidrs.insert(0, *cidr);","highlight_start":1,"highlight_end":56},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":56},{"text":"                                *s = From::from(cidrs);","highlight_start":1,"highlight_end":56},{"text":"                            });","highlight_start":1,"highlight_end":32},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":92},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"rm\" => {","highlight_start":1,"highlight_end":30},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":64},{"text":"                            let mut cidrs = iface.ip_addrs().to_vec();","highlight_start":1,"highlight_end":71},{"text":"                            for cidr in cur_value {","highlight_start":1,"highlight_end":52},{"text":"                                let pre_retain_len = cidrs.len();","highlight_start":1,"highlight_end":66},{"text":"                                cidrs.retain(|&c| c != *cidr);","highlight_start":1,"highlight_end":63},{"text":"                                if pre_retain_len == cidrs.len() {","highlight_start":1,"highlight_end":67},{"text":"                                    return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":84},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":56},{"text":"                                *s = From::from(cidrs);","highlight_start":1,"highlight_end":56},{"text":"                            });","highlight_start":1,"highlight_end":32},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":92},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unnecessary trailing semicolon\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/smolnetd/scheme/netcfg/nodes.rs:231:72\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m231\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m                    $(#[allow(unused_variables)] let $c = $c.clone();)*;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this semicolon\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0msrc/smolnetd/scheme/netcfg/mod.rs:51:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m51\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    cfg_node!{\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m52\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        \"resolv\" => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m53\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            \"nameserver\" => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m54\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                rw [dns_config, notifier] (Option<Ipv4Address>, None)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m272\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m273\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_____-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `cfg_node` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"trait objects without an explicit `dyn` are deprecated","code":{"code":"bare_trait_objects","explanation":null},"level":"warning","spans":[{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":145,"byte_end":152,"line_start":6,"line_end":6,"column_start":34,"column_end":41,"is_primary":true,"text":[{"text":"pub type CfgNodeRef = Rc<RefCell<CfgNode>>;","highlight_start":34,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(bare_trait_objects)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"use `dyn`","code":null,"level":"help","spans":[{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":145,"byte_end":145,"line_start":6,"line_end":6,"column_start":34,"column_end":34,"is_primary":true,"text":[{"text":"pub type CfgNodeRef = Rc<RefCell<CfgNode>>;","highlight_start":34,"highlight_end":34}],"label":null,"suggested_replacement":"dyn ","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":152,"byte_end":152,"line_start":6,"line_end":6,"column_start":41,"column_end":41,"is_primary":true,"text":[{"text":"pub type CfgNodeRef = Rc<RefCell<CfgNode>>;","highlight_start":41,"highlight_end":41}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trait objects without an explicit `dyn` are deprecated\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/smolnetd/scheme/netcfg/nodes.rs:6:34\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m6\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mpub type CfgNodeRef = Rc<RefCell<CfgNode>>;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(bare_trait_objects)]` on by default\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: use `dyn`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m6\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0mpub type CfgNodeRef = Rc<RefCell<CfgNode>>;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m6\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0mpub type CfgNodeRef = Rc<RefCell<\u001b[0m\u001b[0m\u001b[38;5;10mdyn \u001b[0m\u001b[0mCfgNode>>;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\n\n"}
{"message":"trait objects without an explicit `dyn` are deprecated","code":{"code":"bare_trait_objects","explanation":null},"level":"warning","spans":[{"file_name":"src/smolnetd/scheme/netcfg/mod.rs","byte_start":11799,"byte_end":11809,"line_start":287,"line_end":287,"column_start":29,"column_end":39,"is_primary":true,"text":[{"text":"    node_writer: Option<Box<NodeWriter>>,","highlight_start":29,"highlight_end":39}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"use `dyn`","code":null,"level":"help","spans":[{"file_name":"src/smolnetd/scheme/netcfg/mod.rs","byte_start":11799,"byte_end":11799,"line_start":287,"line_end":287,"column_start":29,"column_end":29,"is_primary":true,"text":[{"text":"    node_writer: Option<Box<NodeWriter>>,","highlight_start":29,"highlight_end":29}],"label":null,"suggested_replacement":"dyn ","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/smolnetd/scheme/netcfg/mod.rs","byte_start":11809,"byte_end":11809,"line_start":287,"line_end":287,"column_start":39,"column_end":39,"is_primary":true,"text":[{"text":"    node_writer: Option<Box<NodeWriter>>,","highlight_start":39,"highlight_end":39}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trait objects without an explicit `dyn` are deprecated\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/smolnetd/scheme/netcfg/mod.rs:287:29\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m287\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    node_writer: Option<Box<NodeWriter>>,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: use `dyn`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m287\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m    node_writer: Option<Box<NodeWriter>>,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m287\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m    node_writer: Option<Box<\u001b[0m\u001b[0m\u001b[38;5;10mdyn \u001b[0m\u001b[0mNodeWriter>>,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\n\n"}
{"message":"trait objects without an explicit `dyn` are deprecated","code":{"code":"bare_trait_objects","explanation":null},"level":"warning","spans":[{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":2072,"byte_end":2082,"line_start":109,"line_end":109,"column_start":30,"column_end":40,"is_primary":true,"text":[{"text":"    W: 'static + Fn() -> Box<NodeWriter>,","highlight_start":30,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"use `dyn`","code":null,"level":"help","spans":[{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":2072,"byte_end":2072,"line_start":109,"line_end":109,"column_start":30,"column_end":30,"is_primary":true,"text":[{"text":"    W: 'static + Fn() -> Box<NodeWriter>,","highlight_start":30,"highlight_end":30}],"label":null,"suggested_replacement":"dyn ","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":2082,"byte_end":2082,"line_start":109,"line_end":109,"column_start":40,"column_end":40,"is_primary":true,"text":[{"text":"    W: 'static + Fn() -> Box<NodeWriter>,","highlight_start":40,"highlight_end":40}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trait objects without an explicit `dyn` are deprecated\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/smolnetd/scheme/netcfg/nodes.rs:109:30\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m109\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    W: 'static + Fn() -> Box<NodeWriter>,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: use `dyn`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m109\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m    W: 'static + Fn() -> Box<NodeWriter>,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m109\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m    W: 'static + Fn() -> Box<\u001b[0m\u001b[0m\u001b[38;5;10mdyn \u001b[0m\u001b[0mNodeWriter>,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\n\n"}
{"message":"trait objects without an explicit `dyn` are deprecated","code":{"code":"bare_trait_objects","explanation":null},"level":"warning","spans":[{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":2174,"byte_end":2184,"line_start":116,"line_end":116,"column_start":30,"column_end":40,"is_primary":true,"text":[{"text":"    W: 'static + Fn() -> Box<NodeWriter>,","highlight_start":30,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"use `dyn`","code":null,"level":"help","spans":[{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":2174,"byte_end":2174,"line_start":116,"line_end":116,"column_start":30,"column_end":30,"is_primary":true,"text":[{"text":"    W: 'static + Fn() -> Box<NodeWriter>,","highlight_start":30,"highlight_end":30}],"label":null,"suggested_replacement":"dyn ","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":2184,"byte_end":2184,"line_start":116,"line_end":116,"column_start":40,"column_end":40,"is_primary":true,"text":[{"text":"    W: 'static + Fn() -> Box<NodeWriter>,","highlight_start":40,"highlight_end":40}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trait objects without an explicit `dyn` are deprecated\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/smolnetd/scheme/netcfg/nodes.rs:116:30\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m116\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    W: 'static + Fn() -> Box<NodeWriter>,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: use `dyn`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m116\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m    W: 'static + Fn() -> Box<NodeWriter>,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m116\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m    W: 'static + Fn() -> Box<\u001b[0m\u001b[0m\u001b[38;5;10mdyn \u001b[0m\u001b[0mNodeWriter>,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\n\n"}
{"message":"trait objects without an explicit `dyn` are deprecated","code":{"code":"bare_trait_objects","explanation":null},"level":"warning","spans":[{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":2452,"byte_end":2462,"line_start":133,"line_end":133,"column_start":30,"column_end":40,"is_primary":true,"text":[{"text":"    W: 'static + Fn() -> Box<NodeWriter>,","highlight_start":30,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"use `dyn`","code":null,"level":"help","spans":[{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":2452,"byte_end":2452,"line_start":133,"line_end":133,"column_start":30,"column_end":30,"is_primary":true,"text":[{"text":"    W: 'static + Fn() -> Box<NodeWriter>,","highlight_start":30,"highlight_end":30}],"label":null,"suggested_replacement":"dyn ","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":2462,"byte_end":2462,"line_start":133,"line_end":133,"column_start":40,"column_end":40,"is_primary":true,"text":[{"text":"    W: 'static + Fn() -> Box<NodeWriter>,","highlight_start":40,"highlight_end":40}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trait objects without an explicit `dyn` are deprecated\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/smolnetd/scheme/netcfg/nodes.rs:133:30\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m133\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    W: 'static + Fn() -> Box<NodeWriter>,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: use `dyn`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m133\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m    W: 'static + Fn() -> Box<NodeWriter>,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m133\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m    W: 'static + Fn() -> Box<\u001b[0m\u001b[0m\u001b[38;5;10mdyn \u001b[0m\u001b[0mNodeWriter>,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\n\n"}
{"message":"trait objects without an explicit `dyn` are deprecated","code":{"code":"bare_trait_objects","explanation":null},"level":"warning","spans":[{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":2661,"byte_end":2671,"line_start":143,"line_end":143,"column_start":30,"column_end":40,"is_primary":true,"text":[{"text":"    W: 'static + Fn() -> Box<NodeWriter>,","highlight_start":30,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"use `dyn`","code":null,"level":"help","spans":[{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":2661,"byte_end":2661,"line_start":143,"line_end":143,"column_start":30,"column_end":30,"is_primary":true,"text":[{"text":"    W: 'static + Fn() -> Box<NodeWriter>,","highlight_start":30,"highlight_end":30}],"label":null,"suggested_replacement":"dyn ","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":2671,"byte_end":2671,"line_start":143,"line_end":143,"column_start":40,"column_end":40,"is_primary":true,"text":[{"text":"    W: 'static + Fn() -> Box<NodeWriter>,","highlight_start":40,"highlight_end":40}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trait objects without an explicit `dyn` are deprecated\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/smolnetd/scheme/netcfg/nodes.rs:143:30\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m143\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    W: 'static + Fn() -> Box<NodeWriter>,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: use `dyn`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m143\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m    W: 'static + Fn() -> Box<NodeWriter>,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m143\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m    W: 'static + Fn() -> Box<\u001b[0m\u001b[0m\u001b[38;5;10mdyn \u001b[0m\u001b[0mNodeWriter>,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\n\n"}
{"message":"trait objects without an explicit `dyn` are deprecated","code":{"code":"bare_trait_objects","explanation":null},"level":"warning","spans":[{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":2809,"byte_end":2819,"line_start":152,"line_end":152,"column_start":30,"column_end":40,"is_primary":true,"text":[{"text":"    W: 'static + Fn() -> Box<NodeWriter>,","highlight_start":30,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"use `dyn`","code":null,"level":"help","spans":[{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":2809,"byte_end":2809,"line_start":152,"line_end":152,"column_start":30,"column_end":30,"is_primary":true,"text":[{"text":"    W: 'static + Fn() -> Box<NodeWriter>,","highlight_start":30,"highlight_end":30}],"label":null,"suggested_replacement":"dyn ","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":2819,"byte_end":2819,"line_start":152,"line_end":152,"column_start":40,"column_end":40,"is_primary":true,"text":[{"text":"    W: 'static + Fn() -> Box<NodeWriter>,","highlight_start":40,"highlight_end":40}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trait objects without an explicit `dyn` are deprecated\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/smolnetd/scheme/netcfg/nodes.rs:152:30\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m152\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    W: 'static + Fn() -> Box<NodeWriter>,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: use `dyn`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m152\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m    W: 'static + Fn() -> Box<NodeWriter>,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m152\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m    W: 'static + Fn() -> Box<\u001b[0m\u001b[0m\u001b[38;5;10mdyn \u001b[0m\u001b[0mNodeWriter>,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\n\n"}
{"message":"trait objects without an explicit `dyn` are deprecated","code":{"code":"bare_trait_objects","explanation":null},"level":"warning","spans":[{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":3133,"byte_end":3143,"line_start":170,"line_end":170,"column_start":30,"column_end":40,"is_primary":true,"text":[{"text":"    W: 'static + Fn() -> Box<NodeWriter>,","highlight_start":30,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"use `dyn`","code":null,"level":"help","spans":[{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":3133,"byte_end":3133,"line_start":170,"line_end":170,"column_start":30,"column_end":30,"is_primary":true,"text":[{"text":"    W: 'static + Fn() -> Box<NodeWriter>,","highlight_start":30,"highlight_end":30}],"label":null,"suggested_replacement":"dyn ","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":3143,"byte_end":3143,"line_start":170,"line_end":170,"column_start":40,"column_end":40,"is_primary":true,"text":[{"text":"    W: 'static + Fn() -> Box<NodeWriter>,","highlight_start":40,"highlight_end":40}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trait objects without an explicit `dyn` are deprecated\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/smolnetd/scheme/netcfg/nodes.rs:170:30\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m170\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    W: 'static + Fn() -> Box<NodeWriter>,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: use `dyn`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m170\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m    W: 'static + Fn() -> Box<NodeWriter>,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m170\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m    W: 'static + Fn() -> Box<\u001b[0m\u001b[0m\u001b[38;5;10mdyn \u001b[0m\u001b[0mNodeWriter>,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\n\n"}
{"message":"trait objects without an explicit `dyn` are deprecated","code":{"code":"bare_trait_objects","explanation":null},"level":"warning","spans":[{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":1613,"byte_end":1623,"line_start":77,"line_end":77,"column_start":40,"column_end":50,"is_primary":true,"text":[{"text":"    fn new_writer(&self) -> Option<Box<NodeWriter>> {","highlight_start":40,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"use `dyn`","code":null,"level":"help","spans":[{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":1613,"byte_end":1613,"line_start":77,"line_end":77,"column_start":40,"column_end":40,"is_primary":true,"text":[{"text":"    fn new_writer(&self) -> Option<Box<NodeWriter>> {","highlight_start":40,"highlight_end":40}],"label":null,"suggested_replacement":"dyn ","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":1623,"byte_end":1623,"line_start":77,"line_end":77,"column_start":50,"column_end":50,"is_primary":true,"text":[{"text":"    fn new_writer(&self) -> Option<Box<NodeWriter>> {","highlight_start":50,"highlight_end":50}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trait objects without an explicit `dyn` are deprecated\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/smolnetd/scheme/netcfg/nodes.rs:77:40\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m77\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    fn new_writer(&self) -> Option<Box<NodeWriter>> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: use `dyn`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m77\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m    fn new_writer(&self) -> Option<Box<NodeWriter>> {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m77\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m    fn new_writer(&self) -> Option<Box<\u001b[0m\u001b[0m\u001b[38;5;10mdyn \u001b[0m\u001b[0mNodeWriter>> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\n\n"}
{"message":"trait objects without an explicit `dyn` are deprecated","code":{"code":"bare_trait_objects","explanation":null},"level":"warning","spans":[{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":2341,"byte_end":2351,"line_start":126,"line_end":126,"column_start":40,"column_end":50,"is_primary":true,"text":[{"text":"    fn new_writer(&self) -> Option<Box<NodeWriter>> {","highlight_start":40,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"use `dyn`","code":null,"level":"help","spans":[{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":2341,"byte_end":2341,"line_start":126,"line_end":126,"column_start":40,"column_end":40,"is_primary":true,"text":[{"text":"    fn new_writer(&self) -> Option<Box<NodeWriter>> {","highlight_start":40,"highlight_end":40}],"label":null,"suggested_replacement":"dyn ","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":2351,"byte_end":2351,"line_start":126,"line_end":126,"column_start":50,"column_end":50,"is_primary":true,"text":[{"text":"    fn new_writer(&self) -> Option<Box<NodeWriter>> {","highlight_start":50,"highlight_end":50}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trait objects without an explicit `dyn` are deprecated\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/smolnetd/scheme/netcfg/nodes.rs:126:40\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m126\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    fn new_writer(&self) -> Option<Box<NodeWriter>> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: use `dyn`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m126\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m    fn new_writer(&self) -> Option<Box<NodeWriter>> {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m126\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m    fn new_writer(&self) -> Option<Box<\u001b[0m\u001b[0m\u001b[38;5;10mdyn \u001b[0m\u001b[0mNodeWriter>> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\n\n"}
{"message":"trait objects without an explicit `dyn` are deprecated","code":{"code":"bare_trait_objects","explanation":null},"level":"warning","spans":[{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":2983,"byte_end":2993,"line_start":162,"line_end":162,"column_start":40,"column_end":50,"is_primary":true,"text":[{"text":"    fn new_writer(&self) -> Option<Box<NodeWriter>> {","highlight_start":40,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"use `dyn`","code":null,"level":"help","spans":[{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":2983,"byte_end":2983,"line_start":162,"line_end":162,"column_start":40,"column_end":40,"is_primary":true,"text":[{"text":"    fn new_writer(&self) -> Option<Box<NodeWriter>> {","highlight_start":40,"highlight_end":40}],"label":null,"suggested_replacement":"dyn ","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":2993,"byte_end":2993,"line_start":162,"line_end":162,"column_start":50,"column_end":50,"is_primary":true,"text":[{"text":"    fn new_writer(&self) -> Option<Box<NodeWriter>> {","highlight_start":50,"highlight_end":50}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trait objects without an explicit `dyn` are deprecated\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/smolnetd/scheme/netcfg/nodes.rs:162:40\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m162\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    fn new_writer(&self) -> Option<Box<NodeWriter>> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: use `dyn`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m162\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m    fn new_writer(&self) -> Option<Box<NodeWriter>> {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m162\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m    fn new_writer(&self) -> Option<Box<\u001b[0m\u001b[0m\u001b[38;5;10mdyn \u001b[0m\u001b[0mNodeWriter>> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\n\n"}
{"message":"trait objects without an explicit `dyn` are deprecated","code":{"code":"bare_trait_objects","explanation":null},"level":"warning","spans":[{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":5489,"byte_end":5499,"line_start":248,"line_end":248,"column_start":45,"column_end":55,"is_primary":true,"text":[{"text":"            let new_writer = move || -> Box<NodeWriter> {","highlight_start":45,"highlight_end":55}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":6209,"byte_end":6226,"line_start":266,"line_end":266,"column_start":42,"column_end":59,"is_primary":false,"text":[{"text":"            $(children.insert($e.into(), cfg_node!($($t)*));)*","highlight_start":42,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":6209,"byte_end":6226,"line_start":266,"line_end":266,"column_start":42,"column_end":59,"is_primary":false,"text":[{"text":"            $(children.insert($e.into(), cfg_node!($($t)*));)*","highlight_start":42,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/mod.rs","byte_start":1546,"byte_end":11568,"line_start":51,"line_end":273,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    cfg_node!{","highlight_start":5,"highlight_end":15},{"text":"        \"resolv\" => {","highlight_start":1,"highlight_end":22},{"text":"            \"nameserver\" => {","highlight_start":1,"highlight_end":30},{"text":"                rw [dns_config, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":70},{"text":"                || {","highlight_start":1,"highlight_end":21},{"text":"                    format!(\"{}\\n\", dns_config.borrow().name_server)","highlight_start":1,"highlight_end":69},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let ip = Ipv4Address::from_str(line.trim())","highlight_start":1,"highlight_end":68},{"text":"                            .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":79},{"text":"                        if !ip.is_unicast() {","highlight_start":1,"highlight_end":46},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(ip);","highlight_start":1,"highlight_end":47},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(ip) = *cur_value {","highlight_start":1,"highlight_end":51},{"text":"                        dns_config.borrow_mut().name_server = ip;","highlight_start":1,"highlight_end":66},{"text":"                        notifier.borrow_mut().schedule_notify(\"resolv/nameserver\");","highlight_start":1,"highlight_end":84},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    Ok(())","highlight_start":1,"highlight_end":27},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        \"route\" => {","highlight_start":1,"highlight_end":21},{"text":"            \"list\" => {","highlight_start":1,"highlight_end":24},{"text":"                ro [iface] || {","highlight_start":1,"highlight_end":32},{"text":"                    let mut gateway = None;","highlight_start":1,"highlight_end":44},{"text":"                    iface.borrow_mut().routes_mut().update(|map| {","highlight_start":1,"highlight_end":67},{"text":"                        gateway = map.get(&gateway_cidr()).map(|route| route.via_router);","highlight_start":1,"highlight_end":90},{"text":"                    });","highlight_start":1,"highlight_end":24},{"text":"                    if let Some(ip) = gateway {","highlight_start":1,"highlight_end":48},{"text":"                        format!(\"default via {}\\n\", ip)","highlight_start":1,"highlight_end":56},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        String::new()","highlight_start":1,"highlight_end":38},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            \"add\" => {","highlight_start":1,"highlight_end":23},{"text":"                wo [iface, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":65},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let default_gw = parse_default_gw(line)?;","highlight_start":1,"highlight_end":66},{"text":"                        if !default_gw.is_unicast() {","highlight_start":1,"highlight_end":54},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(default_gw);","highlight_start":1,"highlight_end":55},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(default_gw) = *cur_value {","highlight_start":1,"highlight_end":59},{"text":"                        if iface.borrow_mut().routes_mut().add_default_ipv4_route(default_gw).is_err() {","highlight_start":1,"highlight_end":105},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        notifier.borrow_mut().schedule_notify(\"route/list\");","highlight_start":1,"highlight_end":77},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            \"rm\" => {","highlight_start":1,"highlight_end":22},{"text":"                wo [iface, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":65},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let default_gw = parse_default_gw(line)?;","highlight_start":1,"highlight_end":66},{"text":"                        if !default_gw.is_unicast() {","highlight_start":1,"highlight_end":54},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(default_gw);","highlight_start":1,"highlight_end":55},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(default_gw) = *cur_value {","highlight_start":1,"highlight_end":59},{"text":"                        let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":60},{"text":"                        let mut gateway = None;","highlight_start":1,"highlight_end":48},{"text":"                        iface.routes_mut().update(|map| {","highlight_start":1,"highlight_end":58},{"text":"                            gateway = map.get(&gateway_cidr()).map(|route| route.via_router);","highlight_start":1,"highlight_end":94},{"text":"                        });","highlight_start":1,"highlight_end":28},{"text":"                        if gateway != Some(IpAddress::Ipv4(default_gw)) {","highlight_start":1,"highlight_end":74},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        iface.routes_mut().update(|map| {","highlight_start":1,"highlight_end":58},{"text":"                            map.remove(&gateway_cidr());","highlight_start":1,"highlight_end":57},{"text":"                        });","highlight_start":1,"highlight_end":28},{"text":"                        notifier.borrow_mut().schedule_notify(\"route/list\");","highlight_start":1,"highlight_end":77},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        \"ifaces\" => {","highlight_start":1,"highlight_end":22},{"text":"            \"eth0\" => {","highlight_start":1,"highlight_end":24},{"text":"                \"mac\" => {","highlight_start":1,"highlight_end":27},{"text":"                    rw [iface, notifier] (Option<EthernetAddress>, None)","highlight_start":1,"highlight_end":73},{"text":"                    || {","highlight_start":1,"highlight_end":25},{"text":"                        format!(\"{}\\n\", iface.borrow().ethernet_addr())","highlight_start":1,"highlight_end":72},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    |cur_value, line| {","highlight_start":1,"highlight_end":40},{"text":"                        if cur_value.is_none() {","highlight_start":1,"highlight_end":49},{"text":"                            let mac = EthernetAddress::from_str(line).","highlight_start":1,"highlight_end":71},{"text":"                                map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":82},{"text":"                            if !mac.is_unicast() {","highlight_start":1,"highlight_end":51},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            *cur_value = Some(mac);","highlight_start":1,"highlight_end":52},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        } else {","highlight_start":1,"highlight_end":33},{"text":"                            Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":68},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    |cur_value| {","highlight_start":1,"highlight_end":34},{"text":"                        if let Some(mac) = *cur_value {","highlight_start":1,"highlight_end":56},{"text":"                            iface.borrow_mut().set_ethernet_addr(mac);","highlight_start":1,"highlight_end":71},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/mac\");","highlight_start":1,"highlight_end":86},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"                \"addr\" => {","highlight_start":1,"highlight_end":28},{"text":"                    \"list\" => {","highlight_start":1,"highlight_end":32},{"text":"                        ro [iface]","highlight_start":1,"highlight_end":35},{"text":"                        || {","highlight_start":1,"highlight_end":29},{"text":"                            let mut ips = String::new();","highlight_start":1,"highlight_end":57},{"text":"                            for cidr in iface.borrow().ip_addrs() {","highlight_start":1,"highlight_end":68},{"text":"                                ips += &format!(\"{}\\n\", cidr);","highlight_start":1,"highlight_end":63},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            ips","highlight_start":1,"highlight_end":32},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"set\" => {","highlight_start":1,"highlight_end":31},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            if !cur_value.is_empty() {","highlight_start":1,"highlight_end":55},{"text":"                                let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":68},{"text":"                                let mut cidrs = vec![];","highlight_start":1,"highlight_end":56},{"text":"                                mem::swap(cur_value, &mut cidrs);","highlight_start":1,"highlight_end":66},{"text":"                                iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":60},{"text":"                                    *s = From::from(cidrs);","highlight_start":1,"highlight_end":60},{"text":"                                });","highlight_start":1,"highlight_end":36},{"text":"                                notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":96},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"add\" => {","highlight_start":1,"highlight_end":31},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":64},{"text":"                            let mut cidrs = iface.ip_addrs().to_vec();","highlight_start":1,"highlight_end":71},{"text":"                            for cidr in cur_value {","highlight_start":1,"highlight_end":52},{"text":"                                cidrs.insert(0, *cidr);","highlight_start":1,"highlight_end":56},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":56},{"text":"                                *s = From::from(cidrs);","highlight_start":1,"highlight_end":56},{"text":"                            });","highlight_start":1,"highlight_end":32},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":92},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"rm\" => {","highlight_start":1,"highlight_end":30},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":64},{"text":"                            let mut cidrs = iface.ip_addrs().to_vec();","highlight_start":1,"highlight_end":71},{"text":"                            for cidr in cur_value {","highlight_start":1,"highlight_end":52},{"text":"                                let pre_retain_len = cidrs.len();","highlight_start":1,"highlight_end":66},{"text":"                                cidrs.retain(|&c| c != *cidr);","highlight_start":1,"highlight_end":63},{"text":"                                if pre_retain_len == cidrs.len() {","highlight_start":1,"highlight_end":67},{"text":"                                    return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":84},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":56},{"text":"                                *s = From::from(cidrs);","highlight_start":1,"highlight_end":56},{"text":"                            });","highlight_start":1,"highlight_end":32},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":92},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"use `dyn`","code":null,"level":"help","spans":[{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":5489,"byte_end":5489,"line_start":248,"line_end":248,"column_start":45,"column_end":45,"is_primary":true,"text":[{"text":"            let new_writer = move || -> Box<NodeWriter> {","highlight_start":45,"highlight_end":45}],"label":null,"suggested_replacement":"dyn ","suggestion_applicability":"MachineApplicable","expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":6209,"byte_end":6226,"line_start":266,"line_end":266,"column_start":42,"column_end":59,"is_primary":false,"text":[{"text":"            $(children.insert($e.into(), cfg_node!($($t)*));)*","highlight_start":42,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":6209,"byte_end":6226,"line_start":266,"line_end":266,"column_start":42,"column_end":59,"is_primary":false,"text":[{"text":"            $(children.insert($e.into(), cfg_node!($($t)*));)*","highlight_start":42,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/mod.rs","byte_start":1546,"byte_end":11568,"line_start":51,"line_end":273,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    cfg_node!{","highlight_start":5,"highlight_end":15},{"text":"        \"resolv\" => {","highlight_start":1,"highlight_end":22},{"text":"            \"nameserver\" => {","highlight_start":1,"highlight_end":30},{"text":"                rw [dns_config, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":70},{"text":"                || {","highlight_start":1,"highlight_end":21},{"text":"                    format!(\"{}\\n\", dns_config.borrow().name_server)","highlight_start":1,"highlight_end":69},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let ip = Ipv4Address::from_str(line.trim())","highlight_start":1,"highlight_end":68},{"text":"                            .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":79},{"text":"                        if !ip.is_unicast() {","highlight_start":1,"highlight_end":46},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(ip);","highlight_start":1,"highlight_end":47},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(ip) = *cur_value {","highlight_start":1,"highlight_end":51},{"text":"                        dns_config.borrow_mut().name_server = ip;","highlight_start":1,"highlight_end":66},{"text":"                        notifier.borrow_mut().schedule_notify(\"resolv/nameserver\");","highlight_start":1,"highlight_end":84},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    Ok(())","highlight_start":1,"highlight_end":27},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        \"route\" => {","highlight_start":1,"highlight_end":21},{"text":"            \"list\" => {","highlight_start":1,"highlight_end":24},{"text":"                ro [iface] || {","highlight_start":1,"highlight_end":32},{"text":"                    let mut gateway = None;","highlight_start":1,"highlight_end":44},{"text":"                    iface.borrow_mut().routes_mut().update(|map| {","highlight_start":1,"highlight_end":67},{"text":"                        gateway = map.get(&gateway_cidr()).map(|route| route.via_router);","highlight_start":1,"highlight_end":90},{"text":"                    });","highlight_start":1,"highlight_end":24},{"text":"                    if let Some(ip) = gateway {","highlight_start":1,"highlight_end":48},{"text":"                        format!(\"default via {}\\n\", ip)","highlight_start":1,"highlight_end":56},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        String::new()","highlight_start":1,"highlight_end":38},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            \"add\" => {","highlight_start":1,"highlight_end":23},{"text":"                wo [iface, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":65},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let default_gw = parse_default_gw(line)?;","highlight_start":1,"highlight_end":66},{"text":"                        if !default_gw.is_unicast() {","highlight_start":1,"highlight_end":54},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(default_gw);","highlight_start":1,"highlight_end":55},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(default_gw) = *cur_value {","highlight_start":1,"highlight_end":59},{"text":"                        if iface.borrow_mut().routes_mut().add_default_ipv4_route(default_gw).is_err() {","highlight_start":1,"highlight_end":105},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        notifier.borrow_mut().schedule_notify(\"route/list\");","highlight_start":1,"highlight_end":77},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            \"rm\" => {","highlight_start":1,"highlight_end":22},{"text":"                wo [iface, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":65},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let default_gw = parse_default_gw(line)?;","highlight_start":1,"highlight_end":66},{"text":"                        if !default_gw.is_unicast() {","highlight_start":1,"highlight_end":54},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(default_gw);","highlight_start":1,"highlight_end":55},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(default_gw) = *cur_value {","highlight_start":1,"highlight_end":59},{"text":"                        let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":60},{"text":"                        let mut gateway = None;","highlight_start":1,"highlight_end":48},{"text":"                        iface.routes_mut().update(|map| {","highlight_start":1,"highlight_end":58},{"text":"                            gateway = map.get(&gateway_cidr()).map(|route| route.via_router);","highlight_start":1,"highlight_end":94},{"text":"                        });","highlight_start":1,"highlight_end":28},{"text":"                        if gateway != Some(IpAddress::Ipv4(default_gw)) {","highlight_start":1,"highlight_end":74},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        iface.routes_mut().update(|map| {","highlight_start":1,"highlight_end":58},{"text":"                            map.remove(&gateway_cidr());","highlight_start":1,"highlight_end":57},{"text":"                        });","highlight_start":1,"highlight_end":28},{"text":"                        notifier.borrow_mut().schedule_notify(\"route/list\");","highlight_start":1,"highlight_end":77},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        \"ifaces\" => {","highlight_start":1,"highlight_end":22},{"text":"            \"eth0\" => {","highlight_start":1,"highlight_end":24},{"text":"                \"mac\" => {","highlight_start":1,"highlight_end":27},{"text":"                    rw [iface, notifier] (Option<EthernetAddress>, None)","highlight_start":1,"highlight_end":73},{"text":"                    || {","highlight_start":1,"highlight_end":25},{"text":"                        format!(\"{}\\n\", iface.borrow().ethernet_addr())","highlight_start":1,"highlight_end":72},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    |cur_value, line| {","highlight_start":1,"highlight_end":40},{"text":"                        if cur_value.is_none() {","highlight_start":1,"highlight_end":49},{"text":"                            let mac = EthernetAddress::from_str(line).","highlight_start":1,"highlight_end":71},{"text":"                                map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":82},{"text":"                            if !mac.is_unicast() {","highlight_start":1,"highlight_end":51},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            *cur_value = Some(mac);","highlight_start":1,"highlight_end":52},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        } else {","highlight_start":1,"highlight_end":33},{"text":"                            Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":68},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    |cur_value| {","highlight_start":1,"highlight_end":34},{"text":"                        if let Some(mac) = *cur_value {","highlight_start":1,"highlight_end":56},{"text":"                            iface.borrow_mut().set_ethernet_addr(mac);","highlight_start":1,"highlight_end":71},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/mac\");","highlight_start":1,"highlight_end":86},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"                \"addr\" => {","highlight_start":1,"highlight_end":28},{"text":"                    \"list\" => {","highlight_start":1,"highlight_end":32},{"text":"                        ro [iface]","highlight_start":1,"highlight_end":35},{"text":"                        || {","highlight_start":1,"highlight_end":29},{"text":"                            let mut ips = String::new();","highlight_start":1,"highlight_end":57},{"text":"                            for cidr in iface.borrow().ip_addrs() {","highlight_start":1,"highlight_end":68},{"text":"                                ips += &format!(\"{}\\n\", cidr);","highlight_start":1,"highlight_end":63},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            ips","highlight_start":1,"highlight_end":32},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"set\" => {","highlight_start":1,"highlight_end":31},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            if !cur_value.is_empty() {","highlight_start":1,"highlight_end":55},{"text":"                                let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":68},{"text":"                                let mut cidrs = vec![];","highlight_start":1,"highlight_end":56},{"text":"                                mem::swap(cur_value, &mut cidrs);","highlight_start":1,"highlight_end":66},{"text":"                                iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":60},{"text":"                                    *s = From::from(cidrs);","highlight_start":1,"highlight_end":60},{"text":"                                });","highlight_start":1,"highlight_end":36},{"text":"                                notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":96},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"add\" => {","highlight_start":1,"highlight_end":31},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":64},{"text":"                            let mut cidrs = iface.ip_addrs().to_vec();","highlight_start":1,"highlight_end":71},{"text":"                            for cidr in cur_value {","highlight_start":1,"highlight_end":52},{"text":"                                cidrs.insert(0, *cidr);","highlight_start":1,"highlight_end":56},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":56},{"text":"                                *s = From::from(cidrs);","highlight_start":1,"highlight_end":56},{"text":"                            });","highlight_start":1,"highlight_end":32},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":92},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"rm\" => {","highlight_start":1,"highlight_end":30},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":64},{"text":"                            let mut cidrs = iface.ip_addrs().to_vec();","highlight_start":1,"highlight_end":71},{"text":"                            for cidr in cur_value {","highlight_start":1,"highlight_end":52},{"text":"                                let pre_retain_len = cidrs.len();","highlight_start":1,"highlight_end":66},{"text":"                                cidrs.retain(|&c| c != *cidr);","highlight_start":1,"highlight_end":63},{"text":"                                if pre_retain_len == cidrs.len() {","highlight_start":1,"highlight_end":67},{"text":"                                    return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":84},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":56},{"text":"                                *s = From::from(cidrs);","highlight_start":1,"highlight_end":56},{"text":"                            });","highlight_start":1,"highlight_end":32},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":92},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":5499,"byte_end":5499,"line_start":248,"line_end":248,"column_start":55,"column_end":55,"is_primary":true,"text":[{"text":"            let new_writer = move || -> Box<NodeWriter> {","highlight_start":55,"highlight_end":55}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":6209,"byte_end":6226,"line_start":266,"line_end":266,"column_start":42,"column_end":59,"is_primary":false,"text":[{"text":"            $(children.insert($e.into(), cfg_node!($($t)*));)*","highlight_start":42,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":6209,"byte_end":6226,"line_start":266,"line_end":266,"column_start":42,"column_end":59,"is_primary":false,"text":[{"text":"            $(children.insert($e.into(), cfg_node!($($t)*));)*","highlight_start":42,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/mod.rs","byte_start":1546,"byte_end":11568,"line_start":51,"line_end":273,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    cfg_node!{","highlight_start":5,"highlight_end":15},{"text":"        \"resolv\" => {","highlight_start":1,"highlight_end":22},{"text":"            \"nameserver\" => {","highlight_start":1,"highlight_end":30},{"text":"                rw [dns_config, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":70},{"text":"                || {","highlight_start":1,"highlight_end":21},{"text":"                    format!(\"{}\\n\", dns_config.borrow().name_server)","highlight_start":1,"highlight_end":69},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let ip = Ipv4Address::from_str(line.trim())","highlight_start":1,"highlight_end":68},{"text":"                            .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":79},{"text":"                        if !ip.is_unicast() {","highlight_start":1,"highlight_end":46},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(ip);","highlight_start":1,"highlight_end":47},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(ip) = *cur_value {","highlight_start":1,"highlight_end":51},{"text":"                        dns_config.borrow_mut().name_server = ip;","highlight_start":1,"highlight_end":66},{"text":"                        notifier.borrow_mut().schedule_notify(\"resolv/nameserver\");","highlight_start":1,"highlight_end":84},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    Ok(())","highlight_start":1,"highlight_end":27},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        \"route\" => {","highlight_start":1,"highlight_end":21},{"text":"            \"list\" => {","highlight_start":1,"highlight_end":24},{"text":"                ro [iface] || {","highlight_start":1,"highlight_end":32},{"text":"                    let mut gateway = None;","highlight_start":1,"highlight_end":44},{"text":"                    iface.borrow_mut().routes_mut().update(|map| {","highlight_start":1,"highlight_end":67},{"text":"                        gateway = map.get(&gateway_cidr()).map(|route| route.via_router);","highlight_start":1,"highlight_end":90},{"text":"                    });","highlight_start":1,"highlight_end":24},{"text":"                    if let Some(ip) = gateway {","highlight_start":1,"highlight_end":48},{"text":"                        format!(\"default via {}\\n\", ip)","highlight_start":1,"highlight_end":56},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        String::new()","highlight_start":1,"highlight_end":38},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            \"add\" => {","highlight_start":1,"highlight_end":23},{"text":"                wo [iface, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":65},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let default_gw = parse_default_gw(line)?;","highlight_start":1,"highlight_end":66},{"text":"                        if !default_gw.is_unicast() {","highlight_start":1,"highlight_end":54},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(default_gw);","highlight_start":1,"highlight_end":55},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(default_gw) = *cur_value {","highlight_start":1,"highlight_end":59},{"text":"                        if iface.borrow_mut().routes_mut().add_default_ipv4_route(default_gw).is_err() {","highlight_start":1,"highlight_end":105},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        notifier.borrow_mut().schedule_notify(\"route/list\");","highlight_start":1,"highlight_end":77},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            \"rm\" => {","highlight_start":1,"highlight_end":22},{"text":"                wo [iface, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":65},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let default_gw = parse_default_gw(line)?;","highlight_start":1,"highlight_end":66},{"text":"                        if !default_gw.is_unicast() {","highlight_start":1,"highlight_end":54},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(default_gw);","highlight_start":1,"highlight_end":55},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(default_gw) = *cur_value {","highlight_start":1,"highlight_end":59},{"text":"                        let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":60},{"text":"                        let mut gateway = None;","highlight_start":1,"highlight_end":48},{"text":"                        iface.routes_mut().update(|map| {","highlight_start":1,"highlight_end":58},{"text":"                            gateway = map.get(&gateway_cidr()).map(|route| route.via_router);","highlight_start":1,"highlight_end":94},{"text":"                        });","highlight_start":1,"highlight_end":28},{"text":"                        if gateway != Some(IpAddress::Ipv4(default_gw)) {","highlight_start":1,"highlight_end":74},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        iface.routes_mut().update(|map| {","highlight_start":1,"highlight_end":58},{"text":"                            map.remove(&gateway_cidr());","highlight_start":1,"highlight_end":57},{"text":"                        });","highlight_start":1,"highlight_end":28},{"text":"                        notifier.borrow_mut().schedule_notify(\"route/list\");","highlight_start":1,"highlight_end":77},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        \"ifaces\" => {","highlight_start":1,"highlight_end":22},{"text":"            \"eth0\" => {","highlight_start":1,"highlight_end":24},{"text":"                \"mac\" => {","highlight_start":1,"highlight_end":27},{"text":"                    rw [iface, notifier] (Option<EthernetAddress>, None)","highlight_start":1,"highlight_end":73},{"text":"                    || {","highlight_start":1,"highlight_end":25},{"text":"                        format!(\"{}\\n\", iface.borrow().ethernet_addr())","highlight_start":1,"highlight_end":72},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    |cur_value, line| {","highlight_start":1,"highlight_end":40},{"text":"                        if cur_value.is_none() {","highlight_start":1,"highlight_end":49},{"text":"                            let mac = EthernetAddress::from_str(line).","highlight_start":1,"highlight_end":71},{"text":"                                map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":82},{"text":"                            if !mac.is_unicast() {","highlight_start":1,"highlight_end":51},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            *cur_value = Some(mac);","highlight_start":1,"highlight_end":52},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        } else {","highlight_start":1,"highlight_end":33},{"text":"                            Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":68},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    |cur_value| {","highlight_start":1,"highlight_end":34},{"text":"                        if let Some(mac) = *cur_value {","highlight_start":1,"highlight_end":56},{"text":"                            iface.borrow_mut().set_ethernet_addr(mac);","highlight_start":1,"highlight_end":71},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/mac\");","highlight_start":1,"highlight_end":86},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"                \"addr\" => {","highlight_start":1,"highlight_end":28},{"text":"                    \"list\" => {","highlight_start":1,"highlight_end":32},{"text":"                        ro [iface]","highlight_start":1,"highlight_end":35},{"text":"                        || {","highlight_start":1,"highlight_end":29},{"text":"                            let mut ips = String::new();","highlight_start":1,"highlight_end":57},{"text":"                            for cidr in iface.borrow().ip_addrs() {","highlight_start":1,"highlight_end":68},{"text":"                                ips += &format!(\"{}\\n\", cidr);","highlight_start":1,"highlight_end":63},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            ips","highlight_start":1,"highlight_end":32},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"set\" => {","highlight_start":1,"highlight_end":31},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            if !cur_value.is_empty() {","highlight_start":1,"highlight_end":55},{"text":"                                let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":68},{"text":"                                let mut cidrs = vec![];","highlight_start":1,"highlight_end":56},{"text":"                                mem::swap(cur_value, &mut cidrs);","highlight_start":1,"highlight_end":66},{"text":"                                iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":60},{"text":"                                    *s = From::from(cidrs);","highlight_start":1,"highlight_end":60},{"text":"                                });","highlight_start":1,"highlight_end":36},{"text":"                                notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":96},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"add\" => {","highlight_start":1,"highlight_end":31},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":64},{"text":"                            let mut cidrs = iface.ip_addrs().to_vec();","highlight_start":1,"highlight_end":71},{"text":"                            for cidr in cur_value {","highlight_start":1,"highlight_end":52},{"text":"                                cidrs.insert(0, *cidr);","highlight_start":1,"highlight_end":56},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":56},{"text":"                                *s = From::from(cidrs);","highlight_start":1,"highlight_end":56},{"text":"                            });","highlight_start":1,"highlight_end":32},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":92},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"rm\" => {","highlight_start":1,"highlight_end":30},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":64},{"text":"                            let mut cidrs = iface.ip_addrs().to_vec();","highlight_start":1,"highlight_end":71},{"text":"                            for cidr in cur_value {","highlight_start":1,"highlight_end":52},{"text":"                                let pre_retain_len = cidrs.len();","highlight_start":1,"highlight_end":66},{"text":"                                cidrs.retain(|&c| c != *cidr);","highlight_start":1,"highlight_end":63},{"text":"                                if pre_retain_len == cidrs.len() {","highlight_start":1,"highlight_end":67},{"text":"                                    return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":84},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":56},{"text":"                                *s = From::from(cidrs);","highlight_start":1,"highlight_end":56},{"text":"                            });","highlight_start":1,"highlight_end":32},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":92},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trait objects without an explicit `dyn` are deprecated\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/smolnetd/scheme/netcfg/nodes.rs:248:45\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m248\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m            let new_writer = move || -> Box<NodeWriter> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                              \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0msrc/smolnetd/scheme/netcfg/mod.rs:51:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m51\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    cfg_node!{\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m52\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        \"resolv\" => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m53\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            \"nameserver\" => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m54\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                rw [dns_config, notifier] (Option<Ipv4Address>, None)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m272\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m273\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_____-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `cfg_node` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: use `dyn`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m248\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m            let new_writer = move || -> Box<NodeWriter> {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m248\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m            let new_writer = move || -> Box<\u001b[0m\u001b[0m\u001b[38;5;10mdyn \u001b[0m\u001b[0mNodeWriter> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\n\n"}
{"message":"trait objects without an explicit `dyn` are deprecated","code":{"code":"bare_trait_objects","explanation":null},"level":"warning","spans":[{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4502,"byte_end":4512,"line_start":225,"line_end":225,"column_start":45,"column_end":55,"is_primary":true,"text":[{"text":"            let new_writer = move || -> Box<NodeWriter> {","highlight_start":45,"highlight_end":55}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":6209,"byte_end":6226,"line_start":266,"line_end":266,"column_start":42,"column_end":59,"is_primary":false,"text":[{"text":"            $(children.insert($e.into(), cfg_node!($($t)*));)*","highlight_start":42,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":6209,"byte_end":6226,"line_start":266,"line_end":266,"column_start":42,"column_end":59,"is_primary":false,"text":[{"text":"            $(children.insert($e.into(), cfg_node!($($t)*));)*","highlight_start":42,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/mod.rs","byte_start":1546,"byte_end":11568,"line_start":51,"line_end":273,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    cfg_node!{","highlight_start":5,"highlight_end":15},{"text":"        \"resolv\" => {","highlight_start":1,"highlight_end":22},{"text":"            \"nameserver\" => {","highlight_start":1,"highlight_end":30},{"text":"                rw [dns_config, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":70},{"text":"                || {","highlight_start":1,"highlight_end":21},{"text":"                    format!(\"{}\\n\", dns_config.borrow().name_server)","highlight_start":1,"highlight_end":69},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let ip = Ipv4Address::from_str(line.trim())","highlight_start":1,"highlight_end":68},{"text":"                            .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":79},{"text":"                        if !ip.is_unicast() {","highlight_start":1,"highlight_end":46},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(ip);","highlight_start":1,"highlight_end":47},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(ip) = *cur_value {","highlight_start":1,"highlight_end":51},{"text":"                        dns_config.borrow_mut().name_server = ip;","highlight_start":1,"highlight_end":66},{"text":"                        notifier.borrow_mut().schedule_notify(\"resolv/nameserver\");","highlight_start":1,"highlight_end":84},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    Ok(())","highlight_start":1,"highlight_end":27},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        \"route\" => {","highlight_start":1,"highlight_end":21},{"text":"            \"list\" => {","highlight_start":1,"highlight_end":24},{"text":"                ro [iface] || {","highlight_start":1,"highlight_end":32},{"text":"                    let mut gateway = None;","highlight_start":1,"highlight_end":44},{"text":"                    iface.borrow_mut().routes_mut().update(|map| {","highlight_start":1,"highlight_end":67},{"text":"                        gateway = map.get(&gateway_cidr()).map(|route| route.via_router);","highlight_start":1,"highlight_end":90},{"text":"                    });","highlight_start":1,"highlight_end":24},{"text":"                    if let Some(ip) = gateway {","highlight_start":1,"highlight_end":48},{"text":"                        format!(\"default via {}\\n\", ip)","highlight_start":1,"highlight_end":56},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        String::new()","highlight_start":1,"highlight_end":38},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            \"add\" => {","highlight_start":1,"highlight_end":23},{"text":"                wo [iface, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":65},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let default_gw = parse_default_gw(line)?;","highlight_start":1,"highlight_end":66},{"text":"                        if !default_gw.is_unicast() {","highlight_start":1,"highlight_end":54},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(default_gw);","highlight_start":1,"highlight_end":55},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(default_gw) = *cur_value {","highlight_start":1,"highlight_end":59},{"text":"                        if iface.borrow_mut().routes_mut().add_default_ipv4_route(default_gw).is_err() {","highlight_start":1,"highlight_end":105},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        notifier.borrow_mut().schedule_notify(\"route/list\");","highlight_start":1,"highlight_end":77},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            \"rm\" => {","highlight_start":1,"highlight_end":22},{"text":"                wo [iface, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":65},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let default_gw = parse_default_gw(line)?;","highlight_start":1,"highlight_end":66},{"text":"                        if !default_gw.is_unicast() {","highlight_start":1,"highlight_end":54},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(default_gw);","highlight_start":1,"highlight_end":55},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(default_gw) = *cur_value {","highlight_start":1,"highlight_end":59},{"text":"                        let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":60},{"text":"                        let mut gateway = None;","highlight_start":1,"highlight_end":48},{"text":"                        iface.routes_mut().update(|map| {","highlight_start":1,"highlight_end":58},{"text":"                            gateway = map.get(&gateway_cidr()).map(|route| route.via_router);","highlight_start":1,"highlight_end":94},{"text":"                        });","highlight_start":1,"highlight_end":28},{"text":"                        if gateway != Some(IpAddress::Ipv4(default_gw)) {","highlight_start":1,"highlight_end":74},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        iface.routes_mut().update(|map| {","highlight_start":1,"highlight_end":58},{"text":"                            map.remove(&gateway_cidr());","highlight_start":1,"highlight_end":57},{"text":"                        });","highlight_start":1,"highlight_end":28},{"text":"                        notifier.borrow_mut().schedule_notify(\"route/list\");","highlight_start":1,"highlight_end":77},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        \"ifaces\" => {","highlight_start":1,"highlight_end":22},{"text":"            \"eth0\" => {","highlight_start":1,"highlight_end":24},{"text":"                \"mac\" => {","highlight_start":1,"highlight_end":27},{"text":"                    rw [iface, notifier] (Option<EthernetAddress>, None)","highlight_start":1,"highlight_end":73},{"text":"                    || {","highlight_start":1,"highlight_end":25},{"text":"                        format!(\"{}\\n\", iface.borrow().ethernet_addr())","highlight_start":1,"highlight_end":72},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    |cur_value, line| {","highlight_start":1,"highlight_end":40},{"text":"                        if cur_value.is_none() {","highlight_start":1,"highlight_end":49},{"text":"                            let mac = EthernetAddress::from_str(line).","highlight_start":1,"highlight_end":71},{"text":"                                map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":82},{"text":"                            if !mac.is_unicast() {","highlight_start":1,"highlight_end":51},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            *cur_value = Some(mac);","highlight_start":1,"highlight_end":52},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        } else {","highlight_start":1,"highlight_end":33},{"text":"                            Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":68},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    |cur_value| {","highlight_start":1,"highlight_end":34},{"text":"                        if let Some(mac) = *cur_value {","highlight_start":1,"highlight_end":56},{"text":"                            iface.borrow_mut().set_ethernet_addr(mac);","highlight_start":1,"highlight_end":71},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/mac\");","highlight_start":1,"highlight_end":86},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"                \"addr\" => {","highlight_start":1,"highlight_end":28},{"text":"                    \"list\" => {","highlight_start":1,"highlight_end":32},{"text":"                        ro [iface]","highlight_start":1,"highlight_end":35},{"text":"                        || {","highlight_start":1,"highlight_end":29},{"text":"                            let mut ips = String::new();","highlight_start":1,"highlight_end":57},{"text":"                            for cidr in iface.borrow().ip_addrs() {","highlight_start":1,"highlight_end":68},{"text":"                                ips += &format!(\"{}\\n\", cidr);","highlight_start":1,"highlight_end":63},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            ips","highlight_start":1,"highlight_end":32},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"set\" => {","highlight_start":1,"highlight_end":31},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            if !cur_value.is_empty() {","highlight_start":1,"highlight_end":55},{"text":"                                let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":68},{"text":"                                let mut cidrs = vec![];","highlight_start":1,"highlight_end":56},{"text":"                                mem::swap(cur_value, &mut cidrs);","highlight_start":1,"highlight_end":66},{"text":"                                iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":60},{"text":"                                    *s = From::from(cidrs);","highlight_start":1,"highlight_end":60},{"text":"                                });","highlight_start":1,"highlight_end":36},{"text":"                                notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":96},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"add\" => {","highlight_start":1,"highlight_end":31},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":64},{"text":"                            let mut cidrs = iface.ip_addrs().to_vec();","highlight_start":1,"highlight_end":71},{"text":"                            for cidr in cur_value {","highlight_start":1,"highlight_end":52},{"text":"                                cidrs.insert(0, *cidr);","highlight_start":1,"highlight_end":56},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":56},{"text":"                                *s = From::from(cidrs);","highlight_start":1,"highlight_end":56},{"text":"                            });","highlight_start":1,"highlight_end":32},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":92},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"rm\" => {","highlight_start":1,"highlight_end":30},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":64},{"text":"                            let mut cidrs = iface.ip_addrs().to_vec();","highlight_start":1,"highlight_end":71},{"text":"                            for cidr in cur_value {","highlight_start":1,"highlight_end":52},{"text":"                                let pre_retain_len = cidrs.len();","highlight_start":1,"highlight_end":66},{"text":"                                cidrs.retain(|&c| c != *cidr);","highlight_start":1,"highlight_end":63},{"text":"                                if pre_retain_len == cidrs.len() {","highlight_start":1,"highlight_end":67},{"text":"                                    return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":84},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":56},{"text":"                                *s = From::from(cidrs);","highlight_start":1,"highlight_end":56},{"text":"                            });","highlight_start":1,"highlight_end":32},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":92},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"use `dyn`","code":null,"level":"help","spans":[{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4502,"byte_end":4502,"line_start":225,"line_end":225,"column_start":45,"column_end":45,"is_primary":true,"text":[{"text":"            let new_writer = move || -> Box<NodeWriter> {","highlight_start":45,"highlight_end":45}],"label":null,"suggested_replacement":"dyn ","suggestion_applicability":"MachineApplicable","expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":6209,"byte_end":6226,"line_start":266,"line_end":266,"column_start":42,"column_end":59,"is_primary":false,"text":[{"text":"            $(children.insert($e.into(), cfg_node!($($t)*));)*","highlight_start":42,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":6209,"byte_end":6226,"line_start":266,"line_end":266,"column_start":42,"column_end":59,"is_primary":false,"text":[{"text":"            $(children.insert($e.into(), cfg_node!($($t)*));)*","highlight_start":42,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/mod.rs","byte_start":1546,"byte_end":11568,"line_start":51,"line_end":273,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    cfg_node!{","highlight_start":5,"highlight_end":15},{"text":"        \"resolv\" => {","highlight_start":1,"highlight_end":22},{"text":"            \"nameserver\" => {","highlight_start":1,"highlight_end":30},{"text":"                rw [dns_config, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":70},{"text":"                || {","highlight_start":1,"highlight_end":21},{"text":"                    format!(\"{}\\n\", dns_config.borrow().name_server)","highlight_start":1,"highlight_end":69},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let ip = Ipv4Address::from_str(line.trim())","highlight_start":1,"highlight_end":68},{"text":"                            .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":79},{"text":"                        if !ip.is_unicast() {","highlight_start":1,"highlight_end":46},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(ip);","highlight_start":1,"highlight_end":47},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(ip) = *cur_value {","highlight_start":1,"highlight_end":51},{"text":"                        dns_config.borrow_mut().name_server = ip;","highlight_start":1,"highlight_end":66},{"text":"                        notifier.borrow_mut().schedule_notify(\"resolv/nameserver\");","highlight_start":1,"highlight_end":84},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    Ok(())","highlight_start":1,"highlight_end":27},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        \"route\" => {","highlight_start":1,"highlight_end":21},{"text":"            \"list\" => {","highlight_start":1,"highlight_end":24},{"text":"                ro [iface] || {","highlight_start":1,"highlight_end":32},{"text":"                    let mut gateway = None;","highlight_start":1,"highlight_end":44},{"text":"                    iface.borrow_mut().routes_mut().update(|map| {","highlight_start":1,"highlight_end":67},{"text":"                        gateway = map.get(&gateway_cidr()).map(|route| route.via_router);","highlight_start":1,"highlight_end":90},{"text":"                    });","highlight_start":1,"highlight_end":24},{"text":"                    if let Some(ip) = gateway {","highlight_start":1,"highlight_end":48},{"text":"                        format!(\"default via {}\\n\", ip)","highlight_start":1,"highlight_end":56},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        String::new()","highlight_start":1,"highlight_end":38},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            \"add\" => {","highlight_start":1,"highlight_end":23},{"text":"                wo [iface, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":65},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let default_gw = parse_default_gw(line)?;","highlight_start":1,"highlight_end":66},{"text":"                        if !default_gw.is_unicast() {","highlight_start":1,"highlight_end":54},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(default_gw);","highlight_start":1,"highlight_end":55},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(default_gw) = *cur_value {","highlight_start":1,"highlight_end":59},{"text":"                        if iface.borrow_mut().routes_mut().add_default_ipv4_route(default_gw).is_err() {","highlight_start":1,"highlight_end":105},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        notifier.borrow_mut().schedule_notify(\"route/list\");","highlight_start":1,"highlight_end":77},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            \"rm\" => {","highlight_start":1,"highlight_end":22},{"text":"                wo [iface, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":65},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let default_gw = parse_default_gw(line)?;","highlight_start":1,"highlight_end":66},{"text":"                        if !default_gw.is_unicast() {","highlight_start":1,"highlight_end":54},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(default_gw);","highlight_start":1,"highlight_end":55},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(default_gw) = *cur_value {","highlight_start":1,"highlight_end":59},{"text":"                        let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":60},{"text":"                        let mut gateway = None;","highlight_start":1,"highlight_end":48},{"text":"                        iface.routes_mut().update(|map| {","highlight_start":1,"highlight_end":58},{"text":"                            gateway = map.get(&gateway_cidr()).map(|route| route.via_router);","highlight_start":1,"highlight_end":94},{"text":"                        });","highlight_start":1,"highlight_end":28},{"text":"                        if gateway != Some(IpAddress::Ipv4(default_gw)) {","highlight_start":1,"highlight_end":74},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        iface.routes_mut().update(|map| {","highlight_start":1,"highlight_end":58},{"text":"                            map.remove(&gateway_cidr());","highlight_start":1,"highlight_end":57},{"text":"                        });","highlight_start":1,"highlight_end":28},{"text":"                        notifier.borrow_mut().schedule_notify(\"route/list\");","highlight_start":1,"highlight_end":77},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        \"ifaces\" => {","highlight_start":1,"highlight_end":22},{"text":"            \"eth0\" => {","highlight_start":1,"highlight_end":24},{"text":"                \"mac\" => {","highlight_start":1,"highlight_end":27},{"text":"                    rw [iface, notifier] (Option<EthernetAddress>, None)","highlight_start":1,"highlight_end":73},{"text":"                    || {","highlight_start":1,"highlight_end":25},{"text":"                        format!(\"{}\\n\", iface.borrow().ethernet_addr())","highlight_start":1,"highlight_end":72},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    |cur_value, line| {","highlight_start":1,"highlight_end":40},{"text":"                        if cur_value.is_none() {","highlight_start":1,"highlight_end":49},{"text":"                            let mac = EthernetAddress::from_str(line).","highlight_start":1,"highlight_end":71},{"text":"                                map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":82},{"text":"                            if !mac.is_unicast() {","highlight_start":1,"highlight_end":51},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            *cur_value = Some(mac);","highlight_start":1,"highlight_end":52},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        } else {","highlight_start":1,"highlight_end":33},{"text":"                            Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":68},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    |cur_value| {","highlight_start":1,"highlight_end":34},{"text":"                        if let Some(mac) = *cur_value {","highlight_start":1,"highlight_end":56},{"text":"                            iface.borrow_mut().set_ethernet_addr(mac);","highlight_start":1,"highlight_end":71},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/mac\");","highlight_start":1,"highlight_end":86},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"                \"addr\" => {","highlight_start":1,"highlight_end":28},{"text":"                    \"list\" => {","highlight_start":1,"highlight_end":32},{"text":"                        ro [iface]","highlight_start":1,"highlight_end":35},{"text":"                        || {","highlight_start":1,"highlight_end":29},{"text":"                            let mut ips = String::new();","highlight_start":1,"highlight_end":57},{"text":"                            for cidr in iface.borrow().ip_addrs() {","highlight_start":1,"highlight_end":68},{"text":"                                ips += &format!(\"{}\\n\", cidr);","highlight_start":1,"highlight_end":63},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            ips","highlight_start":1,"highlight_end":32},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"set\" => {","highlight_start":1,"highlight_end":31},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            if !cur_value.is_empty() {","highlight_start":1,"highlight_end":55},{"text":"                                let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":68},{"text":"                                let mut cidrs = vec![];","highlight_start":1,"highlight_end":56},{"text":"                                mem::swap(cur_value, &mut cidrs);","highlight_start":1,"highlight_end":66},{"text":"                                iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":60},{"text":"                                    *s = From::from(cidrs);","highlight_start":1,"highlight_end":60},{"text":"                                });","highlight_start":1,"highlight_end":36},{"text":"                                notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":96},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"add\" => {","highlight_start":1,"highlight_end":31},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":64},{"text":"                            let mut cidrs = iface.ip_addrs().to_vec();","highlight_start":1,"highlight_end":71},{"text":"                            for cidr in cur_value {","highlight_start":1,"highlight_end":52},{"text":"                                cidrs.insert(0, *cidr);","highlight_start":1,"highlight_end":56},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":56},{"text":"                                *s = From::from(cidrs);","highlight_start":1,"highlight_end":56},{"text":"                            });","highlight_start":1,"highlight_end":32},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":92},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"rm\" => {","highlight_start":1,"highlight_end":30},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":64},{"text":"                            let mut cidrs = iface.ip_addrs().to_vec();","highlight_start":1,"highlight_end":71},{"text":"                            for cidr in cur_value {","highlight_start":1,"highlight_end":52},{"text":"                                let pre_retain_len = cidrs.len();","highlight_start":1,"highlight_end":66},{"text":"                                cidrs.retain(|&c| c != *cidr);","highlight_start":1,"highlight_end":63},{"text":"                                if pre_retain_len == cidrs.len() {","highlight_start":1,"highlight_end":67},{"text":"                                    return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":84},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":56},{"text":"                                *s = From::from(cidrs);","highlight_start":1,"highlight_end":56},{"text":"                            });","highlight_start":1,"highlight_end":32},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":92},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4512,"byte_end":4512,"line_start":225,"line_end":225,"column_start":55,"column_end":55,"is_primary":true,"text":[{"text":"            let new_writer = move || -> Box<NodeWriter> {","highlight_start":55,"highlight_end":55}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":6209,"byte_end":6226,"line_start":266,"line_end":266,"column_start":42,"column_end":59,"is_primary":false,"text":[{"text":"            $(children.insert($e.into(), cfg_node!($($t)*));)*","highlight_start":42,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":6209,"byte_end":6226,"line_start":266,"line_end":266,"column_start":42,"column_end":59,"is_primary":false,"text":[{"text":"            $(children.insert($e.into(), cfg_node!($($t)*));)*","highlight_start":42,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/mod.rs","byte_start":1546,"byte_end":11568,"line_start":51,"line_end":273,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    cfg_node!{","highlight_start":5,"highlight_end":15},{"text":"        \"resolv\" => {","highlight_start":1,"highlight_end":22},{"text":"            \"nameserver\" => {","highlight_start":1,"highlight_end":30},{"text":"                rw [dns_config, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":70},{"text":"                || {","highlight_start":1,"highlight_end":21},{"text":"                    format!(\"{}\\n\", dns_config.borrow().name_server)","highlight_start":1,"highlight_end":69},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let ip = Ipv4Address::from_str(line.trim())","highlight_start":1,"highlight_end":68},{"text":"                            .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":79},{"text":"                        if !ip.is_unicast() {","highlight_start":1,"highlight_end":46},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(ip);","highlight_start":1,"highlight_end":47},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(ip) = *cur_value {","highlight_start":1,"highlight_end":51},{"text":"                        dns_config.borrow_mut().name_server = ip;","highlight_start":1,"highlight_end":66},{"text":"                        notifier.borrow_mut().schedule_notify(\"resolv/nameserver\");","highlight_start":1,"highlight_end":84},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    Ok(())","highlight_start":1,"highlight_end":27},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        \"route\" => {","highlight_start":1,"highlight_end":21},{"text":"            \"list\" => {","highlight_start":1,"highlight_end":24},{"text":"                ro [iface] || {","highlight_start":1,"highlight_end":32},{"text":"                    let mut gateway = None;","highlight_start":1,"highlight_end":44},{"text":"                    iface.borrow_mut().routes_mut().update(|map| {","highlight_start":1,"highlight_end":67},{"text":"                        gateway = map.get(&gateway_cidr()).map(|route| route.via_router);","highlight_start":1,"highlight_end":90},{"text":"                    });","highlight_start":1,"highlight_end":24},{"text":"                    if let Some(ip) = gateway {","highlight_start":1,"highlight_end":48},{"text":"                        format!(\"default via {}\\n\", ip)","highlight_start":1,"highlight_end":56},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        String::new()","highlight_start":1,"highlight_end":38},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            \"add\" => {","highlight_start":1,"highlight_end":23},{"text":"                wo [iface, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":65},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let default_gw = parse_default_gw(line)?;","highlight_start":1,"highlight_end":66},{"text":"                        if !default_gw.is_unicast() {","highlight_start":1,"highlight_end":54},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(default_gw);","highlight_start":1,"highlight_end":55},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(default_gw) = *cur_value {","highlight_start":1,"highlight_end":59},{"text":"                        if iface.borrow_mut().routes_mut().add_default_ipv4_route(default_gw).is_err() {","highlight_start":1,"highlight_end":105},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        notifier.borrow_mut().schedule_notify(\"route/list\");","highlight_start":1,"highlight_end":77},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            \"rm\" => {","highlight_start":1,"highlight_end":22},{"text":"                wo [iface, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":65},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let default_gw = parse_default_gw(line)?;","highlight_start":1,"highlight_end":66},{"text":"                        if !default_gw.is_unicast() {","highlight_start":1,"highlight_end":54},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(default_gw);","highlight_start":1,"highlight_end":55},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(default_gw) = *cur_value {","highlight_start":1,"highlight_end":59},{"text":"                        let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":60},{"text":"                        let mut gateway = None;","highlight_start":1,"highlight_end":48},{"text":"                        iface.routes_mut().update(|map| {","highlight_start":1,"highlight_end":58},{"text":"                            gateway = map.get(&gateway_cidr()).map(|route| route.via_router);","highlight_start":1,"highlight_end":94},{"text":"                        });","highlight_start":1,"highlight_end":28},{"text":"                        if gateway != Some(IpAddress::Ipv4(default_gw)) {","highlight_start":1,"highlight_end":74},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        iface.routes_mut().update(|map| {","highlight_start":1,"highlight_end":58},{"text":"                            map.remove(&gateway_cidr());","highlight_start":1,"highlight_end":57},{"text":"                        });","highlight_start":1,"highlight_end":28},{"text":"                        notifier.borrow_mut().schedule_notify(\"route/list\");","highlight_start":1,"highlight_end":77},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        \"ifaces\" => {","highlight_start":1,"highlight_end":22},{"text":"            \"eth0\" => {","highlight_start":1,"highlight_end":24},{"text":"                \"mac\" => {","highlight_start":1,"highlight_end":27},{"text":"                    rw [iface, notifier] (Option<EthernetAddress>, None)","highlight_start":1,"highlight_end":73},{"text":"                    || {","highlight_start":1,"highlight_end":25},{"text":"                        format!(\"{}\\n\", iface.borrow().ethernet_addr())","highlight_start":1,"highlight_end":72},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    |cur_value, line| {","highlight_start":1,"highlight_end":40},{"text":"                        if cur_value.is_none() {","highlight_start":1,"highlight_end":49},{"text":"                            let mac = EthernetAddress::from_str(line).","highlight_start":1,"highlight_end":71},{"text":"                                map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":82},{"text":"                            if !mac.is_unicast() {","highlight_start":1,"highlight_end":51},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            *cur_value = Some(mac);","highlight_start":1,"highlight_end":52},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        } else {","highlight_start":1,"highlight_end":33},{"text":"                            Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":68},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    |cur_value| {","highlight_start":1,"highlight_end":34},{"text":"                        if let Some(mac) = *cur_value {","highlight_start":1,"highlight_end":56},{"text":"                            iface.borrow_mut().set_ethernet_addr(mac);","highlight_start":1,"highlight_end":71},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/mac\");","highlight_start":1,"highlight_end":86},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"                \"addr\" => {","highlight_start":1,"highlight_end":28},{"text":"                    \"list\" => {","highlight_start":1,"highlight_end":32},{"text":"                        ro [iface]","highlight_start":1,"highlight_end":35},{"text":"                        || {","highlight_start":1,"highlight_end":29},{"text":"                            let mut ips = String::new();","highlight_start":1,"highlight_end":57},{"text":"                            for cidr in iface.borrow().ip_addrs() {","highlight_start":1,"highlight_end":68},{"text":"                                ips += &format!(\"{}\\n\", cidr);","highlight_start":1,"highlight_end":63},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            ips","highlight_start":1,"highlight_end":32},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"set\" => {","highlight_start":1,"highlight_end":31},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            if !cur_value.is_empty() {","highlight_start":1,"highlight_end":55},{"text":"                                let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":68},{"text":"                                let mut cidrs = vec![];","highlight_start":1,"highlight_end":56},{"text":"                                mem::swap(cur_value, &mut cidrs);","highlight_start":1,"highlight_end":66},{"text":"                                iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":60},{"text":"                                    *s = From::from(cidrs);","highlight_start":1,"highlight_end":60},{"text":"                                });","highlight_start":1,"highlight_end":36},{"text":"                                notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":96},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"add\" => {","highlight_start":1,"highlight_end":31},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":64},{"text":"                            let mut cidrs = iface.ip_addrs().to_vec();","highlight_start":1,"highlight_end":71},{"text":"                            for cidr in cur_value {","highlight_start":1,"highlight_end":52},{"text":"                                cidrs.insert(0, *cidr);","highlight_start":1,"highlight_end":56},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":56},{"text":"                                *s = From::from(cidrs);","highlight_start":1,"highlight_end":56},{"text":"                            });","highlight_start":1,"highlight_end":32},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":92},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"rm\" => {","highlight_start":1,"highlight_end":30},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":64},{"text":"                            let mut cidrs = iface.ip_addrs().to_vec();","highlight_start":1,"highlight_end":71},{"text":"                            for cidr in cur_value {","highlight_start":1,"highlight_end":52},{"text":"                                let pre_retain_len = cidrs.len();","highlight_start":1,"highlight_end":66},{"text":"                                cidrs.retain(|&c| c != *cidr);","highlight_start":1,"highlight_end":63},{"text":"                                if pre_retain_len == cidrs.len() {","highlight_start":1,"highlight_end":67},{"text":"                                    return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":84},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":56},{"text":"                                *s = From::from(cidrs);","highlight_start":1,"highlight_end":56},{"text":"                            });","highlight_start":1,"highlight_end":32},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":92},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trait objects without an explicit `dyn` are deprecated\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/smolnetd/scheme/netcfg/nodes.rs:225:45\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m225\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m            let new_writer = move || -> Box<NodeWriter> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                              \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0msrc/smolnetd/scheme/netcfg/mod.rs:51:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m51\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    cfg_node!{\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m52\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        \"resolv\" => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m53\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            \"nameserver\" => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m54\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                rw [dns_config, notifier] (Option<Ipv4Address>, None)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m272\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m273\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_____-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `cfg_node` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: use `dyn`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m225\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m            let new_writer = move || -> Box<NodeWriter> {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m225\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m            let new_writer = move || -> Box<\u001b[0m\u001b[0m\u001b[38;5;10mdyn \u001b[0m\u001b[0mNodeWriter> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\n\n"}
{"message":"trait objects without an explicit `dyn` are deprecated","code":{"code":"bare_trait_objects","explanation":null},"level":"warning","spans":[{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4502,"byte_end":4512,"line_start":225,"line_end":225,"column_start":45,"column_end":55,"is_primary":true,"text":[{"text":"            let new_writer = move || -> Box<NodeWriter> {","highlight_start":45,"highlight_end":55}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":6209,"byte_end":6226,"line_start":266,"line_end":266,"column_start":42,"column_end":59,"is_primary":false,"text":[{"text":"            $(children.insert($e.into(), cfg_node!($($t)*));)*","highlight_start":42,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":6209,"byte_end":6226,"line_start":266,"line_end":266,"column_start":42,"column_end":59,"is_primary":false,"text":[{"text":"            $(children.insert($e.into(), cfg_node!($($t)*));)*","highlight_start":42,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/mod.rs","byte_start":1546,"byte_end":11568,"line_start":51,"line_end":273,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    cfg_node!{","highlight_start":5,"highlight_end":15},{"text":"        \"resolv\" => {","highlight_start":1,"highlight_end":22},{"text":"            \"nameserver\" => {","highlight_start":1,"highlight_end":30},{"text":"                rw [dns_config, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":70},{"text":"                || {","highlight_start":1,"highlight_end":21},{"text":"                    format!(\"{}\\n\", dns_config.borrow().name_server)","highlight_start":1,"highlight_end":69},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let ip = Ipv4Address::from_str(line.trim())","highlight_start":1,"highlight_end":68},{"text":"                            .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":79},{"text":"                        if !ip.is_unicast() {","highlight_start":1,"highlight_end":46},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(ip);","highlight_start":1,"highlight_end":47},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(ip) = *cur_value {","highlight_start":1,"highlight_end":51},{"text":"                        dns_config.borrow_mut().name_server = ip;","highlight_start":1,"highlight_end":66},{"text":"                        notifier.borrow_mut().schedule_notify(\"resolv/nameserver\");","highlight_start":1,"highlight_end":84},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    Ok(())","highlight_start":1,"highlight_end":27},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        \"route\" => {","highlight_start":1,"highlight_end":21},{"text":"            \"list\" => {","highlight_start":1,"highlight_end":24},{"text":"                ro [iface] || {","highlight_start":1,"highlight_end":32},{"text":"                    let mut gateway = None;","highlight_start":1,"highlight_end":44},{"text":"                    iface.borrow_mut().routes_mut().update(|map| {","highlight_start":1,"highlight_end":67},{"text":"                        gateway = map.get(&gateway_cidr()).map(|route| route.via_router);","highlight_start":1,"highlight_end":90},{"text":"                    });","highlight_start":1,"highlight_end":24},{"text":"                    if let Some(ip) = gateway {","highlight_start":1,"highlight_end":48},{"text":"                        format!(\"default via {}\\n\", ip)","highlight_start":1,"highlight_end":56},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        String::new()","highlight_start":1,"highlight_end":38},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            \"add\" => {","highlight_start":1,"highlight_end":23},{"text":"                wo [iface, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":65},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let default_gw = parse_default_gw(line)?;","highlight_start":1,"highlight_end":66},{"text":"                        if !default_gw.is_unicast() {","highlight_start":1,"highlight_end":54},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(default_gw);","highlight_start":1,"highlight_end":55},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(default_gw) = *cur_value {","highlight_start":1,"highlight_end":59},{"text":"                        if iface.borrow_mut().routes_mut().add_default_ipv4_route(default_gw).is_err() {","highlight_start":1,"highlight_end":105},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        notifier.borrow_mut().schedule_notify(\"route/list\");","highlight_start":1,"highlight_end":77},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            \"rm\" => {","highlight_start":1,"highlight_end":22},{"text":"                wo [iface, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":65},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let default_gw = parse_default_gw(line)?;","highlight_start":1,"highlight_end":66},{"text":"                        if !default_gw.is_unicast() {","highlight_start":1,"highlight_end":54},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(default_gw);","highlight_start":1,"highlight_end":55},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(default_gw) = *cur_value {","highlight_start":1,"highlight_end":59},{"text":"                        let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":60},{"text":"                        let mut gateway = None;","highlight_start":1,"highlight_end":48},{"text":"                        iface.routes_mut().update(|map| {","highlight_start":1,"highlight_end":58},{"text":"                            gateway = map.get(&gateway_cidr()).map(|route| route.via_router);","highlight_start":1,"highlight_end":94},{"text":"                        });","highlight_start":1,"highlight_end":28},{"text":"                        if gateway != Some(IpAddress::Ipv4(default_gw)) {","highlight_start":1,"highlight_end":74},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        iface.routes_mut().update(|map| {","highlight_start":1,"highlight_end":58},{"text":"                            map.remove(&gateway_cidr());","highlight_start":1,"highlight_end":57},{"text":"                        });","highlight_start":1,"highlight_end":28},{"text":"                        notifier.borrow_mut().schedule_notify(\"route/list\");","highlight_start":1,"highlight_end":77},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        \"ifaces\" => {","highlight_start":1,"highlight_end":22},{"text":"            \"eth0\" => {","highlight_start":1,"highlight_end":24},{"text":"                \"mac\" => {","highlight_start":1,"highlight_end":27},{"text":"                    rw [iface, notifier] (Option<EthernetAddress>, None)","highlight_start":1,"highlight_end":73},{"text":"                    || {","highlight_start":1,"highlight_end":25},{"text":"                        format!(\"{}\\n\", iface.borrow().ethernet_addr())","highlight_start":1,"highlight_end":72},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    |cur_value, line| {","highlight_start":1,"highlight_end":40},{"text":"                        if cur_value.is_none() {","highlight_start":1,"highlight_end":49},{"text":"                            let mac = EthernetAddress::from_str(line).","highlight_start":1,"highlight_end":71},{"text":"                                map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":82},{"text":"                            if !mac.is_unicast() {","highlight_start":1,"highlight_end":51},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            *cur_value = Some(mac);","highlight_start":1,"highlight_end":52},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        } else {","highlight_start":1,"highlight_end":33},{"text":"                            Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":68},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    |cur_value| {","highlight_start":1,"highlight_end":34},{"text":"                        if let Some(mac) = *cur_value {","highlight_start":1,"highlight_end":56},{"text":"                            iface.borrow_mut().set_ethernet_addr(mac);","highlight_start":1,"highlight_end":71},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/mac\");","highlight_start":1,"highlight_end":86},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"                \"addr\" => {","highlight_start":1,"highlight_end":28},{"text":"                    \"list\" => {","highlight_start":1,"highlight_end":32},{"text":"                        ro [iface]","highlight_start":1,"highlight_end":35},{"text":"                        || {","highlight_start":1,"highlight_end":29},{"text":"                            let mut ips = String::new();","highlight_start":1,"highlight_end":57},{"text":"                            for cidr in iface.borrow().ip_addrs() {","highlight_start":1,"highlight_end":68},{"text":"                                ips += &format!(\"{}\\n\", cidr);","highlight_start":1,"highlight_end":63},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            ips","highlight_start":1,"highlight_end":32},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"set\" => {","highlight_start":1,"highlight_end":31},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            if !cur_value.is_empty() {","highlight_start":1,"highlight_end":55},{"text":"                                let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":68},{"text":"                                let mut cidrs = vec![];","highlight_start":1,"highlight_end":56},{"text":"                                mem::swap(cur_value, &mut cidrs);","highlight_start":1,"highlight_end":66},{"text":"                                iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":60},{"text":"                                    *s = From::from(cidrs);","highlight_start":1,"highlight_end":60},{"text":"                                });","highlight_start":1,"highlight_end":36},{"text":"                                notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":96},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"add\" => {","highlight_start":1,"highlight_end":31},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":64},{"text":"                            let mut cidrs = iface.ip_addrs().to_vec();","highlight_start":1,"highlight_end":71},{"text":"                            for cidr in cur_value {","highlight_start":1,"highlight_end":52},{"text":"                                cidrs.insert(0, *cidr);","highlight_start":1,"highlight_end":56},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":56},{"text":"                                *s = From::from(cidrs);","highlight_start":1,"highlight_end":56},{"text":"                            });","highlight_start":1,"highlight_end":32},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":92},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"rm\" => {","highlight_start":1,"highlight_end":30},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":64},{"text":"                            let mut cidrs = iface.ip_addrs().to_vec();","highlight_start":1,"highlight_end":71},{"text":"                            for cidr in cur_value {","highlight_start":1,"highlight_end":52},{"text":"                                let pre_retain_len = cidrs.len();","highlight_start":1,"highlight_end":66},{"text":"                                cidrs.retain(|&c| c != *cidr);","highlight_start":1,"highlight_end":63},{"text":"                                if pre_retain_len == cidrs.len() {","highlight_start":1,"highlight_end":67},{"text":"                                    return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":84},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":56},{"text":"                                *s = From::from(cidrs);","highlight_start":1,"highlight_end":56},{"text":"                            });","highlight_start":1,"highlight_end":32},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":92},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"use `dyn`","code":null,"level":"help","spans":[{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4502,"byte_end":4502,"line_start":225,"line_end":225,"column_start":45,"column_end":45,"is_primary":true,"text":[{"text":"            let new_writer = move || -> Box<NodeWriter> {","highlight_start":45,"highlight_end":45}],"label":null,"suggested_replacement":"dyn ","suggestion_applicability":"MachineApplicable","expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":6209,"byte_end":6226,"line_start":266,"line_end":266,"column_start":42,"column_end":59,"is_primary":false,"text":[{"text":"            $(children.insert($e.into(), cfg_node!($($t)*));)*","highlight_start":42,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":6209,"byte_end":6226,"line_start":266,"line_end":266,"column_start":42,"column_end":59,"is_primary":false,"text":[{"text":"            $(children.insert($e.into(), cfg_node!($($t)*));)*","highlight_start":42,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/mod.rs","byte_start":1546,"byte_end":11568,"line_start":51,"line_end":273,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    cfg_node!{","highlight_start":5,"highlight_end":15},{"text":"        \"resolv\" => {","highlight_start":1,"highlight_end":22},{"text":"            \"nameserver\" => {","highlight_start":1,"highlight_end":30},{"text":"                rw [dns_config, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":70},{"text":"                || {","highlight_start":1,"highlight_end":21},{"text":"                    format!(\"{}\\n\", dns_config.borrow().name_server)","highlight_start":1,"highlight_end":69},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let ip = Ipv4Address::from_str(line.trim())","highlight_start":1,"highlight_end":68},{"text":"                            .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":79},{"text":"                        if !ip.is_unicast() {","highlight_start":1,"highlight_end":46},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(ip);","highlight_start":1,"highlight_end":47},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(ip) = *cur_value {","highlight_start":1,"highlight_end":51},{"text":"                        dns_config.borrow_mut().name_server = ip;","highlight_start":1,"highlight_end":66},{"text":"                        notifier.borrow_mut().schedule_notify(\"resolv/nameserver\");","highlight_start":1,"highlight_end":84},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    Ok(())","highlight_start":1,"highlight_end":27},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        \"route\" => {","highlight_start":1,"highlight_end":21},{"text":"            \"list\" => {","highlight_start":1,"highlight_end":24},{"text":"                ro [iface] || {","highlight_start":1,"highlight_end":32},{"text":"                    let mut gateway = None;","highlight_start":1,"highlight_end":44},{"text":"                    iface.borrow_mut().routes_mut().update(|map| {","highlight_start":1,"highlight_end":67},{"text":"                        gateway = map.get(&gateway_cidr()).map(|route| route.via_router);","highlight_start":1,"highlight_end":90},{"text":"                    });","highlight_start":1,"highlight_end":24},{"text":"                    if let Some(ip) = gateway {","highlight_start":1,"highlight_end":48},{"text":"                        format!(\"default via {}\\n\", ip)","highlight_start":1,"highlight_end":56},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        String::new()","highlight_start":1,"highlight_end":38},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            \"add\" => {","highlight_start":1,"highlight_end":23},{"text":"                wo [iface, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":65},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let default_gw = parse_default_gw(line)?;","highlight_start":1,"highlight_end":66},{"text":"                        if !default_gw.is_unicast() {","highlight_start":1,"highlight_end":54},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(default_gw);","highlight_start":1,"highlight_end":55},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(default_gw) = *cur_value {","highlight_start":1,"highlight_end":59},{"text":"                        if iface.borrow_mut().routes_mut().add_default_ipv4_route(default_gw).is_err() {","highlight_start":1,"highlight_end":105},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        notifier.borrow_mut().schedule_notify(\"route/list\");","highlight_start":1,"highlight_end":77},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            \"rm\" => {","highlight_start":1,"highlight_end":22},{"text":"                wo [iface, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":65},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let default_gw = parse_default_gw(line)?;","highlight_start":1,"highlight_end":66},{"text":"                        if !default_gw.is_unicast() {","highlight_start":1,"highlight_end":54},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(default_gw);","highlight_start":1,"highlight_end":55},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(default_gw) = *cur_value {","highlight_start":1,"highlight_end":59},{"text":"                        let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":60},{"text":"                        let mut gateway = None;","highlight_start":1,"highlight_end":48},{"text":"                        iface.routes_mut().update(|map| {","highlight_start":1,"highlight_end":58},{"text":"                            gateway = map.get(&gateway_cidr()).map(|route| route.via_router);","highlight_start":1,"highlight_end":94},{"text":"                        });","highlight_start":1,"highlight_end":28},{"text":"                        if gateway != Some(IpAddress::Ipv4(default_gw)) {","highlight_start":1,"highlight_end":74},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        iface.routes_mut().update(|map| {","highlight_start":1,"highlight_end":58},{"text":"                            map.remove(&gateway_cidr());","highlight_start":1,"highlight_end":57},{"text":"                        });","highlight_start":1,"highlight_end":28},{"text":"                        notifier.borrow_mut().schedule_notify(\"route/list\");","highlight_start":1,"highlight_end":77},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        \"ifaces\" => {","highlight_start":1,"highlight_end":22},{"text":"            \"eth0\" => {","highlight_start":1,"highlight_end":24},{"text":"                \"mac\" => {","highlight_start":1,"highlight_end":27},{"text":"                    rw [iface, notifier] (Option<EthernetAddress>, None)","highlight_start":1,"highlight_end":73},{"text":"                    || {","highlight_start":1,"highlight_end":25},{"text":"                        format!(\"{}\\n\", iface.borrow().ethernet_addr())","highlight_start":1,"highlight_end":72},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    |cur_value, line| {","highlight_start":1,"highlight_end":40},{"text":"                        if cur_value.is_none() {","highlight_start":1,"highlight_end":49},{"text":"                            let mac = EthernetAddress::from_str(line).","highlight_start":1,"highlight_end":71},{"text":"                                map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":82},{"text":"                            if !mac.is_unicast() {","highlight_start":1,"highlight_end":51},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            *cur_value = Some(mac);","highlight_start":1,"highlight_end":52},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        } else {","highlight_start":1,"highlight_end":33},{"text":"                            Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":68},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    |cur_value| {","highlight_start":1,"highlight_end":34},{"text":"                        if let Some(mac) = *cur_value {","highlight_start":1,"highlight_end":56},{"text":"                            iface.borrow_mut().set_ethernet_addr(mac);","highlight_start":1,"highlight_end":71},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/mac\");","highlight_start":1,"highlight_end":86},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"                \"addr\" => {","highlight_start":1,"highlight_end":28},{"text":"                    \"list\" => {","highlight_start":1,"highlight_end":32},{"text":"                        ro [iface]","highlight_start":1,"highlight_end":35},{"text":"                        || {","highlight_start":1,"highlight_end":29},{"text":"                            let mut ips = String::new();","highlight_start":1,"highlight_end":57},{"text":"                            for cidr in iface.borrow().ip_addrs() {","highlight_start":1,"highlight_end":68},{"text":"                                ips += &format!(\"{}\\n\", cidr);","highlight_start":1,"highlight_end":63},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            ips","highlight_start":1,"highlight_end":32},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"set\" => {","highlight_start":1,"highlight_end":31},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            if !cur_value.is_empty() {","highlight_start":1,"highlight_end":55},{"text":"                                let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":68},{"text":"                                let mut cidrs = vec![];","highlight_start":1,"highlight_end":56},{"text":"                                mem::swap(cur_value, &mut cidrs);","highlight_start":1,"highlight_end":66},{"text":"                                iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":60},{"text":"                                    *s = From::from(cidrs);","highlight_start":1,"highlight_end":60},{"text":"                                });","highlight_start":1,"highlight_end":36},{"text":"                                notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":96},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"add\" => {","highlight_start":1,"highlight_end":31},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":64},{"text":"                            let mut cidrs = iface.ip_addrs().to_vec();","highlight_start":1,"highlight_end":71},{"text":"                            for cidr in cur_value {","highlight_start":1,"highlight_end":52},{"text":"                                cidrs.insert(0, *cidr);","highlight_start":1,"highlight_end":56},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":56},{"text":"                                *s = From::from(cidrs);","highlight_start":1,"highlight_end":56},{"text":"                            });","highlight_start":1,"highlight_end":32},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":92},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"rm\" => {","highlight_start":1,"highlight_end":30},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":64},{"text":"                            let mut cidrs = iface.ip_addrs().to_vec();","highlight_start":1,"highlight_end":71},{"text":"                            for cidr in cur_value {","highlight_start":1,"highlight_end":52},{"text":"                                let pre_retain_len = cidrs.len();","highlight_start":1,"highlight_end":66},{"text":"                                cidrs.retain(|&c| c != *cidr);","highlight_start":1,"highlight_end":63},{"text":"                                if pre_retain_len == cidrs.len() {","highlight_start":1,"highlight_end":67},{"text":"                                    return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":84},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":56},{"text":"                                *s = From::from(cidrs);","highlight_start":1,"highlight_end":56},{"text":"                            });","highlight_start":1,"highlight_end":32},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":92},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4512,"byte_end":4512,"line_start":225,"line_end":225,"column_start":55,"column_end":55,"is_primary":true,"text":[{"text":"            let new_writer = move || -> Box<NodeWriter> {","highlight_start":55,"highlight_end":55}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":6209,"byte_end":6226,"line_start":266,"line_end":266,"column_start":42,"column_end":59,"is_primary":false,"text":[{"text":"            $(children.insert($e.into(), cfg_node!($($t)*));)*","highlight_start":42,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":6209,"byte_end":6226,"line_start":266,"line_end":266,"column_start":42,"column_end":59,"is_primary":false,"text":[{"text":"            $(children.insert($e.into(), cfg_node!($($t)*));)*","highlight_start":42,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/mod.rs","byte_start":1546,"byte_end":11568,"line_start":51,"line_end":273,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    cfg_node!{","highlight_start":5,"highlight_end":15},{"text":"        \"resolv\" => {","highlight_start":1,"highlight_end":22},{"text":"            \"nameserver\" => {","highlight_start":1,"highlight_end":30},{"text":"                rw [dns_config, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":70},{"text":"                || {","highlight_start":1,"highlight_end":21},{"text":"                    format!(\"{}\\n\", dns_config.borrow().name_server)","highlight_start":1,"highlight_end":69},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let ip = Ipv4Address::from_str(line.trim())","highlight_start":1,"highlight_end":68},{"text":"                            .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":79},{"text":"                        if !ip.is_unicast() {","highlight_start":1,"highlight_end":46},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(ip);","highlight_start":1,"highlight_end":47},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(ip) = *cur_value {","highlight_start":1,"highlight_end":51},{"text":"                        dns_config.borrow_mut().name_server = ip;","highlight_start":1,"highlight_end":66},{"text":"                        notifier.borrow_mut().schedule_notify(\"resolv/nameserver\");","highlight_start":1,"highlight_end":84},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    Ok(())","highlight_start":1,"highlight_end":27},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        \"route\" => {","highlight_start":1,"highlight_end":21},{"text":"            \"list\" => {","highlight_start":1,"highlight_end":24},{"text":"                ro [iface] || {","highlight_start":1,"highlight_end":32},{"text":"                    let mut gateway = None;","highlight_start":1,"highlight_end":44},{"text":"                    iface.borrow_mut().routes_mut().update(|map| {","highlight_start":1,"highlight_end":67},{"text":"                        gateway = map.get(&gateway_cidr()).map(|route| route.via_router);","highlight_start":1,"highlight_end":90},{"text":"                    });","highlight_start":1,"highlight_end":24},{"text":"                    if let Some(ip) = gateway {","highlight_start":1,"highlight_end":48},{"text":"                        format!(\"default via {}\\n\", ip)","highlight_start":1,"highlight_end":56},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        String::new()","highlight_start":1,"highlight_end":38},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            \"add\" => {","highlight_start":1,"highlight_end":23},{"text":"                wo [iface, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":65},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let default_gw = parse_default_gw(line)?;","highlight_start":1,"highlight_end":66},{"text":"                        if !default_gw.is_unicast() {","highlight_start":1,"highlight_end":54},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(default_gw);","highlight_start":1,"highlight_end":55},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(default_gw) = *cur_value {","highlight_start":1,"highlight_end":59},{"text":"                        if iface.borrow_mut().routes_mut().add_default_ipv4_route(default_gw).is_err() {","highlight_start":1,"highlight_end":105},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        notifier.borrow_mut().schedule_notify(\"route/list\");","highlight_start":1,"highlight_end":77},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            \"rm\" => {","highlight_start":1,"highlight_end":22},{"text":"                wo [iface, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":65},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let default_gw = parse_default_gw(line)?;","highlight_start":1,"highlight_end":66},{"text":"                        if !default_gw.is_unicast() {","highlight_start":1,"highlight_end":54},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(default_gw);","highlight_start":1,"highlight_end":55},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(default_gw) = *cur_value {","highlight_start":1,"highlight_end":59},{"text":"                        let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":60},{"text":"                        let mut gateway = None;","highlight_start":1,"highlight_end":48},{"text":"                        iface.routes_mut().update(|map| {","highlight_start":1,"highlight_end":58},{"text":"                            gateway = map.get(&gateway_cidr()).map(|route| route.via_router);","highlight_start":1,"highlight_end":94},{"text":"                        });","highlight_start":1,"highlight_end":28},{"text":"                        if gateway != Some(IpAddress::Ipv4(default_gw)) {","highlight_start":1,"highlight_end":74},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        iface.routes_mut().update(|map| {","highlight_start":1,"highlight_end":58},{"text":"                            map.remove(&gateway_cidr());","highlight_start":1,"highlight_end":57},{"text":"                        });","highlight_start":1,"highlight_end":28},{"text":"                        notifier.borrow_mut().schedule_notify(\"route/list\");","highlight_start":1,"highlight_end":77},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        \"ifaces\" => {","highlight_start":1,"highlight_end":22},{"text":"            \"eth0\" => {","highlight_start":1,"highlight_end":24},{"text":"                \"mac\" => {","highlight_start":1,"highlight_end":27},{"text":"                    rw [iface, notifier] (Option<EthernetAddress>, None)","highlight_start":1,"highlight_end":73},{"text":"                    || {","highlight_start":1,"highlight_end":25},{"text":"                        format!(\"{}\\n\", iface.borrow().ethernet_addr())","highlight_start":1,"highlight_end":72},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    |cur_value, line| {","highlight_start":1,"highlight_end":40},{"text":"                        if cur_value.is_none() {","highlight_start":1,"highlight_end":49},{"text":"                            let mac = EthernetAddress::from_str(line).","highlight_start":1,"highlight_end":71},{"text":"                                map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":82},{"text":"                            if !mac.is_unicast() {","highlight_start":1,"highlight_end":51},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            *cur_value = Some(mac);","highlight_start":1,"highlight_end":52},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        } else {","highlight_start":1,"highlight_end":33},{"text":"                            Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":68},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    |cur_value| {","highlight_start":1,"highlight_end":34},{"text":"                        if let Some(mac) = *cur_value {","highlight_start":1,"highlight_end":56},{"text":"                            iface.borrow_mut().set_ethernet_addr(mac);","highlight_start":1,"highlight_end":71},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/mac\");","highlight_start":1,"highlight_end":86},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"                \"addr\" => {","highlight_start":1,"highlight_end":28},{"text":"                    \"list\" => {","highlight_start":1,"highlight_end":32},{"text":"                        ro [iface]","highlight_start":1,"highlight_end":35},{"text":"                        || {","highlight_start":1,"highlight_end":29},{"text":"                            let mut ips = String::new();","highlight_start":1,"highlight_end":57},{"text":"                            for cidr in iface.borrow().ip_addrs() {","highlight_start":1,"highlight_end":68},{"text":"                                ips += &format!(\"{}\\n\", cidr);","highlight_start":1,"highlight_end":63},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            ips","highlight_start":1,"highlight_end":32},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"set\" => {","highlight_start":1,"highlight_end":31},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            if !cur_value.is_empty() {","highlight_start":1,"highlight_end":55},{"text":"                                let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":68},{"text":"                                let mut cidrs = vec![];","highlight_start":1,"highlight_end":56},{"text":"                                mem::swap(cur_value, &mut cidrs);","highlight_start":1,"highlight_end":66},{"text":"                                iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":60},{"text":"                                    *s = From::from(cidrs);","highlight_start":1,"highlight_end":60},{"text":"                                });","highlight_start":1,"highlight_end":36},{"text":"                                notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":96},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"add\" => {","highlight_start":1,"highlight_end":31},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":64},{"text":"                            let mut cidrs = iface.ip_addrs().to_vec();","highlight_start":1,"highlight_end":71},{"text":"                            for cidr in cur_value {","highlight_start":1,"highlight_end":52},{"text":"                                cidrs.insert(0, *cidr);","highlight_start":1,"highlight_end":56},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":56},{"text":"                                *s = From::from(cidrs);","highlight_start":1,"highlight_end":56},{"text":"                            });","highlight_start":1,"highlight_end":32},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":92},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"rm\" => {","highlight_start":1,"highlight_end":30},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":64},{"text":"                            let mut cidrs = iface.ip_addrs().to_vec();","highlight_start":1,"highlight_end":71},{"text":"                            for cidr in cur_value {","highlight_start":1,"highlight_end":52},{"text":"                                let pre_retain_len = cidrs.len();","highlight_start":1,"highlight_end":66},{"text":"                                cidrs.retain(|&c| c != *cidr);","highlight_start":1,"highlight_end":63},{"text":"                                if pre_retain_len == cidrs.len() {","highlight_start":1,"highlight_end":67},{"text":"                                    return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":84},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":56},{"text":"                                *s = From::from(cidrs);","highlight_start":1,"highlight_end":56},{"text":"                            });","highlight_start":1,"highlight_end":32},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":92},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trait objects without an explicit `dyn` are deprecated\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/smolnetd/scheme/netcfg/nodes.rs:225:45\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m225\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m            let new_writer = move || -> Box<NodeWriter> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                              \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0msrc/smolnetd/scheme/netcfg/mod.rs:51:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m51\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    cfg_node!{\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m52\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        \"resolv\" => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m53\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            \"nameserver\" => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m54\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                rw [dns_config, notifier] (Option<Ipv4Address>, None)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m272\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m273\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_____-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `cfg_node` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: use `dyn`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m225\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m            let new_writer = move || -> Box<NodeWriter> {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m225\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m            let new_writer = move || -> Box<\u001b[0m\u001b[0m\u001b[38;5;10mdyn \u001b[0m\u001b[0mNodeWriter> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\n\n"}
{"message":"trait objects without an explicit `dyn` are deprecated","code":{"code":"bare_trait_objects","explanation":null},"level":"warning","spans":[{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":5489,"byte_end":5499,"line_start":248,"line_end":248,"column_start":45,"column_end":55,"is_primary":true,"text":[{"text":"            let new_writer = move || -> Box<NodeWriter> {","highlight_start":45,"highlight_end":55}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":6209,"byte_end":6226,"line_start":266,"line_end":266,"column_start":42,"column_end":59,"is_primary":false,"text":[{"text":"            $(children.insert($e.into(), cfg_node!($($t)*));)*","highlight_start":42,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":6209,"byte_end":6226,"line_start":266,"line_end":266,"column_start":42,"column_end":59,"is_primary":false,"text":[{"text":"            $(children.insert($e.into(), cfg_node!($($t)*));)*","highlight_start":42,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/mod.rs","byte_start":1546,"byte_end":11568,"line_start":51,"line_end":273,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    cfg_node!{","highlight_start":5,"highlight_end":15},{"text":"        \"resolv\" => {","highlight_start":1,"highlight_end":22},{"text":"            \"nameserver\" => {","highlight_start":1,"highlight_end":30},{"text":"                rw [dns_config, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":70},{"text":"                || {","highlight_start":1,"highlight_end":21},{"text":"                    format!(\"{}\\n\", dns_config.borrow().name_server)","highlight_start":1,"highlight_end":69},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let ip = Ipv4Address::from_str(line.trim())","highlight_start":1,"highlight_end":68},{"text":"                            .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":79},{"text":"                        if !ip.is_unicast() {","highlight_start":1,"highlight_end":46},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(ip);","highlight_start":1,"highlight_end":47},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(ip) = *cur_value {","highlight_start":1,"highlight_end":51},{"text":"                        dns_config.borrow_mut().name_server = ip;","highlight_start":1,"highlight_end":66},{"text":"                        notifier.borrow_mut().schedule_notify(\"resolv/nameserver\");","highlight_start":1,"highlight_end":84},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    Ok(())","highlight_start":1,"highlight_end":27},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        \"route\" => {","highlight_start":1,"highlight_end":21},{"text":"            \"list\" => {","highlight_start":1,"highlight_end":24},{"text":"                ro [iface] || {","highlight_start":1,"highlight_end":32},{"text":"                    let mut gateway = None;","highlight_start":1,"highlight_end":44},{"text":"                    iface.borrow_mut().routes_mut().update(|map| {","highlight_start":1,"highlight_end":67},{"text":"                        gateway = map.get(&gateway_cidr()).map(|route| route.via_router);","highlight_start":1,"highlight_end":90},{"text":"                    });","highlight_start":1,"highlight_end":24},{"text":"                    if let Some(ip) = gateway {","highlight_start":1,"highlight_end":48},{"text":"                        format!(\"default via {}\\n\", ip)","highlight_start":1,"highlight_end":56},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        String::new()","highlight_start":1,"highlight_end":38},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            \"add\" => {","highlight_start":1,"highlight_end":23},{"text":"                wo [iface, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":65},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let default_gw = parse_default_gw(line)?;","highlight_start":1,"highlight_end":66},{"text":"                        if !default_gw.is_unicast() {","highlight_start":1,"highlight_end":54},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(default_gw);","highlight_start":1,"highlight_end":55},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(default_gw) = *cur_value {","highlight_start":1,"highlight_end":59},{"text":"                        if iface.borrow_mut().routes_mut().add_default_ipv4_route(default_gw).is_err() {","highlight_start":1,"highlight_end":105},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        notifier.borrow_mut().schedule_notify(\"route/list\");","highlight_start":1,"highlight_end":77},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            \"rm\" => {","highlight_start":1,"highlight_end":22},{"text":"                wo [iface, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":65},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let default_gw = parse_default_gw(line)?;","highlight_start":1,"highlight_end":66},{"text":"                        if !default_gw.is_unicast() {","highlight_start":1,"highlight_end":54},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(default_gw);","highlight_start":1,"highlight_end":55},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(default_gw) = *cur_value {","highlight_start":1,"highlight_end":59},{"text":"                        let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":60},{"text":"                        let mut gateway = None;","highlight_start":1,"highlight_end":48},{"text":"                        iface.routes_mut().update(|map| {","highlight_start":1,"highlight_end":58},{"text":"                            gateway = map.get(&gateway_cidr()).map(|route| route.via_router);","highlight_start":1,"highlight_end":94},{"text":"                        });","highlight_start":1,"highlight_end":28},{"text":"                        if gateway != Some(IpAddress::Ipv4(default_gw)) {","highlight_start":1,"highlight_end":74},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        iface.routes_mut().update(|map| {","highlight_start":1,"highlight_end":58},{"text":"                            map.remove(&gateway_cidr());","highlight_start":1,"highlight_end":57},{"text":"                        });","highlight_start":1,"highlight_end":28},{"text":"                        notifier.borrow_mut().schedule_notify(\"route/list\");","highlight_start":1,"highlight_end":77},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        \"ifaces\" => {","highlight_start":1,"highlight_end":22},{"text":"            \"eth0\" => {","highlight_start":1,"highlight_end":24},{"text":"                \"mac\" => {","highlight_start":1,"highlight_end":27},{"text":"                    rw [iface, notifier] (Option<EthernetAddress>, None)","highlight_start":1,"highlight_end":73},{"text":"                    || {","highlight_start":1,"highlight_end":25},{"text":"                        format!(\"{}\\n\", iface.borrow().ethernet_addr())","highlight_start":1,"highlight_end":72},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    |cur_value, line| {","highlight_start":1,"highlight_end":40},{"text":"                        if cur_value.is_none() {","highlight_start":1,"highlight_end":49},{"text":"                            let mac = EthernetAddress::from_str(line).","highlight_start":1,"highlight_end":71},{"text":"                                map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":82},{"text":"                            if !mac.is_unicast() {","highlight_start":1,"highlight_end":51},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            *cur_value = Some(mac);","highlight_start":1,"highlight_end":52},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        } else {","highlight_start":1,"highlight_end":33},{"text":"                            Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":68},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    |cur_value| {","highlight_start":1,"highlight_end":34},{"text":"                        if let Some(mac) = *cur_value {","highlight_start":1,"highlight_end":56},{"text":"                            iface.borrow_mut().set_ethernet_addr(mac);","highlight_start":1,"highlight_end":71},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/mac\");","highlight_start":1,"highlight_end":86},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"                \"addr\" => {","highlight_start":1,"highlight_end":28},{"text":"                    \"list\" => {","highlight_start":1,"highlight_end":32},{"text":"                        ro [iface]","highlight_start":1,"highlight_end":35},{"text":"                        || {","highlight_start":1,"highlight_end":29},{"text":"                            let mut ips = String::new();","highlight_start":1,"highlight_end":57},{"text":"                            for cidr in iface.borrow().ip_addrs() {","highlight_start":1,"highlight_end":68},{"text":"                                ips += &format!(\"{}\\n\", cidr);","highlight_start":1,"highlight_end":63},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            ips","highlight_start":1,"highlight_end":32},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"set\" => {","highlight_start":1,"highlight_end":31},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            if !cur_value.is_empty() {","highlight_start":1,"highlight_end":55},{"text":"                                let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":68},{"text":"                                let mut cidrs = vec![];","highlight_start":1,"highlight_end":56},{"text":"                                mem::swap(cur_value, &mut cidrs);","highlight_start":1,"highlight_end":66},{"text":"                                iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":60},{"text":"                                    *s = From::from(cidrs);","highlight_start":1,"highlight_end":60},{"text":"                                });","highlight_start":1,"highlight_end":36},{"text":"                                notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":96},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"add\" => {","highlight_start":1,"highlight_end":31},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":64},{"text":"                            let mut cidrs = iface.ip_addrs().to_vec();","highlight_start":1,"highlight_end":71},{"text":"                            for cidr in cur_value {","highlight_start":1,"highlight_end":52},{"text":"                                cidrs.insert(0, *cidr);","highlight_start":1,"highlight_end":56},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":56},{"text":"                                *s = From::from(cidrs);","highlight_start":1,"highlight_end":56},{"text":"                            });","highlight_start":1,"highlight_end":32},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":92},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"rm\" => {","highlight_start":1,"highlight_end":30},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":64},{"text":"                            let mut cidrs = iface.ip_addrs().to_vec();","highlight_start":1,"highlight_end":71},{"text":"                            for cidr in cur_value {","highlight_start":1,"highlight_end":52},{"text":"                                let pre_retain_len = cidrs.len();","highlight_start":1,"highlight_end":66},{"text":"                                cidrs.retain(|&c| c != *cidr);","highlight_start":1,"highlight_end":63},{"text":"                                if pre_retain_len == cidrs.len() {","highlight_start":1,"highlight_end":67},{"text":"                                    return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":84},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":56},{"text":"                                *s = From::from(cidrs);","highlight_start":1,"highlight_end":56},{"text":"                            });","highlight_start":1,"highlight_end":32},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":92},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"use `dyn`","code":null,"level":"help","spans":[{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":5489,"byte_end":5489,"line_start":248,"line_end":248,"column_start":45,"column_end":45,"is_primary":true,"text":[{"text":"            let new_writer = move || -> Box<NodeWriter> {","highlight_start":45,"highlight_end":45}],"label":null,"suggested_replacement":"dyn ","suggestion_applicability":"MachineApplicable","expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":6209,"byte_end":6226,"line_start":266,"line_end":266,"column_start":42,"column_end":59,"is_primary":false,"text":[{"text":"            $(children.insert($e.into(), cfg_node!($($t)*));)*","highlight_start":42,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":6209,"byte_end":6226,"line_start":266,"line_end":266,"column_start":42,"column_end":59,"is_primary":false,"text":[{"text":"            $(children.insert($e.into(), cfg_node!($($t)*));)*","highlight_start":42,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/mod.rs","byte_start":1546,"byte_end":11568,"line_start":51,"line_end":273,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    cfg_node!{","highlight_start":5,"highlight_end":15},{"text":"        \"resolv\" => {","highlight_start":1,"highlight_end":22},{"text":"            \"nameserver\" => {","highlight_start":1,"highlight_end":30},{"text":"                rw [dns_config, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":70},{"text":"                || {","highlight_start":1,"highlight_end":21},{"text":"                    format!(\"{}\\n\", dns_config.borrow().name_server)","highlight_start":1,"highlight_end":69},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let ip = Ipv4Address::from_str(line.trim())","highlight_start":1,"highlight_end":68},{"text":"                            .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":79},{"text":"                        if !ip.is_unicast() {","highlight_start":1,"highlight_end":46},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(ip);","highlight_start":1,"highlight_end":47},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(ip) = *cur_value {","highlight_start":1,"highlight_end":51},{"text":"                        dns_config.borrow_mut().name_server = ip;","highlight_start":1,"highlight_end":66},{"text":"                        notifier.borrow_mut().schedule_notify(\"resolv/nameserver\");","highlight_start":1,"highlight_end":84},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    Ok(())","highlight_start":1,"highlight_end":27},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        \"route\" => {","highlight_start":1,"highlight_end":21},{"text":"            \"list\" => {","highlight_start":1,"highlight_end":24},{"text":"                ro [iface] || {","highlight_start":1,"highlight_end":32},{"text":"                    let mut gateway = None;","highlight_start":1,"highlight_end":44},{"text":"                    iface.borrow_mut().routes_mut().update(|map| {","highlight_start":1,"highlight_end":67},{"text":"                        gateway = map.get(&gateway_cidr()).map(|route| route.via_router);","highlight_start":1,"highlight_end":90},{"text":"                    });","highlight_start":1,"highlight_end":24},{"text":"                    if let Some(ip) = gateway {","highlight_start":1,"highlight_end":48},{"text":"                        format!(\"default via {}\\n\", ip)","highlight_start":1,"highlight_end":56},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        String::new()","highlight_start":1,"highlight_end":38},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            \"add\" => {","highlight_start":1,"highlight_end":23},{"text":"                wo [iface, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":65},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let default_gw = parse_default_gw(line)?;","highlight_start":1,"highlight_end":66},{"text":"                        if !default_gw.is_unicast() {","highlight_start":1,"highlight_end":54},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(default_gw);","highlight_start":1,"highlight_end":55},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(default_gw) = *cur_value {","highlight_start":1,"highlight_end":59},{"text":"                        if iface.borrow_mut().routes_mut().add_default_ipv4_route(default_gw).is_err() {","highlight_start":1,"highlight_end":105},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        notifier.borrow_mut().schedule_notify(\"route/list\");","highlight_start":1,"highlight_end":77},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            \"rm\" => {","highlight_start":1,"highlight_end":22},{"text":"                wo [iface, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":65},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let default_gw = parse_default_gw(line)?;","highlight_start":1,"highlight_end":66},{"text":"                        if !default_gw.is_unicast() {","highlight_start":1,"highlight_end":54},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(default_gw);","highlight_start":1,"highlight_end":55},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(default_gw) = *cur_value {","highlight_start":1,"highlight_end":59},{"text":"                        let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":60},{"text":"                        let mut gateway = None;","highlight_start":1,"highlight_end":48},{"text":"                        iface.routes_mut().update(|map| {","highlight_start":1,"highlight_end":58},{"text":"                            gateway = map.get(&gateway_cidr()).map(|route| route.via_router);","highlight_start":1,"highlight_end":94},{"text":"                        });","highlight_start":1,"highlight_end":28},{"text":"                        if gateway != Some(IpAddress::Ipv4(default_gw)) {","highlight_start":1,"highlight_end":74},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        iface.routes_mut().update(|map| {","highlight_start":1,"highlight_end":58},{"text":"                            map.remove(&gateway_cidr());","highlight_start":1,"highlight_end":57},{"text":"                        });","highlight_start":1,"highlight_end":28},{"text":"                        notifier.borrow_mut().schedule_notify(\"route/list\");","highlight_start":1,"highlight_end":77},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        \"ifaces\" => {","highlight_start":1,"highlight_end":22},{"text":"            \"eth0\" => {","highlight_start":1,"highlight_end":24},{"text":"                \"mac\" => {","highlight_start":1,"highlight_end":27},{"text":"                    rw [iface, notifier] (Option<EthernetAddress>, None)","highlight_start":1,"highlight_end":73},{"text":"                    || {","highlight_start":1,"highlight_end":25},{"text":"                        format!(\"{}\\n\", iface.borrow().ethernet_addr())","highlight_start":1,"highlight_end":72},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    |cur_value, line| {","highlight_start":1,"highlight_end":40},{"text":"                        if cur_value.is_none() {","highlight_start":1,"highlight_end":49},{"text":"                            let mac = EthernetAddress::from_str(line).","highlight_start":1,"highlight_end":71},{"text":"                                map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":82},{"text":"                            if !mac.is_unicast() {","highlight_start":1,"highlight_end":51},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            *cur_value = Some(mac);","highlight_start":1,"highlight_end":52},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        } else {","highlight_start":1,"highlight_end":33},{"text":"                            Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":68},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    |cur_value| {","highlight_start":1,"highlight_end":34},{"text":"                        if let Some(mac) = *cur_value {","highlight_start":1,"highlight_end":56},{"text":"                            iface.borrow_mut().set_ethernet_addr(mac);","highlight_start":1,"highlight_end":71},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/mac\");","highlight_start":1,"highlight_end":86},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"                \"addr\" => {","highlight_start":1,"highlight_end":28},{"text":"                    \"list\" => {","highlight_start":1,"highlight_end":32},{"text":"                        ro [iface]","highlight_start":1,"highlight_end":35},{"text":"                        || {","highlight_start":1,"highlight_end":29},{"text":"                            let mut ips = String::new();","highlight_start":1,"highlight_end":57},{"text":"                            for cidr in iface.borrow().ip_addrs() {","highlight_start":1,"highlight_end":68},{"text":"                                ips += &format!(\"{}\\n\", cidr);","highlight_start":1,"highlight_end":63},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            ips","highlight_start":1,"highlight_end":32},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"set\" => {","highlight_start":1,"highlight_end":31},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            if !cur_value.is_empty() {","highlight_start":1,"highlight_end":55},{"text":"                                let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":68},{"text":"                                let mut cidrs = vec![];","highlight_start":1,"highlight_end":56},{"text":"                                mem::swap(cur_value, &mut cidrs);","highlight_start":1,"highlight_end":66},{"text":"                                iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":60},{"text":"                                    *s = From::from(cidrs);","highlight_start":1,"highlight_end":60},{"text":"                                });","highlight_start":1,"highlight_end":36},{"text":"                                notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":96},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"add\" => {","highlight_start":1,"highlight_end":31},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":64},{"text":"                            let mut cidrs = iface.ip_addrs().to_vec();","highlight_start":1,"highlight_end":71},{"text":"                            for cidr in cur_value {","highlight_start":1,"highlight_end":52},{"text":"                                cidrs.insert(0, *cidr);","highlight_start":1,"highlight_end":56},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":56},{"text":"                                *s = From::from(cidrs);","highlight_start":1,"highlight_end":56},{"text":"                            });","highlight_start":1,"highlight_end":32},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":92},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"rm\" => {","highlight_start":1,"highlight_end":30},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":64},{"text":"                            let mut cidrs = iface.ip_addrs().to_vec();","highlight_start":1,"highlight_end":71},{"text":"                            for cidr in cur_value {","highlight_start":1,"highlight_end":52},{"text":"                                let pre_retain_len = cidrs.len();","highlight_start":1,"highlight_end":66},{"text":"                                cidrs.retain(|&c| c != *cidr);","highlight_start":1,"highlight_end":63},{"text":"                                if pre_retain_len == cidrs.len() {","highlight_start":1,"highlight_end":67},{"text":"                                    return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":84},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":56},{"text":"                                *s = From::from(cidrs);","highlight_start":1,"highlight_end":56},{"text":"                            });","highlight_start":1,"highlight_end":32},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":92},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":5499,"byte_end":5499,"line_start":248,"line_end":248,"column_start":55,"column_end":55,"is_primary":true,"text":[{"text":"            let new_writer = move || -> Box<NodeWriter> {","highlight_start":55,"highlight_end":55}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":6209,"byte_end":6226,"line_start":266,"line_end":266,"column_start":42,"column_end":59,"is_primary":false,"text":[{"text":"            $(children.insert($e.into(), cfg_node!($($t)*));)*","highlight_start":42,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":6209,"byte_end":6226,"line_start":266,"line_end":266,"column_start":42,"column_end":59,"is_primary":false,"text":[{"text":"            $(children.insert($e.into(), cfg_node!($($t)*));)*","highlight_start":42,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/mod.rs","byte_start":1546,"byte_end":11568,"line_start":51,"line_end":273,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    cfg_node!{","highlight_start":5,"highlight_end":15},{"text":"        \"resolv\" => {","highlight_start":1,"highlight_end":22},{"text":"            \"nameserver\" => {","highlight_start":1,"highlight_end":30},{"text":"                rw [dns_config, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":70},{"text":"                || {","highlight_start":1,"highlight_end":21},{"text":"                    format!(\"{}\\n\", dns_config.borrow().name_server)","highlight_start":1,"highlight_end":69},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let ip = Ipv4Address::from_str(line.trim())","highlight_start":1,"highlight_end":68},{"text":"                            .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":79},{"text":"                        if !ip.is_unicast() {","highlight_start":1,"highlight_end":46},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(ip);","highlight_start":1,"highlight_end":47},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(ip) = *cur_value {","highlight_start":1,"highlight_end":51},{"text":"                        dns_config.borrow_mut().name_server = ip;","highlight_start":1,"highlight_end":66},{"text":"                        notifier.borrow_mut().schedule_notify(\"resolv/nameserver\");","highlight_start":1,"highlight_end":84},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    Ok(())","highlight_start":1,"highlight_end":27},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        \"route\" => {","highlight_start":1,"highlight_end":21},{"text":"            \"list\" => {","highlight_start":1,"highlight_end":24},{"text":"                ro [iface] || {","highlight_start":1,"highlight_end":32},{"text":"                    let mut gateway = None;","highlight_start":1,"highlight_end":44},{"text":"                    iface.borrow_mut().routes_mut().update(|map| {","highlight_start":1,"highlight_end":67},{"text":"                        gateway = map.get(&gateway_cidr()).map(|route| route.via_router);","highlight_start":1,"highlight_end":90},{"text":"                    });","highlight_start":1,"highlight_end":24},{"text":"                    if let Some(ip) = gateway {","highlight_start":1,"highlight_end":48},{"text":"                        format!(\"default via {}\\n\", ip)","highlight_start":1,"highlight_end":56},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        String::new()","highlight_start":1,"highlight_end":38},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            \"add\" => {","highlight_start":1,"highlight_end":23},{"text":"                wo [iface, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":65},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let default_gw = parse_default_gw(line)?;","highlight_start":1,"highlight_end":66},{"text":"                        if !default_gw.is_unicast() {","highlight_start":1,"highlight_end":54},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(default_gw);","highlight_start":1,"highlight_end":55},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(default_gw) = *cur_value {","highlight_start":1,"highlight_end":59},{"text":"                        if iface.borrow_mut().routes_mut().add_default_ipv4_route(default_gw).is_err() {","highlight_start":1,"highlight_end":105},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        notifier.borrow_mut().schedule_notify(\"route/list\");","highlight_start":1,"highlight_end":77},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            \"rm\" => {","highlight_start":1,"highlight_end":22},{"text":"                wo [iface, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":65},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let default_gw = parse_default_gw(line)?;","highlight_start":1,"highlight_end":66},{"text":"                        if !default_gw.is_unicast() {","highlight_start":1,"highlight_end":54},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(default_gw);","highlight_start":1,"highlight_end":55},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(default_gw) = *cur_value {","highlight_start":1,"highlight_end":59},{"text":"                        let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":60},{"text":"                        let mut gateway = None;","highlight_start":1,"highlight_end":48},{"text":"                        iface.routes_mut().update(|map| {","highlight_start":1,"highlight_end":58},{"text":"                            gateway = map.get(&gateway_cidr()).map(|route| route.via_router);","highlight_start":1,"highlight_end":94},{"text":"                        });","highlight_start":1,"highlight_end":28},{"text":"                        if gateway != Some(IpAddress::Ipv4(default_gw)) {","highlight_start":1,"highlight_end":74},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        iface.routes_mut().update(|map| {","highlight_start":1,"highlight_end":58},{"text":"                            map.remove(&gateway_cidr());","highlight_start":1,"highlight_end":57},{"text":"                        });","highlight_start":1,"highlight_end":28},{"text":"                        notifier.borrow_mut().schedule_notify(\"route/list\");","highlight_start":1,"highlight_end":77},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        \"ifaces\" => {","highlight_start":1,"highlight_end":22},{"text":"            \"eth0\" => {","highlight_start":1,"highlight_end":24},{"text":"                \"mac\" => {","highlight_start":1,"highlight_end":27},{"text":"                    rw [iface, notifier] (Option<EthernetAddress>, None)","highlight_start":1,"highlight_end":73},{"text":"                    || {","highlight_start":1,"highlight_end":25},{"text":"                        format!(\"{}\\n\", iface.borrow().ethernet_addr())","highlight_start":1,"highlight_end":72},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    |cur_value, line| {","highlight_start":1,"highlight_end":40},{"text":"                        if cur_value.is_none() {","highlight_start":1,"highlight_end":49},{"text":"                            let mac = EthernetAddress::from_str(line).","highlight_start":1,"highlight_end":71},{"text":"                                map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":82},{"text":"                            if !mac.is_unicast() {","highlight_start":1,"highlight_end":51},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            *cur_value = Some(mac);","highlight_start":1,"highlight_end":52},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        } else {","highlight_start":1,"highlight_end":33},{"text":"                            Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":68},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    |cur_value| {","highlight_start":1,"highlight_end":34},{"text":"                        if let Some(mac) = *cur_value {","highlight_start":1,"highlight_end":56},{"text":"                            iface.borrow_mut().set_ethernet_addr(mac);","highlight_start":1,"highlight_end":71},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/mac\");","highlight_start":1,"highlight_end":86},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"                \"addr\" => {","highlight_start":1,"highlight_end":28},{"text":"                    \"list\" => {","highlight_start":1,"highlight_end":32},{"text":"                        ro [iface]","highlight_start":1,"highlight_end":35},{"text":"                        || {","highlight_start":1,"highlight_end":29},{"text":"                            let mut ips = String::new();","highlight_start":1,"highlight_end":57},{"text":"                            for cidr in iface.borrow().ip_addrs() {","highlight_start":1,"highlight_end":68},{"text":"                                ips += &format!(\"{}\\n\", cidr);","highlight_start":1,"highlight_end":63},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            ips","highlight_start":1,"highlight_end":32},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"set\" => {","highlight_start":1,"highlight_end":31},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            if !cur_value.is_empty() {","highlight_start":1,"highlight_end":55},{"text":"                                let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":68},{"text":"                                let mut cidrs = vec![];","highlight_start":1,"highlight_end":56},{"text":"                                mem::swap(cur_value, &mut cidrs);","highlight_start":1,"highlight_end":66},{"text":"                                iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":60},{"text":"                                    *s = From::from(cidrs);","highlight_start":1,"highlight_end":60},{"text":"                                });","highlight_start":1,"highlight_end":36},{"text":"                                notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":96},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"add\" => {","highlight_start":1,"highlight_end":31},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":64},{"text":"                            let mut cidrs = iface.ip_addrs().to_vec();","highlight_start":1,"highlight_end":71},{"text":"                            for cidr in cur_value {","highlight_start":1,"highlight_end":52},{"text":"                                cidrs.insert(0, *cidr);","highlight_start":1,"highlight_end":56},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":56},{"text":"                                *s = From::from(cidrs);","highlight_start":1,"highlight_end":56},{"text":"                            });","highlight_start":1,"highlight_end":32},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":92},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"rm\" => {","highlight_start":1,"highlight_end":30},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":64},{"text":"                            let mut cidrs = iface.ip_addrs().to_vec();","highlight_start":1,"highlight_end":71},{"text":"                            for cidr in cur_value {","highlight_start":1,"highlight_end":52},{"text":"                                let pre_retain_len = cidrs.len();","highlight_start":1,"highlight_end":66},{"text":"                                cidrs.retain(|&c| c != *cidr);","highlight_start":1,"highlight_end":63},{"text":"                                if pre_retain_len == cidrs.len() {","highlight_start":1,"highlight_end":67},{"text":"                                    return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":84},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":56},{"text":"                                *s = From::from(cidrs);","highlight_start":1,"highlight_end":56},{"text":"                            });","highlight_start":1,"highlight_end":32},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":92},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trait objects without an explicit `dyn` are deprecated\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/smolnetd/scheme/netcfg/nodes.rs:248:45\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m248\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m            let new_writer = move || -> Box<NodeWriter> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                              \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0msrc/smolnetd/scheme/netcfg/mod.rs:51:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m51\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    cfg_node!{\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m52\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        \"resolv\" => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m53\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            \"nameserver\" => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m54\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                rw [dns_config, notifier] (Option<Ipv4Address>, None)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m272\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m273\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_____-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `cfg_node` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: use `dyn`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m248\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m            let new_writer = move || -> Box<NodeWriter> {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m248\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m            let new_writer = move || -> Box<\u001b[0m\u001b[0m\u001b[38;5;10mdyn \u001b[0m\u001b[0mNodeWriter> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\n\n"}
{"message":"trait objects without an explicit `dyn` are deprecated","code":{"code":"bare_trait_objects","explanation":null},"level":"warning","spans":[{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4502,"byte_end":4512,"line_start":225,"line_end":225,"column_start":45,"column_end":55,"is_primary":true,"text":[{"text":"            let new_writer = move || -> Box<NodeWriter> {","highlight_start":45,"highlight_end":55}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":6209,"byte_end":6226,"line_start":266,"line_end":266,"column_start":42,"column_end":59,"is_primary":false,"text":[{"text":"            $(children.insert($e.into(), cfg_node!($($t)*));)*","highlight_start":42,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":6209,"byte_end":6226,"line_start":266,"line_end":266,"column_start":42,"column_end":59,"is_primary":false,"text":[{"text":"            $(children.insert($e.into(), cfg_node!($($t)*));)*","highlight_start":42,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/mod.rs","byte_start":1546,"byte_end":11568,"line_start":51,"line_end":273,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    cfg_node!{","highlight_start":5,"highlight_end":15},{"text":"        \"resolv\" => {","highlight_start":1,"highlight_end":22},{"text":"            \"nameserver\" => {","highlight_start":1,"highlight_end":30},{"text":"                rw [dns_config, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":70},{"text":"                || {","highlight_start":1,"highlight_end":21},{"text":"                    format!(\"{}\\n\", dns_config.borrow().name_server)","highlight_start":1,"highlight_end":69},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let ip = Ipv4Address::from_str(line.trim())","highlight_start":1,"highlight_end":68},{"text":"                            .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":79},{"text":"                        if !ip.is_unicast() {","highlight_start":1,"highlight_end":46},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(ip);","highlight_start":1,"highlight_end":47},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(ip) = *cur_value {","highlight_start":1,"highlight_end":51},{"text":"                        dns_config.borrow_mut().name_server = ip;","highlight_start":1,"highlight_end":66},{"text":"                        notifier.borrow_mut().schedule_notify(\"resolv/nameserver\");","highlight_start":1,"highlight_end":84},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    Ok(())","highlight_start":1,"highlight_end":27},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        \"route\" => {","highlight_start":1,"highlight_end":21},{"text":"            \"list\" => {","highlight_start":1,"highlight_end":24},{"text":"                ro [iface] || {","highlight_start":1,"highlight_end":32},{"text":"                    let mut gateway = None;","highlight_start":1,"highlight_end":44},{"text":"                    iface.borrow_mut().routes_mut().update(|map| {","highlight_start":1,"highlight_end":67},{"text":"                        gateway = map.get(&gateway_cidr()).map(|route| route.via_router);","highlight_start":1,"highlight_end":90},{"text":"                    });","highlight_start":1,"highlight_end":24},{"text":"                    if let Some(ip) = gateway {","highlight_start":1,"highlight_end":48},{"text":"                        format!(\"default via {}\\n\", ip)","highlight_start":1,"highlight_end":56},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        String::new()","highlight_start":1,"highlight_end":38},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            \"add\" => {","highlight_start":1,"highlight_end":23},{"text":"                wo [iface, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":65},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let default_gw = parse_default_gw(line)?;","highlight_start":1,"highlight_end":66},{"text":"                        if !default_gw.is_unicast() {","highlight_start":1,"highlight_end":54},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(default_gw);","highlight_start":1,"highlight_end":55},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(default_gw) = *cur_value {","highlight_start":1,"highlight_end":59},{"text":"                        if iface.borrow_mut().routes_mut().add_default_ipv4_route(default_gw).is_err() {","highlight_start":1,"highlight_end":105},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        notifier.borrow_mut().schedule_notify(\"route/list\");","highlight_start":1,"highlight_end":77},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            \"rm\" => {","highlight_start":1,"highlight_end":22},{"text":"                wo [iface, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":65},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let default_gw = parse_default_gw(line)?;","highlight_start":1,"highlight_end":66},{"text":"                        if !default_gw.is_unicast() {","highlight_start":1,"highlight_end":54},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(default_gw);","highlight_start":1,"highlight_end":55},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(default_gw) = *cur_value {","highlight_start":1,"highlight_end":59},{"text":"                        let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":60},{"text":"                        let mut gateway = None;","highlight_start":1,"highlight_end":48},{"text":"                        iface.routes_mut().update(|map| {","highlight_start":1,"highlight_end":58},{"text":"                            gateway = map.get(&gateway_cidr()).map(|route| route.via_router);","highlight_start":1,"highlight_end":94},{"text":"                        });","highlight_start":1,"highlight_end":28},{"text":"                        if gateway != Some(IpAddress::Ipv4(default_gw)) {","highlight_start":1,"highlight_end":74},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        iface.routes_mut().update(|map| {","highlight_start":1,"highlight_end":58},{"text":"                            map.remove(&gateway_cidr());","highlight_start":1,"highlight_end":57},{"text":"                        });","highlight_start":1,"highlight_end":28},{"text":"                        notifier.borrow_mut().schedule_notify(\"route/list\");","highlight_start":1,"highlight_end":77},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        \"ifaces\" => {","highlight_start":1,"highlight_end":22},{"text":"            \"eth0\" => {","highlight_start":1,"highlight_end":24},{"text":"                \"mac\" => {","highlight_start":1,"highlight_end":27},{"text":"                    rw [iface, notifier] (Option<EthernetAddress>, None)","highlight_start":1,"highlight_end":73},{"text":"                    || {","highlight_start":1,"highlight_end":25},{"text":"                        format!(\"{}\\n\", iface.borrow().ethernet_addr())","highlight_start":1,"highlight_end":72},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    |cur_value, line| {","highlight_start":1,"highlight_end":40},{"text":"                        if cur_value.is_none() {","highlight_start":1,"highlight_end":49},{"text":"                            let mac = EthernetAddress::from_str(line).","highlight_start":1,"highlight_end":71},{"text":"                                map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":82},{"text":"                            if !mac.is_unicast() {","highlight_start":1,"highlight_end":51},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            *cur_value = Some(mac);","highlight_start":1,"highlight_end":52},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        } else {","highlight_start":1,"highlight_end":33},{"text":"                            Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":68},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    |cur_value| {","highlight_start":1,"highlight_end":34},{"text":"                        if let Some(mac) = *cur_value {","highlight_start":1,"highlight_end":56},{"text":"                            iface.borrow_mut().set_ethernet_addr(mac);","highlight_start":1,"highlight_end":71},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/mac\");","highlight_start":1,"highlight_end":86},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"                \"addr\" => {","highlight_start":1,"highlight_end":28},{"text":"                    \"list\" => {","highlight_start":1,"highlight_end":32},{"text":"                        ro [iface]","highlight_start":1,"highlight_end":35},{"text":"                        || {","highlight_start":1,"highlight_end":29},{"text":"                            let mut ips = String::new();","highlight_start":1,"highlight_end":57},{"text":"                            for cidr in iface.borrow().ip_addrs() {","highlight_start":1,"highlight_end":68},{"text":"                                ips += &format!(\"{}\\n\", cidr);","highlight_start":1,"highlight_end":63},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            ips","highlight_start":1,"highlight_end":32},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"set\" => {","highlight_start":1,"highlight_end":31},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            if !cur_value.is_empty() {","highlight_start":1,"highlight_end":55},{"text":"                                let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":68},{"text":"                                let mut cidrs = vec![];","highlight_start":1,"highlight_end":56},{"text":"                                mem::swap(cur_value, &mut cidrs);","highlight_start":1,"highlight_end":66},{"text":"                                iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":60},{"text":"                                    *s = From::from(cidrs);","highlight_start":1,"highlight_end":60},{"text":"                                });","highlight_start":1,"highlight_end":36},{"text":"                                notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":96},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"add\" => {","highlight_start":1,"highlight_end":31},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":64},{"text":"                            let mut cidrs = iface.ip_addrs().to_vec();","highlight_start":1,"highlight_end":71},{"text":"                            for cidr in cur_value {","highlight_start":1,"highlight_end":52},{"text":"                                cidrs.insert(0, *cidr);","highlight_start":1,"highlight_end":56},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":56},{"text":"                                *s = From::from(cidrs);","highlight_start":1,"highlight_end":56},{"text":"                            });","highlight_start":1,"highlight_end":32},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":92},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"rm\" => {","highlight_start":1,"highlight_end":30},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":64},{"text":"                            let mut cidrs = iface.ip_addrs().to_vec();","highlight_start":1,"highlight_end":71},{"text":"                            for cidr in cur_value {","highlight_start":1,"highlight_end":52},{"text":"                                let pre_retain_len = cidrs.len();","highlight_start":1,"highlight_end":66},{"text":"                                cidrs.retain(|&c| c != *cidr);","highlight_start":1,"highlight_end":63},{"text":"                                if pre_retain_len == cidrs.len() {","highlight_start":1,"highlight_end":67},{"text":"                                    return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":84},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":56},{"text":"                                *s = From::from(cidrs);","highlight_start":1,"highlight_end":56},{"text":"                            });","highlight_start":1,"highlight_end":32},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":92},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"use `dyn`","code":null,"level":"help","spans":[{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4502,"byte_end":4502,"line_start":225,"line_end":225,"column_start":45,"column_end":45,"is_primary":true,"text":[{"text":"            let new_writer = move || -> Box<NodeWriter> {","highlight_start":45,"highlight_end":45}],"label":null,"suggested_replacement":"dyn ","suggestion_applicability":"MachineApplicable","expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":6209,"byte_end":6226,"line_start":266,"line_end":266,"column_start":42,"column_end":59,"is_primary":false,"text":[{"text":"            $(children.insert($e.into(), cfg_node!($($t)*));)*","highlight_start":42,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":6209,"byte_end":6226,"line_start":266,"line_end":266,"column_start":42,"column_end":59,"is_primary":false,"text":[{"text":"            $(children.insert($e.into(), cfg_node!($($t)*));)*","highlight_start":42,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/mod.rs","byte_start":1546,"byte_end":11568,"line_start":51,"line_end":273,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    cfg_node!{","highlight_start":5,"highlight_end":15},{"text":"        \"resolv\" => {","highlight_start":1,"highlight_end":22},{"text":"            \"nameserver\" => {","highlight_start":1,"highlight_end":30},{"text":"                rw [dns_config, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":70},{"text":"                || {","highlight_start":1,"highlight_end":21},{"text":"                    format!(\"{}\\n\", dns_config.borrow().name_server)","highlight_start":1,"highlight_end":69},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let ip = Ipv4Address::from_str(line.trim())","highlight_start":1,"highlight_end":68},{"text":"                            .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":79},{"text":"                        if !ip.is_unicast() {","highlight_start":1,"highlight_end":46},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(ip);","highlight_start":1,"highlight_end":47},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(ip) = *cur_value {","highlight_start":1,"highlight_end":51},{"text":"                        dns_config.borrow_mut().name_server = ip;","highlight_start":1,"highlight_end":66},{"text":"                        notifier.borrow_mut().schedule_notify(\"resolv/nameserver\");","highlight_start":1,"highlight_end":84},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    Ok(())","highlight_start":1,"highlight_end":27},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        \"route\" => {","highlight_start":1,"highlight_end":21},{"text":"            \"list\" => {","highlight_start":1,"highlight_end":24},{"text":"                ro [iface] || {","highlight_start":1,"highlight_end":32},{"text":"                    let mut gateway = None;","highlight_start":1,"highlight_end":44},{"text":"                    iface.borrow_mut().routes_mut().update(|map| {","highlight_start":1,"highlight_end":67},{"text":"                        gateway = map.get(&gateway_cidr()).map(|route| route.via_router);","highlight_start":1,"highlight_end":90},{"text":"                    });","highlight_start":1,"highlight_end":24},{"text":"                    if let Some(ip) = gateway {","highlight_start":1,"highlight_end":48},{"text":"                        format!(\"default via {}\\n\", ip)","highlight_start":1,"highlight_end":56},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        String::new()","highlight_start":1,"highlight_end":38},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            \"add\" => {","highlight_start":1,"highlight_end":23},{"text":"                wo [iface, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":65},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let default_gw = parse_default_gw(line)?;","highlight_start":1,"highlight_end":66},{"text":"                        if !default_gw.is_unicast() {","highlight_start":1,"highlight_end":54},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(default_gw);","highlight_start":1,"highlight_end":55},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(default_gw) = *cur_value {","highlight_start":1,"highlight_end":59},{"text":"                        if iface.borrow_mut().routes_mut().add_default_ipv4_route(default_gw).is_err() {","highlight_start":1,"highlight_end":105},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        notifier.borrow_mut().schedule_notify(\"route/list\");","highlight_start":1,"highlight_end":77},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            \"rm\" => {","highlight_start":1,"highlight_end":22},{"text":"                wo [iface, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":65},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let default_gw = parse_default_gw(line)?;","highlight_start":1,"highlight_end":66},{"text":"                        if !default_gw.is_unicast() {","highlight_start":1,"highlight_end":54},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(default_gw);","highlight_start":1,"highlight_end":55},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(default_gw) = *cur_value {","highlight_start":1,"highlight_end":59},{"text":"                        let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":60},{"text":"                        let mut gateway = None;","highlight_start":1,"highlight_end":48},{"text":"                        iface.routes_mut().update(|map| {","highlight_start":1,"highlight_end":58},{"text":"                            gateway = map.get(&gateway_cidr()).map(|route| route.via_router);","highlight_start":1,"highlight_end":94},{"text":"                        });","highlight_start":1,"highlight_end":28},{"text":"                        if gateway != Some(IpAddress::Ipv4(default_gw)) {","highlight_start":1,"highlight_end":74},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        iface.routes_mut().update(|map| {","highlight_start":1,"highlight_end":58},{"text":"                            map.remove(&gateway_cidr());","highlight_start":1,"highlight_end":57},{"text":"                        });","highlight_start":1,"highlight_end":28},{"text":"                        notifier.borrow_mut().schedule_notify(\"route/list\");","highlight_start":1,"highlight_end":77},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        \"ifaces\" => {","highlight_start":1,"highlight_end":22},{"text":"            \"eth0\" => {","highlight_start":1,"highlight_end":24},{"text":"                \"mac\" => {","highlight_start":1,"highlight_end":27},{"text":"                    rw [iface, notifier] (Option<EthernetAddress>, None)","highlight_start":1,"highlight_end":73},{"text":"                    || {","highlight_start":1,"highlight_end":25},{"text":"                        format!(\"{}\\n\", iface.borrow().ethernet_addr())","highlight_start":1,"highlight_end":72},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    |cur_value, line| {","highlight_start":1,"highlight_end":40},{"text":"                        if cur_value.is_none() {","highlight_start":1,"highlight_end":49},{"text":"                            let mac = EthernetAddress::from_str(line).","highlight_start":1,"highlight_end":71},{"text":"                                map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":82},{"text":"                            if !mac.is_unicast() {","highlight_start":1,"highlight_end":51},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            *cur_value = Some(mac);","highlight_start":1,"highlight_end":52},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        } else {","highlight_start":1,"highlight_end":33},{"text":"                            Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":68},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    |cur_value| {","highlight_start":1,"highlight_end":34},{"text":"                        if let Some(mac) = *cur_value {","highlight_start":1,"highlight_end":56},{"text":"                            iface.borrow_mut().set_ethernet_addr(mac);","highlight_start":1,"highlight_end":71},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/mac\");","highlight_start":1,"highlight_end":86},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"                \"addr\" => {","highlight_start":1,"highlight_end":28},{"text":"                    \"list\" => {","highlight_start":1,"highlight_end":32},{"text":"                        ro [iface]","highlight_start":1,"highlight_end":35},{"text":"                        || {","highlight_start":1,"highlight_end":29},{"text":"                            let mut ips = String::new();","highlight_start":1,"highlight_end":57},{"text":"                            for cidr in iface.borrow().ip_addrs() {","highlight_start":1,"highlight_end":68},{"text":"                                ips += &format!(\"{}\\n\", cidr);","highlight_start":1,"highlight_end":63},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            ips","highlight_start":1,"highlight_end":32},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"set\" => {","highlight_start":1,"highlight_end":31},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            if !cur_value.is_empty() {","highlight_start":1,"highlight_end":55},{"text":"                                let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":68},{"text":"                                let mut cidrs = vec![];","highlight_start":1,"highlight_end":56},{"text":"                                mem::swap(cur_value, &mut cidrs);","highlight_start":1,"highlight_end":66},{"text":"                                iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":60},{"text":"                                    *s = From::from(cidrs);","highlight_start":1,"highlight_end":60},{"text":"                                });","highlight_start":1,"highlight_end":36},{"text":"                                notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":96},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"add\" => {","highlight_start":1,"highlight_end":31},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":64},{"text":"                            let mut cidrs = iface.ip_addrs().to_vec();","highlight_start":1,"highlight_end":71},{"text":"                            for cidr in cur_value {","highlight_start":1,"highlight_end":52},{"text":"                                cidrs.insert(0, *cidr);","highlight_start":1,"highlight_end":56},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":56},{"text":"                                *s = From::from(cidrs);","highlight_start":1,"highlight_end":56},{"text":"                            });","highlight_start":1,"highlight_end":32},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":92},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"rm\" => {","highlight_start":1,"highlight_end":30},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":64},{"text":"                            let mut cidrs = iface.ip_addrs().to_vec();","highlight_start":1,"highlight_end":71},{"text":"                            for cidr in cur_value {","highlight_start":1,"highlight_end":52},{"text":"                                let pre_retain_len = cidrs.len();","highlight_start":1,"highlight_end":66},{"text":"                                cidrs.retain(|&c| c != *cidr);","highlight_start":1,"highlight_end":63},{"text":"                                if pre_retain_len == cidrs.len() {","highlight_start":1,"highlight_end":67},{"text":"                                    return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":84},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":56},{"text":"                                *s = From::from(cidrs);","highlight_start":1,"highlight_end":56},{"text":"                            });","highlight_start":1,"highlight_end":32},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":92},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4512,"byte_end":4512,"line_start":225,"line_end":225,"column_start":55,"column_end":55,"is_primary":true,"text":[{"text":"            let new_writer = move || -> Box<NodeWriter> {","highlight_start":55,"highlight_end":55}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":6209,"byte_end":6226,"line_start":266,"line_end":266,"column_start":42,"column_end":59,"is_primary":false,"text":[{"text":"            $(children.insert($e.into(), cfg_node!($($t)*));)*","highlight_start":42,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":6209,"byte_end":6226,"line_start":266,"line_end":266,"column_start":42,"column_end":59,"is_primary":false,"text":[{"text":"            $(children.insert($e.into(), cfg_node!($($t)*));)*","highlight_start":42,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/mod.rs","byte_start":1546,"byte_end":11568,"line_start":51,"line_end":273,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    cfg_node!{","highlight_start":5,"highlight_end":15},{"text":"        \"resolv\" => {","highlight_start":1,"highlight_end":22},{"text":"            \"nameserver\" => {","highlight_start":1,"highlight_end":30},{"text":"                rw [dns_config, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":70},{"text":"                || {","highlight_start":1,"highlight_end":21},{"text":"                    format!(\"{}\\n\", dns_config.borrow().name_server)","highlight_start":1,"highlight_end":69},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let ip = Ipv4Address::from_str(line.trim())","highlight_start":1,"highlight_end":68},{"text":"                            .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":79},{"text":"                        if !ip.is_unicast() {","highlight_start":1,"highlight_end":46},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(ip);","highlight_start":1,"highlight_end":47},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(ip) = *cur_value {","highlight_start":1,"highlight_end":51},{"text":"                        dns_config.borrow_mut().name_server = ip;","highlight_start":1,"highlight_end":66},{"text":"                        notifier.borrow_mut().schedule_notify(\"resolv/nameserver\");","highlight_start":1,"highlight_end":84},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    Ok(())","highlight_start":1,"highlight_end":27},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        \"route\" => {","highlight_start":1,"highlight_end":21},{"text":"            \"list\" => {","highlight_start":1,"highlight_end":24},{"text":"                ro [iface] || {","highlight_start":1,"highlight_end":32},{"text":"                    let mut gateway = None;","highlight_start":1,"highlight_end":44},{"text":"                    iface.borrow_mut().routes_mut().update(|map| {","highlight_start":1,"highlight_end":67},{"text":"                        gateway = map.get(&gateway_cidr()).map(|route| route.via_router);","highlight_start":1,"highlight_end":90},{"text":"                    });","highlight_start":1,"highlight_end":24},{"text":"                    if let Some(ip) = gateway {","highlight_start":1,"highlight_end":48},{"text":"                        format!(\"default via {}\\n\", ip)","highlight_start":1,"highlight_end":56},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        String::new()","highlight_start":1,"highlight_end":38},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            \"add\" => {","highlight_start":1,"highlight_end":23},{"text":"                wo [iface, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":65},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let default_gw = parse_default_gw(line)?;","highlight_start":1,"highlight_end":66},{"text":"                        if !default_gw.is_unicast() {","highlight_start":1,"highlight_end":54},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(default_gw);","highlight_start":1,"highlight_end":55},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(default_gw) = *cur_value {","highlight_start":1,"highlight_end":59},{"text":"                        if iface.borrow_mut().routes_mut().add_default_ipv4_route(default_gw).is_err() {","highlight_start":1,"highlight_end":105},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        notifier.borrow_mut().schedule_notify(\"route/list\");","highlight_start":1,"highlight_end":77},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            \"rm\" => {","highlight_start":1,"highlight_end":22},{"text":"                wo [iface, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":65},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let default_gw = parse_default_gw(line)?;","highlight_start":1,"highlight_end":66},{"text":"                        if !default_gw.is_unicast() {","highlight_start":1,"highlight_end":54},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(default_gw);","highlight_start":1,"highlight_end":55},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(default_gw) = *cur_value {","highlight_start":1,"highlight_end":59},{"text":"                        let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":60},{"text":"                        let mut gateway = None;","highlight_start":1,"highlight_end":48},{"text":"                        iface.routes_mut().update(|map| {","highlight_start":1,"highlight_end":58},{"text":"                            gateway = map.get(&gateway_cidr()).map(|route| route.via_router);","highlight_start":1,"highlight_end":94},{"text":"                        });","highlight_start":1,"highlight_end":28},{"text":"                        if gateway != Some(IpAddress::Ipv4(default_gw)) {","highlight_start":1,"highlight_end":74},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        iface.routes_mut().update(|map| {","highlight_start":1,"highlight_end":58},{"text":"                            map.remove(&gateway_cidr());","highlight_start":1,"highlight_end":57},{"text":"                        });","highlight_start":1,"highlight_end":28},{"text":"                        notifier.borrow_mut().schedule_notify(\"route/list\");","highlight_start":1,"highlight_end":77},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        \"ifaces\" => {","highlight_start":1,"highlight_end":22},{"text":"            \"eth0\" => {","highlight_start":1,"highlight_end":24},{"text":"                \"mac\" => {","highlight_start":1,"highlight_end":27},{"text":"                    rw [iface, notifier] (Option<EthernetAddress>, None)","highlight_start":1,"highlight_end":73},{"text":"                    || {","highlight_start":1,"highlight_end":25},{"text":"                        format!(\"{}\\n\", iface.borrow().ethernet_addr())","highlight_start":1,"highlight_end":72},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    |cur_value, line| {","highlight_start":1,"highlight_end":40},{"text":"                        if cur_value.is_none() {","highlight_start":1,"highlight_end":49},{"text":"                            let mac = EthernetAddress::from_str(line).","highlight_start":1,"highlight_end":71},{"text":"                                map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":82},{"text":"                            if !mac.is_unicast() {","highlight_start":1,"highlight_end":51},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            *cur_value = Some(mac);","highlight_start":1,"highlight_end":52},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        } else {","highlight_start":1,"highlight_end":33},{"text":"                            Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":68},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    |cur_value| {","highlight_start":1,"highlight_end":34},{"text":"                        if let Some(mac) = *cur_value {","highlight_start":1,"highlight_end":56},{"text":"                            iface.borrow_mut().set_ethernet_addr(mac);","highlight_start":1,"highlight_end":71},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/mac\");","highlight_start":1,"highlight_end":86},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"                \"addr\" => {","highlight_start":1,"highlight_end":28},{"text":"                    \"list\" => {","highlight_start":1,"highlight_end":32},{"text":"                        ro [iface]","highlight_start":1,"highlight_end":35},{"text":"                        || {","highlight_start":1,"highlight_end":29},{"text":"                            let mut ips = String::new();","highlight_start":1,"highlight_end":57},{"text":"                            for cidr in iface.borrow().ip_addrs() {","highlight_start":1,"highlight_end":68},{"text":"                                ips += &format!(\"{}\\n\", cidr);","highlight_start":1,"highlight_end":63},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            ips","highlight_start":1,"highlight_end":32},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"set\" => {","highlight_start":1,"highlight_end":31},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            if !cur_value.is_empty() {","highlight_start":1,"highlight_end":55},{"text":"                                let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":68},{"text":"                                let mut cidrs = vec![];","highlight_start":1,"highlight_end":56},{"text":"                                mem::swap(cur_value, &mut cidrs);","highlight_start":1,"highlight_end":66},{"text":"                                iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":60},{"text":"                                    *s = From::from(cidrs);","highlight_start":1,"highlight_end":60},{"text":"                                });","highlight_start":1,"highlight_end":36},{"text":"                                notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":96},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"add\" => {","highlight_start":1,"highlight_end":31},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":64},{"text":"                            let mut cidrs = iface.ip_addrs().to_vec();","highlight_start":1,"highlight_end":71},{"text":"                            for cidr in cur_value {","highlight_start":1,"highlight_end":52},{"text":"                                cidrs.insert(0, *cidr);","highlight_start":1,"highlight_end":56},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":56},{"text":"                                *s = From::from(cidrs);","highlight_start":1,"highlight_end":56},{"text":"                            });","highlight_start":1,"highlight_end":32},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":92},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"rm\" => {","highlight_start":1,"highlight_end":30},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":64},{"text":"                            let mut cidrs = iface.ip_addrs().to_vec();","highlight_start":1,"highlight_end":71},{"text":"                            for cidr in cur_value {","highlight_start":1,"highlight_end":52},{"text":"                                let pre_retain_len = cidrs.len();","highlight_start":1,"highlight_end":66},{"text":"                                cidrs.retain(|&c| c != *cidr);","highlight_start":1,"highlight_end":63},{"text":"                                if pre_retain_len == cidrs.len() {","highlight_start":1,"highlight_end":67},{"text":"                                    return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":84},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":56},{"text":"                                *s = From::from(cidrs);","highlight_start":1,"highlight_end":56},{"text":"                            });","highlight_start":1,"highlight_end":32},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":92},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trait objects without an explicit `dyn` are deprecated\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/smolnetd/scheme/netcfg/nodes.rs:225:45\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m225\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m            let new_writer = move || -> Box<NodeWriter> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                              \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0msrc/smolnetd/scheme/netcfg/mod.rs:51:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m51\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    cfg_node!{\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m52\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        \"resolv\" => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m53\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            \"nameserver\" => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m54\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                rw [dns_config, notifier] (Option<Ipv4Address>, None)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m272\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m273\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_____-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `cfg_node` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: use `dyn`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m225\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m            let new_writer = move || -> Box<NodeWriter> {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m225\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m            let new_writer = move || -> Box<\u001b[0m\u001b[0m\u001b[38;5;10mdyn \u001b[0m\u001b[0mNodeWriter> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\n\n"}
{"message":"trait objects without an explicit `dyn` are deprecated","code":{"code":"bare_trait_objects","explanation":null},"level":"warning","spans":[{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4502,"byte_end":4512,"line_start":225,"line_end":225,"column_start":45,"column_end":55,"is_primary":true,"text":[{"text":"            let new_writer = move || -> Box<NodeWriter> {","highlight_start":45,"highlight_end":55}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":6209,"byte_end":6226,"line_start":266,"line_end":266,"column_start":42,"column_end":59,"is_primary":false,"text":[{"text":"            $(children.insert($e.into(), cfg_node!($($t)*));)*","highlight_start":42,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":6209,"byte_end":6226,"line_start":266,"line_end":266,"column_start":42,"column_end":59,"is_primary":false,"text":[{"text":"            $(children.insert($e.into(), cfg_node!($($t)*));)*","highlight_start":42,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/mod.rs","byte_start":1546,"byte_end":11568,"line_start":51,"line_end":273,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    cfg_node!{","highlight_start":5,"highlight_end":15},{"text":"        \"resolv\" => {","highlight_start":1,"highlight_end":22},{"text":"            \"nameserver\" => {","highlight_start":1,"highlight_end":30},{"text":"                rw [dns_config, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":70},{"text":"                || {","highlight_start":1,"highlight_end":21},{"text":"                    format!(\"{}\\n\", dns_config.borrow().name_server)","highlight_start":1,"highlight_end":69},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let ip = Ipv4Address::from_str(line.trim())","highlight_start":1,"highlight_end":68},{"text":"                            .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":79},{"text":"                        if !ip.is_unicast() {","highlight_start":1,"highlight_end":46},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(ip);","highlight_start":1,"highlight_end":47},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(ip) = *cur_value {","highlight_start":1,"highlight_end":51},{"text":"                        dns_config.borrow_mut().name_server = ip;","highlight_start":1,"highlight_end":66},{"text":"                        notifier.borrow_mut().schedule_notify(\"resolv/nameserver\");","highlight_start":1,"highlight_end":84},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    Ok(())","highlight_start":1,"highlight_end":27},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        \"route\" => {","highlight_start":1,"highlight_end":21},{"text":"            \"list\" => {","highlight_start":1,"highlight_end":24},{"text":"                ro [iface] || {","highlight_start":1,"highlight_end":32},{"text":"                    let mut gateway = None;","highlight_start":1,"highlight_end":44},{"text":"                    iface.borrow_mut().routes_mut().update(|map| {","highlight_start":1,"highlight_end":67},{"text":"                        gateway = map.get(&gateway_cidr()).map(|route| route.via_router);","highlight_start":1,"highlight_end":90},{"text":"                    });","highlight_start":1,"highlight_end":24},{"text":"                    if let Some(ip) = gateway {","highlight_start":1,"highlight_end":48},{"text":"                        format!(\"default via {}\\n\", ip)","highlight_start":1,"highlight_end":56},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        String::new()","highlight_start":1,"highlight_end":38},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            \"add\" => {","highlight_start":1,"highlight_end":23},{"text":"                wo [iface, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":65},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let default_gw = parse_default_gw(line)?;","highlight_start":1,"highlight_end":66},{"text":"                        if !default_gw.is_unicast() {","highlight_start":1,"highlight_end":54},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(default_gw);","highlight_start":1,"highlight_end":55},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(default_gw) = *cur_value {","highlight_start":1,"highlight_end":59},{"text":"                        if iface.borrow_mut().routes_mut().add_default_ipv4_route(default_gw).is_err() {","highlight_start":1,"highlight_end":105},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        notifier.borrow_mut().schedule_notify(\"route/list\");","highlight_start":1,"highlight_end":77},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            \"rm\" => {","highlight_start":1,"highlight_end":22},{"text":"                wo [iface, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":65},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let default_gw = parse_default_gw(line)?;","highlight_start":1,"highlight_end":66},{"text":"                        if !default_gw.is_unicast() {","highlight_start":1,"highlight_end":54},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(default_gw);","highlight_start":1,"highlight_end":55},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(default_gw) = *cur_value {","highlight_start":1,"highlight_end":59},{"text":"                        let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":60},{"text":"                        let mut gateway = None;","highlight_start":1,"highlight_end":48},{"text":"                        iface.routes_mut().update(|map| {","highlight_start":1,"highlight_end":58},{"text":"                            gateway = map.get(&gateway_cidr()).map(|route| route.via_router);","highlight_start":1,"highlight_end":94},{"text":"                        });","highlight_start":1,"highlight_end":28},{"text":"                        if gateway != Some(IpAddress::Ipv4(default_gw)) {","highlight_start":1,"highlight_end":74},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        iface.routes_mut().update(|map| {","highlight_start":1,"highlight_end":58},{"text":"                            map.remove(&gateway_cidr());","highlight_start":1,"highlight_end":57},{"text":"                        });","highlight_start":1,"highlight_end":28},{"text":"                        notifier.borrow_mut().schedule_notify(\"route/list\");","highlight_start":1,"highlight_end":77},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        \"ifaces\" => {","highlight_start":1,"highlight_end":22},{"text":"            \"eth0\" => {","highlight_start":1,"highlight_end":24},{"text":"                \"mac\" => {","highlight_start":1,"highlight_end":27},{"text":"                    rw [iface, notifier] (Option<EthernetAddress>, None)","highlight_start":1,"highlight_end":73},{"text":"                    || {","highlight_start":1,"highlight_end":25},{"text":"                        format!(\"{}\\n\", iface.borrow().ethernet_addr())","highlight_start":1,"highlight_end":72},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    |cur_value, line| {","highlight_start":1,"highlight_end":40},{"text":"                        if cur_value.is_none() {","highlight_start":1,"highlight_end":49},{"text":"                            let mac = EthernetAddress::from_str(line).","highlight_start":1,"highlight_end":71},{"text":"                                map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":82},{"text":"                            if !mac.is_unicast() {","highlight_start":1,"highlight_end":51},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            *cur_value = Some(mac);","highlight_start":1,"highlight_end":52},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        } else {","highlight_start":1,"highlight_end":33},{"text":"                            Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":68},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    |cur_value| {","highlight_start":1,"highlight_end":34},{"text":"                        if let Some(mac) = *cur_value {","highlight_start":1,"highlight_end":56},{"text":"                            iface.borrow_mut().set_ethernet_addr(mac);","highlight_start":1,"highlight_end":71},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/mac\");","highlight_start":1,"highlight_end":86},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"                \"addr\" => {","highlight_start":1,"highlight_end":28},{"text":"                    \"list\" => {","highlight_start":1,"highlight_end":32},{"text":"                        ro [iface]","highlight_start":1,"highlight_end":35},{"text":"                        || {","highlight_start":1,"highlight_end":29},{"text":"                            let mut ips = String::new();","highlight_start":1,"highlight_end":57},{"text":"                            for cidr in iface.borrow().ip_addrs() {","highlight_start":1,"highlight_end":68},{"text":"                                ips += &format!(\"{}\\n\", cidr);","highlight_start":1,"highlight_end":63},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            ips","highlight_start":1,"highlight_end":32},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"set\" => {","highlight_start":1,"highlight_end":31},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            if !cur_value.is_empty() {","highlight_start":1,"highlight_end":55},{"text":"                                let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":68},{"text":"                                let mut cidrs = vec![];","highlight_start":1,"highlight_end":56},{"text":"                                mem::swap(cur_value, &mut cidrs);","highlight_start":1,"highlight_end":66},{"text":"                                iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":60},{"text":"                                    *s = From::from(cidrs);","highlight_start":1,"highlight_end":60},{"text":"                                });","highlight_start":1,"highlight_end":36},{"text":"                                notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":96},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"add\" => {","highlight_start":1,"highlight_end":31},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":64},{"text":"                            let mut cidrs = iface.ip_addrs().to_vec();","highlight_start":1,"highlight_end":71},{"text":"                            for cidr in cur_value {","highlight_start":1,"highlight_end":52},{"text":"                                cidrs.insert(0, *cidr);","highlight_start":1,"highlight_end":56},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":56},{"text":"                                *s = From::from(cidrs);","highlight_start":1,"highlight_end":56},{"text":"                            });","highlight_start":1,"highlight_end":32},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":92},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"rm\" => {","highlight_start":1,"highlight_end":30},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":64},{"text":"                            let mut cidrs = iface.ip_addrs().to_vec();","highlight_start":1,"highlight_end":71},{"text":"                            for cidr in cur_value {","highlight_start":1,"highlight_end":52},{"text":"                                let pre_retain_len = cidrs.len();","highlight_start":1,"highlight_end":66},{"text":"                                cidrs.retain(|&c| c != *cidr);","highlight_start":1,"highlight_end":63},{"text":"                                if pre_retain_len == cidrs.len() {","highlight_start":1,"highlight_end":67},{"text":"                                    return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":84},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":56},{"text":"                                *s = From::from(cidrs);","highlight_start":1,"highlight_end":56},{"text":"                            });","highlight_start":1,"highlight_end":32},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":92},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"use `dyn`","code":null,"level":"help","spans":[{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4502,"byte_end":4502,"line_start":225,"line_end":225,"column_start":45,"column_end":45,"is_primary":true,"text":[{"text":"            let new_writer = move || -> Box<NodeWriter> {","highlight_start":45,"highlight_end":45}],"label":null,"suggested_replacement":"dyn ","suggestion_applicability":"MachineApplicable","expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":6209,"byte_end":6226,"line_start":266,"line_end":266,"column_start":42,"column_end":59,"is_primary":false,"text":[{"text":"            $(children.insert($e.into(), cfg_node!($($t)*));)*","highlight_start":42,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":6209,"byte_end":6226,"line_start":266,"line_end":266,"column_start":42,"column_end":59,"is_primary":false,"text":[{"text":"            $(children.insert($e.into(), cfg_node!($($t)*));)*","highlight_start":42,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/mod.rs","byte_start":1546,"byte_end":11568,"line_start":51,"line_end":273,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    cfg_node!{","highlight_start":5,"highlight_end":15},{"text":"        \"resolv\" => {","highlight_start":1,"highlight_end":22},{"text":"            \"nameserver\" => {","highlight_start":1,"highlight_end":30},{"text":"                rw [dns_config, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":70},{"text":"                || {","highlight_start":1,"highlight_end":21},{"text":"                    format!(\"{}\\n\", dns_config.borrow().name_server)","highlight_start":1,"highlight_end":69},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let ip = Ipv4Address::from_str(line.trim())","highlight_start":1,"highlight_end":68},{"text":"                            .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":79},{"text":"                        if !ip.is_unicast() {","highlight_start":1,"highlight_end":46},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(ip);","highlight_start":1,"highlight_end":47},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(ip) = *cur_value {","highlight_start":1,"highlight_end":51},{"text":"                        dns_config.borrow_mut().name_server = ip;","highlight_start":1,"highlight_end":66},{"text":"                        notifier.borrow_mut().schedule_notify(\"resolv/nameserver\");","highlight_start":1,"highlight_end":84},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    Ok(())","highlight_start":1,"highlight_end":27},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        \"route\" => {","highlight_start":1,"highlight_end":21},{"text":"            \"list\" => {","highlight_start":1,"highlight_end":24},{"text":"                ro [iface] || {","highlight_start":1,"highlight_end":32},{"text":"                    let mut gateway = None;","highlight_start":1,"highlight_end":44},{"text":"                    iface.borrow_mut().routes_mut().update(|map| {","highlight_start":1,"highlight_end":67},{"text":"                        gateway = map.get(&gateway_cidr()).map(|route| route.via_router);","highlight_start":1,"highlight_end":90},{"text":"                    });","highlight_start":1,"highlight_end":24},{"text":"                    if let Some(ip) = gateway {","highlight_start":1,"highlight_end":48},{"text":"                        format!(\"default via {}\\n\", ip)","highlight_start":1,"highlight_end":56},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        String::new()","highlight_start":1,"highlight_end":38},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            \"add\" => {","highlight_start":1,"highlight_end":23},{"text":"                wo [iface, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":65},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let default_gw = parse_default_gw(line)?;","highlight_start":1,"highlight_end":66},{"text":"                        if !default_gw.is_unicast() {","highlight_start":1,"highlight_end":54},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(default_gw);","highlight_start":1,"highlight_end":55},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(default_gw) = *cur_value {","highlight_start":1,"highlight_end":59},{"text":"                        if iface.borrow_mut().routes_mut().add_default_ipv4_route(default_gw).is_err() {","highlight_start":1,"highlight_end":105},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        notifier.borrow_mut().schedule_notify(\"route/list\");","highlight_start":1,"highlight_end":77},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            \"rm\" => {","highlight_start":1,"highlight_end":22},{"text":"                wo [iface, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":65},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let default_gw = parse_default_gw(line)?;","highlight_start":1,"highlight_end":66},{"text":"                        if !default_gw.is_unicast() {","highlight_start":1,"highlight_end":54},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(default_gw);","highlight_start":1,"highlight_end":55},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(default_gw) = *cur_value {","highlight_start":1,"highlight_end":59},{"text":"                        let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":60},{"text":"                        let mut gateway = None;","highlight_start":1,"highlight_end":48},{"text":"                        iface.routes_mut().update(|map| {","highlight_start":1,"highlight_end":58},{"text":"                            gateway = map.get(&gateway_cidr()).map(|route| route.via_router);","highlight_start":1,"highlight_end":94},{"text":"                        });","highlight_start":1,"highlight_end":28},{"text":"                        if gateway != Some(IpAddress::Ipv4(default_gw)) {","highlight_start":1,"highlight_end":74},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        iface.routes_mut().update(|map| {","highlight_start":1,"highlight_end":58},{"text":"                            map.remove(&gateway_cidr());","highlight_start":1,"highlight_end":57},{"text":"                        });","highlight_start":1,"highlight_end":28},{"text":"                        notifier.borrow_mut().schedule_notify(\"route/list\");","highlight_start":1,"highlight_end":77},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        \"ifaces\" => {","highlight_start":1,"highlight_end":22},{"text":"            \"eth0\" => {","highlight_start":1,"highlight_end":24},{"text":"                \"mac\" => {","highlight_start":1,"highlight_end":27},{"text":"                    rw [iface, notifier] (Option<EthernetAddress>, None)","highlight_start":1,"highlight_end":73},{"text":"                    || {","highlight_start":1,"highlight_end":25},{"text":"                        format!(\"{}\\n\", iface.borrow().ethernet_addr())","highlight_start":1,"highlight_end":72},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    |cur_value, line| {","highlight_start":1,"highlight_end":40},{"text":"                        if cur_value.is_none() {","highlight_start":1,"highlight_end":49},{"text":"                            let mac = EthernetAddress::from_str(line).","highlight_start":1,"highlight_end":71},{"text":"                                map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":82},{"text":"                            if !mac.is_unicast() {","highlight_start":1,"highlight_end":51},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            *cur_value = Some(mac);","highlight_start":1,"highlight_end":52},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        } else {","highlight_start":1,"highlight_end":33},{"text":"                            Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":68},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    |cur_value| {","highlight_start":1,"highlight_end":34},{"text":"                        if let Some(mac) = *cur_value {","highlight_start":1,"highlight_end":56},{"text":"                            iface.borrow_mut().set_ethernet_addr(mac);","highlight_start":1,"highlight_end":71},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/mac\");","highlight_start":1,"highlight_end":86},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"                \"addr\" => {","highlight_start":1,"highlight_end":28},{"text":"                    \"list\" => {","highlight_start":1,"highlight_end":32},{"text":"                        ro [iface]","highlight_start":1,"highlight_end":35},{"text":"                        || {","highlight_start":1,"highlight_end":29},{"text":"                            let mut ips = String::new();","highlight_start":1,"highlight_end":57},{"text":"                            for cidr in iface.borrow().ip_addrs() {","highlight_start":1,"highlight_end":68},{"text":"                                ips += &format!(\"{}\\n\", cidr);","highlight_start":1,"highlight_end":63},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            ips","highlight_start":1,"highlight_end":32},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"set\" => {","highlight_start":1,"highlight_end":31},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            if !cur_value.is_empty() {","highlight_start":1,"highlight_end":55},{"text":"                                let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":68},{"text":"                                let mut cidrs = vec![];","highlight_start":1,"highlight_end":56},{"text":"                                mem::swap(cur_value, &mut cidrs);","highlight_start":1,"highlight_end":66},{"text":"                                iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":60},{"text":"                                    *s = From::from(cidrs);","highlight_start":1,"highlight_end":60},{"text":"                                });","highlight_start":1,"highlight_end":36},{"text":"                                notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":96},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"add\" => {","highlight_start":1,"highlight_end":31},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":64},{"text":"                            let mut cidrs = iface.ip_addrs().to_vec();","highlight_start":1,"highlight_end":71},{"text":"                            for cidr in cur_value {","highlight_start":1,"highlight_end":52},{"text":"                                cidrs.insert(0, *cidr);","highlight_start":1,"highlight_end":56},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":56},{"text":"                                *s = From::from(cidrs);","highlight_start":1,"highlight_end":56},{"text":"                            });","highlight_start":1,"highlight_end":32},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":92},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"rm\" => {","highlight_start":1,"highlight_end":30},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":64},{"text":"                            let mut cidrs = iface.ip_addrs().to_vec();","highlight_start":1,"highlight_end":71},{"text":"                            for cidr in cur_value {","highlight_start":1,"highlight_end":52},{"text":"                                let pre_retain_len = cidrs.len();","highlight_start":1,"highlight_end":66},{"text":"                                cidrs.retain(|&c| c != *cidr);","highlight_start":1,"highlight_end":63},{"text":"                                if pre_retain_len == cidrs.len() {","highlight_start":1,"highlight_end":67},{"text":"                                    return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":84},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":56},{"text":"                                *s = From::from(cidrs);","highlight_start":1,"highlight_end":56},{"text":"                            });","highlight_start":1,"highlight_end":32},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":92},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4512,"byte_end":4512,"line_start":225,"line_end":225,"column_start":55,"column_end":55,"is_primary":true,"text":[{"text":"            let new_writer = move || -> Box<NodeWriter> {","highlight_start":55,"highlight_end":55}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":6209,"byte_end":6226,"line_start":266,"line_end":266,"column_start":42,"column_end":59,"is_primary":false,"text":[{"text":"            $(children.insert($e.into(), cfg_node!($($t)*));)*","highlight_start":42,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":6209,"byte_end":6226,"line_start":266,"line_end":266,"column_start":42,"column_end":59,"is_primary":false,"text":[{"text":"            $(children.insert($e.into(), cfg_node!($($t)*));)*","highlight_start":42,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/mod.rs","byte_start":1546,"byte_end":11568,"line_start":51,"line_end":273,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    cfg_node!{","highlight_start":5,"highlight_end":15},{"text":"        \"resolv\" => {","highlight_start":1,"highlight_end":22},{"text":"            \"nameserver\" => {","highlight_start":1,"highlight_end":30},{"text":"                rw [dns_config, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":70},{"text":"                || {","highlight_start":1,"highlight_end":21},{"text":"                    format!(\"{}\\n\", dns_config.borrow().name_server)","highlight_start":1,"highlight_end":69},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let ip = Ipv4Address::from_str(line.trim())","highlight_start":1,"highlight_end":68},{"text":"                            .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":79},{"text":"                        if !ip.is_unicast() {","highlight_start":1,"highlight_end":46},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(ip);","highlight_start":1,"highlight_end":47},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(ip) = *cur_value {","highlight_start":1,"highlight_end":51},{"text":"                        dns_config.borrow_mut().name_server = ip;","highlight_start":1,"highlight_end":66},{"text":"                        notifier.borrow_mut().schedule_notify(\"resolv/nameserver\");","highlight_start":1,"highlight_end":84},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    Ok(())","highlight_start":1,"highlight_end":27},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        \"route\" => {","highlight_start":1,"highlight_end":21},{"text":"            \"list\" => {","highlight_start":1,"highlight_end":24},{"text":"                ro [iface] || {","highlight_start":1,"highlight_end":32},{"text":"                    let mut gateway = None;","highlight_start":1,"highlight_end":44},{"text":"                    iface.borrow_mut().routes_mut().update(|map| {","highlight_start":1,"highlight_end":67},{"text":"                        gateway = map.get(&gateway_cidr()).map(|route| route.via_router);","highlight_start":1,"highlight_end":90},{"text":"                    });","highlight_start":1,"highlight_end":24},{"text":"                    if let Some(ip) = gateway {","highlight_start":1,"highlight_end":48},{"text":"                        format!(\"default via {}\\n\", ip)","highlight_start":1,"highlight_end":56},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        String::new()","highlight_start":1,"highlight_end":38},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            \"add\" => {","highlight_start":1,"highlight_end":23},{"text":"                wo [iface, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":65},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let default_gw = parse_default_gw(line)?;","highlight_start":1,"highlight_end":66},{"text":"                        if !default_gw.is_unicast() {","highlight_start":1,"highlight_end":54},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(default_gw);","highlight_start":1,"highlight_end":55},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(default_gw) = *cur_value {","highlight_start":1,"highlight_end":59},{"text":"                        if iface.borrow_mut().routes_mut().add_default_ipv4_route(default_gw).is_err() {","highlight_start":1,"highlight_end":105},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        notifier.borrow_mut().schedule_notify(\"route/list\");","highlight_start":1,"highlight_end":77},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            \"rm\" => {","highlight_start":1,"highlight_end":22},{"text":"                wo [iface, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":65},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let default_gw = parse_default_gw(line)?;","highlight_start":1,"highlight_end":66},{"text":"                        if !default_gw.is_unicast() {","highlight_start":1,"highlight_end":54},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(default_gw);","highlight_start":1,"highlight_end":55},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(default_gw) = *cur_value {","highlight_start":1,"highlight_end":59},{"text":"                        let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":60},{"text":"                        let mut gateway = None;","highlight_start":1,"highlight_end":48},{"text":"                        iface.routes_mut().update(|map| {","highlight_start":1,"highlight_end":58},{"text":"                            gateway = map.get(&gateway_cidr()).map(|route| route.via_router);","highlight_start":1,"highlight_end":94},{"text":"                        });","highlight_start":1,"highlight_end":28},{"text":"                        if gateway != Some(IpAddress::Ipv4(default_gw)) {","highlight_start":1,"highlight_end":74},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        iface.routes_mut().update(|map| {","highlight_start":1,"highlight_end":58},{"text":"                            map.remove(&gateway_cidr());","highlight_start":1,"highlight_end":57},{"text":"                        });","highlight_start":1,"highlight_end":28},{"text":"                        notifier.borrow_mut().schedule_notify(\"route/list\");","highlight_start":1,"highlight_end":77},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        \"ifaces\" => {","highlight_start":1,"highlight_end":22},{"text":"            \"eth0\" => {","highlight_start":1,"highlight_end":24},{"text":"                \"mac\" => {","highlight_start":1,"highlight_end":27},{"text":"                    rw [iface, notifier] (Option<EthernetAddress>, None)","highlight_start":1,"highlight_end":73},{"text":"                    || {","highlight_start":1,"highlight_end":25},{"text":"                        format!(\"{}\\n\", iface.borrow().ethernet_addr())","highlight_start":1,"highlight_end":72},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    |cur_value, line| {","highlight_start":1,"highlight_end":40},{"text":"                        if cur_value.is_none() {","highlight_start":1,"highlight_end":49},{"text":"                            let mac = EthernetAddress::from_str(line).","highlight_start":1,"highlight_end":71},{"text":"                                map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":82},{"text":"                            if !mac.is_unicast() {","highlight_start":1,"highlight_end":51},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            *cur_value = Some(mac);","highlight_start":1,"highlight_end":52},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        } else {","highlight_start":1,"highlight_end":33},{"text":"                            Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":68},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    |cur_value| {","highlight_start":1,"highlight_end":34},{"text":"                        if let Some(mac) = *cur_value {","highlight_start":1,"highlight_end":56},{"text":"                            iface.borrow_mut().set_ethernet_addr(mac);","highlight_start":1,"highlight_end":71},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/mac\");","highlight_start":1,"highlight_end":86},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"                \"addr\" => {","highlight_start":1,"highlight_end":28},{"text":"                    \"list\" => {","highlight_start":1,"highlight_end":32},{"text":"                        ro [iface]","highlight_start":1,"highlight_end":35},{"text":"                        || {","highlight_start":1,"highlight_end":29},{"text":"                            let mut ips = String::new();","highlight_start":1,"highlight_end":57},{"text":"                            for cidr in iface.borrow().ip_addrs() {","highlight_start":1,"highlight_end":68},{"text":"                                ips += &format!(\"{}\\n\", cidr);","highlight_start":1,"highlight_end":63},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            ips","highlight_start":1,"highlight_end":32},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"set\" => {","highlight_start":1,"highlight_end":31},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            if !cur_value.is_empty() {","highlight_start":1,"highlight_end":55},{"text":"                                let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":68},{"text":"                                let mut cidrs = vec![];","highlight_start":1,"highlight_end":56},{"text":"                                mem::swap(cur_value, &mut cidrs);","highlight_start":1,"highlight_end":66},{"text":"                                iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":60},{"text":"                                    *s = From::from(cidrs);","highlight_start":1,"highlight_end":60},{"text":"                                });","highlight_start":1,"highlight_end":36},{"text":"                                notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":96},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"add\" => {","highlight_start":1,"highlight_end":31},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":64},{"text":"                            let mut cidrs = iface.ip_addrs().to_vec();","highlight_start":1,"highlight_end":71},{"text":"                            for cidr in cur_value {","highlight_start":1,"highlight_end":52},{"text":"                                cidrs.insert(0, *cidr);","highlight_start":1,"highlight_end":56},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":56},{"text":"                                *s = From::from(cidrs);","highlight_start":1,"highlight_end":56},{"text":"                            });","highlight_start":1,"highlight_end":32},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":92},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"rm\" => {","highlight_start":1,"highlight_end":30},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":64},{"text":"                            let mut cidrs = iface.ip_addrs().to_vec();","highlight_start":1,"highlight_end":71},{"text":"                            for cidr in cur_value {","highlight_start":1,"highlight_end":52},{"text":"                                let pre_retain_len = cidrs.len();","highlight_start":1,"highlight_end":66},{"text":"                                cidrs.retain(|&c| c != *cidr);","highlight_start":1,"highlight_end":63},{"text":"                                if pre_retain_len == cidrs.len() {","highlight_start":1,"highlight_end":67},{"text":"                                    return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":84},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":56},{"text":"                                *s = From::from(cidrs);","highlight_start":1,"highlight_end":56},{"text":"                            });","highlight_start":1,"highlight_end":32},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":92},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trait objects without an explicit `dyn` are deprecated\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/smolnetd/scheme/netcfg/nodes.rs:225:45\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m225\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m            let new_writer = move || -> Box<NodeWriter> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                              \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0msrc/smolnetd/scheme/netcfg/mod.rs:51:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m51\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    cfg_node!{\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m52\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        \"resolv\" => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m53\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            \"nameserver\" => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m54\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                rw [dns_config, notifier] (Option<Ipv4Address>, None)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m272\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m273\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_____-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `cfg_node` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: use `dyn`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m225\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m            let new_writer = move || -> Box<NodeWriter> {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m225\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m            let new_writer = move || -> Box<\u001b[0m\u001b[0m\u001b[38;5;10mdyn \u001b[0m\u001b[0mNodeWriter> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\n\n"}
{"message":"trait objects without an explicit `dyn` are deprecated","code":{"code":"bare_trait_objects","explanation":null},"level":"warning","spans":[{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4502,"byte_end":4512,"line_start":225,"line_end":225,"column_start":45,"column_end":55,"is_primary":true,"text":[{"text":"            let new_writer = move || -> Box<NodeWriter> {","highlight_start":45,"highlight_end":55}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":6209,"byte_end":6226,"line_start":266,"line_end":266,"column_start":42,"column_end":59,"is_primary":false,"text":[{"text":"            $(children.insert($e.into(), cfg_node!($($t)*));)*","highlight_start":42,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":6209,"byte_end":6226,"line_start":266,"line_end":266,"column_start":42,"column_end":59,"is_primary":false,"text":[{"text":"            $(children.insert($e.into(), cfg_node!($($t)*));)*","highlight_start":42,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/mod.rs","byte_start":1546,"byte_end":11568,"line_start":51,"line_end":273,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    cfg_node!{","highlight_start":5,"highlight_end":15},{"text":"        \"resolv\" => {","highlight_start":1,"highlight_end":22},{"text":"            \"nameserver\" => {","highlight_start":1,"highlight_end":30},{"text":"                rw [dns_config, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":70},{"text":"                || {","highlight_start":1,"highlight_end":21},{"text":"                    format!(\"{}\\n\", dns_config.borrow().name_server)","highlight_start":1,"highlight_end":69},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let ip = Ipv4Address::from_str(line.trim())","highlight_start":1,"highlight_end":68},{"text":"                            .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":79},{"text":"                        if !ip.is_unicast() {","highlight_start":1,"highlight_end":46},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(ip);","highlight_start":1,"highlight_end":47},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(ip) = *cur_value {","highlight_start":1,"highlight_end":51},{"text":"                        dns_config.borrow_mut().name_server = ip;","highlight_start":1,"highlight_end":66},{"text":"                        notifier.borrow_mut().schedule_notify(\"resolv/nameserver\");","highlight_start":1,"highlight_end":84},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    Ok(())","highlight_start":1,"highlight_end":27},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        \"route\" => {","highlight_start":1,"highlight_end":21},{"text":"            \"list\" => {","highlight_start":1,"highlight_end":24},{"text":"                ro [iface] || {","highlight_start":1,"highlight_end":32},{"text":"                    let mut gateway = None;","highlight_start":1,"highlight_end":44},{"text":"                    iface.borrow_mut().routes_mut().update(|map| {","highlight_start":1,"highlight_end":67},{"text":"                        gateway = map.get(&gateway_cidr()).map(|route| route.via_router);","highlight_start":1,"highlight_end":90},{"text":"                    });","highlight_start":1,"highlight_end":24},{"text":"                    if let Some(ip) = gateway {","highlight_start":1,"highlight_end":48},{"text":"                        format!(\"default via {}\\n\", ip)","highlight_start":1,"highlight_end":56},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        String::new()","highlight_start":1,"highlight_end":38},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            \"add\" => {","highlight_start":1,"highlight_end":23},{"text":"                wo [iface, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":65},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let default_gw = parse_default_gw(line)?;","highlight_start":1,"highlight_end":66},{"text":"                        if !default_gw.is_unicast() {","highlight_start":1,"highlight_end":54},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(default_gw);","highlight_start":1,"highlight_end":55},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(default_gw) = *cur_value {","highlight_start":1,"highlight_end":59},{"text":"                        if iface.borrow_mut().routes_mut().add_default_ipv4_route(default_gw).is_err() {","highlight_start":1,"highlight_end":105},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        notifier.borrow_mut().schedule_notify(\"route/list\");","highlight_start":1,"highlight_end":77},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            \"rm\" => {","highlight_start":1,"highlight_end":22},{"text":"                wo [iface, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":65},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let default_gw = parse_default_gw(line)?;","highlight_start":1,"highlight_end":66},{"text":"                        if !default_gw.is_unicast() {","highlight_start":1,"highlight_end":54},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(default_gw);","highlight_start":1,"highlight_end":55},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(default_gw) = *cur_value {","highlight_start":1,"highlight_end":59},{"text":"                        let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":60},{"text":"                        let mut gateway = None;","highlight_start":1,"highlight_end":48},{"text":"                        iface.routes_mut().update(|map| {","highlight_start":1,"highlight_end":58},{"text":"                            gateway = map.get(&gateway_cidr()).map(|route| route.via_router);","highlight_start":1,"highlight_end":94},{"text":"                        });","highlight_start":1,"highlight_end":28},{"text":"                        if gateway != Some(IpAddress::Ipv4(default_gw)) {","highlight_start":1,"highlight_end":74},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        iface.routes_mut().update(|map| {","highlight_start":1,"highlight_end":58},{"text":"                            map.remove(&gateway_cidr());","highlight_start":1,"highlight_end":57},{"text":"                        });","highlight_start":1,"highlight_end":28},{"text":"                        notifier.borrow_mut().schedule_notify(\"route/list\");","highlight_start":1,"highlight_end":77},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        \"ifaces\" => {","highlight_start":1,"highlight_end":22},{"text":"            \"eth0\" => {","highlight_start":1,"highlight_end":24},{"text":"                \"mac\" => {","highlight_start":1,"highlight_end":27},{"text":"                    rw [iface, notifier] (Option<EthernetAddress>, None)","highlight_start":1,"highlight_end":73},{"text":"                    || {","highlight_start":1,"highlight_end":25},{"text":"                        format!(\"{}\\n\", iface.borrow().ethernet_addr())","highlight_start":1,"highlight_end":72},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    |cur_value, line| {","highlight_start":1,"highlight_end":40},{"text":"                        if cur_value.is_none() {","highlight_start":1,"highlight_end":49},{"text":"                            let mac = EthernetAddress::from_str(line).","highlight_start":1,"highlight_end":71},{"text":"                                map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":82},{"text":"                            if !mac.is_unicast() {","highlight_start":1,"highlight_end":51},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            *cur_value = Some(mac);","highlight_start":1,"highlight_end":52},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        } else {","highlight_start":1,"highlight_end":33},{"text":"                            Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":68},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    |cur_value| {","highlight_start":1,"highlight_end":34},{"text":"                        if let Some(mac) = *cur_value {","highlight_start":1,"highlight_end":56},{"text":"                            iface.borrow_mut().set_ethernet_addr(mac);","highlight_start":1,"highlight_end":71},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/mac\");","highlight_start":1,"highlight_end":86},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"                \"addr\" => {","highlight_start":1,"highlight_end":28},{"text":"                    \"list\" => {","highlight_start":1,"highlight_end":32},{"text":"                        ro [iface]","highlight_start":1,"highlight_end":35},{"text":"                        || {","highlight_start":1,"highlight_end":29},{"text":"                            let mut ips = String::new();","highlight_start":1,"highlight_end":57},{"text":"                            for cidr in iface.borrow().ip_addrs() {","highlight_start":1,"highlight_end":68},{"text":"                                ips += &format!(\"{}\\n\", cidr);","highlight_start":1,"highlight_end":63},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            ips","highlight_start":1,"highlight_end":32},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"set\" => {","highlight_start":1,"highlight_end":31},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            if !cur_value.is_empty() {","highlight_start":1,"highlight_end":55},{"text":"                                let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":68},{"text":"                                let mut cidrs = vec![];","highlight_start":1,"highlight_end":56},{"text":"                                mem::swap(cur_value, &mut cidrs);","highlight_start":1,"highlight_end":66},{"text":"                                iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":60},{"text":"                                    *s = From::from(cidrs);","highlight_start":1,"highlight_end":60},{"text":"                                });","highlight_start":1,"highlight_end":36},{"text":"                                notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":96},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"add\" => {","highlight_start":1,"highlight_end":31},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":64},{"text":"                            let mut cidrs = iface.ip_addrs().to_vec();","highlight_start":1,"highlight_end":71},{"text":"                            for cidr in cur_value {","highlight_start":1,"highlight_end":52},{"text":"                                cidrs.insert(0, *cidr);","highlight_start":1,"highlight_end":56},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":56},{"text":"                                *s = From::from(cidrs);","highlight_start":1,"highlight_end":56},{"text":"                            });","highlight_start":1,"highlight_end":32},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":92},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"rm\" => {","highlight_start":1,"highlight_end":30},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":64},{"text":"                            let mut cidrs = iface.ip_addrs().to_vec();","highlight_start":1,"highlight_end":71},{"text":"                            for cidr in cur_value {","highlight_start":1,"highlight_end":52},{"text":"                                let pre_retain_len = cidrs.len();","highlight_start":1,"highlight_end":66},{"text":"                                cidrs.retain(|&c| c != *cidr);","highlight_start":1,"highlight_end":63},{"text":"                                if pre_retain_len == cidrs.len() {","highlight_start":1,"highlight_end":67},{"text":"                                    return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":84},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":56},{"text":"                                *s = From::from(cidrs);","highlight_start":1,"highlight_end":56},{"text":"                            });","highlight_start":1,"highlight_end":32},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":92},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"use `dyn`","code":null,"level":"help","spans":[{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4502,"byte_end":4502,"line_start":225,"line_end":225,"column_start":45,"column_end":45,"is_primary":true,"text":[{"text":"            let new_writer = move || -> Box<NodeWriter> {","highlight_start":45,"highlight_end":45}],"label":null,"suggested_replacement":"dyn ","suggestion_applicability":"MachineApplicable","expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":6209,"byte_end":6226,"line_start":266,"line_end":266,"column_start":42,"column_end":59,"is_primary":false,"text":[{"text":"            $(children.insert($e.into(), cfg_node!($($t)*));)*","highlight_start":42,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":6209,"byte_end":6226,"line_start":266,"line_end":266,"column_start":42,"column_end":59,"is_primary":false,"text":[{"text":"            $(children.insert($e.into(), cfg_node!($($t)*));)*","highlight_start":42,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/mod.rs","byte_start":1546,"byte_end":11568,"line_start":51,"line_end":273,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    cfg_node!{","highlight_start":5,"highlight_end":15},{"text":"        \"resolv\" => {","highlight_start":1,"highlight_end":22},{"text":"            \"nameserver\" => {","highlight_start":1,"highlight_end":30},{"text":"                rw [dns_config, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":70},{"text":"                || {","highlight_start":1,"highlight_end":21},{"text":"                    format!(\"{}\\n\", dns_config.borrow().name_server)","highlight_start":1,"highlight_end":69},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let ip = Ipv4Address::from_str(line.trim())","highlight_start":1,"highlight_end":68},{"text":"                            .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":79},{"text":"                        if !ip.is_unicast() {","highlight_start":1,"highlight_end":46},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(ip);","highlight_start":1,"highlight_end":47},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(ip) = *cur_value {","highlight_start":1,"highlight_end":51},{"text":"                        dns_config.borrow_mut().name_server = ip;","highlight_start":1,"highlight_end":66},{"text":"                        notifier.borrow_mut().schedule_notify(\"resolv/nameserver\");","highlight_start":1,"highlight_end":84},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    Ok(())","highlight_start":1,"highlight_end":27},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        \"route\" => {","highlight_start":1,"highlight_end":21},{"text":"            \"list\" => {","highlight_start":1,"highlight_end":24},{"text":"                ro [iface] || {","highlight_start":1,"highlight_end":32},{"text":"                    let mut gateway = None;","highlight_start":1,"highlight_end":44},{"text":"                    iface.borrow_mut().routes_mut().update(|map| {","highlight_start":1,"highlight_end":67},{"text":"                        gateway = map.get(&gateway_cidr()).map(|route| route.via_router);","highlight_start":1,"highlight_end":90},{"text":"                    });","highlight_start":1,"highlight_end":24},{"text":"                    if let Some(ip) = gateway {","highlight_start":1,"highlight_end":48},{"text":"                        format!(\"default via {}\\n\", ip)","highlight_start":1,"highlight_end":56},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        String::new()","highlight_start":1,"highlight_end":38},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            \"add\" => {","highlight_start":1,"highlight_end":23},{"text":"                wo [iface, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":65},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let default_gw = parse_default_gw(line)?;","highlight_start":1,"highlight_end":66},{"text":"                        if !default_gw.is_unicast() {","highlight_start":1,"highlight_end":54},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(default_gw);","highlight_start":1,"highlight_end":55},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(default_gw) = *cur_value {","highlight_start":1,"highlight_end":59},{"text":"                        if iface.borrow_mut().routes_mut().add_default_ipv4_route(default_gw).is_err() {","highlight_start":1,"highlight_end":105},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        notifier.borrow_mut().schedule_notify(\"route/list\");","highlight_start":1,"highlight_end":77},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            \"rm\" => {","highlight_start":1,"highlight_end":22},{"text":"                wo [iface, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":65},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let default_gw = parse_default_gw(line)?;","highlight_start":1,"highlight_end":66},{"text":"                        if !default_gw.is_unicast() {","highlight_start":1,"highlight_end":54},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(default_gw);","highlight_start":1,"highlight_end":55},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(default_gw) = *cur_value {","highlight_start":1,"highlight_end":59},{"text":"                        let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":60},{"text":"                        let mut gateway = None;","highlight_start":1,"highlight_end":48},{"text":"                        iface.routes_mut().update(|map| {","highlight_start":1,"highlight_end":58},{"text":"                            gateway = map.get(&gateway_cidr()).map(|route| route.via_router);","highlight_start":1,"highlight_end":94},{"text":"                        });","highlight_start":1,"highlight_end":28},{"text":"                        if gateway != Some(IpAddress::Ipv4(default_gw)) {","highlight_start":1,"highlight_end":74},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        iface.routes_mut().update(|map| {","highlight_start":1,"highlight_end":58},{"text":"                            map.remove(&gateway_cidr());","highlight_start":1,"highlight_end":57},{"text":"                        });","highlight_start":1,"highlight_end":28},{"text":"                        notifier.borrow_mut().schedule_notify(\"route/list\");","highlight_start":1,"highlight_end":77},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        \"ifaces\" => {","highlight_start":1,"highlight_end":22},{"text":"            \"eth0\" => {","highlight_start":1,"highlight_end":24},{"text":"                \"mac\" => {","highlight_start":1,"highlight_end":27},{"text":"                    rw [iface, notifier] (Option<EthernetAddress>, None)","highlight_start":1,"highlight_end":73},{"text":"                    || {","highlight_start":1,"highlight_end":25},{"text":"                        format!(\"{}\\n\", iface.borrow().ethernet_addr())","highlight_start":1,"highlight_end":72},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    |cur_value, line| {","highlight_start":1,"highlight_end":40},{"text":"                        if cur_value.is_none() {","highlight_start":1,"highlight_end":49},{"text":"                            let mac = EthernetAddress::from_str(line).","highlight_start":1,"highlight_end":71},{"text":"                                map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":82},{"text":"                            if !mac.is_unicast() {","highlight_start":1,"highlight_end":51},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            *cur_value = Some(mac);","highlight_start":1,"highlight_end":52},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        } else {","highlight_start":1,"highlight_end":33},{"text":"                            Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":68},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    |cur_value| {","highlight_start":1,"highlight_end":34},{"text":"                        if let Some(mac) = *cur_value {","highlight_start":1,"highlight_end":56},{"text":"                            iface.borrow_mut().set_ethernet_addr(mac);","highlight_start":1,"highlight_end":71},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/mac\");","highlight_start":1,"highlight_end":86},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"                \"addr\" => {","highlight_start":1,"highlight_end":28},{"text":"                    \"list\" => {","highlight_start":1,"highlight_end":32},{"text":"                        ro [iface]","highlight_start":1,"highlight_end":35},{"text":"                        || {","highlight_start":1,"highlight_end":29},{"text":"                            let mut ips = String::new();","highlight_start":1,"highlight_end":57},{"text":"                            for cidr in iface.borrow().ip_addrs() {","highlight_start":1,"highlight_end":68},{"text":"                                ips += &format!(\"{}\\n\", cidr);","highlight_start":1,"highlight_end":63},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            ips","highlight_start":1,"highlight_end":32},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"set\" => {","highlight_start":1,"highlight_end":31},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            if !cur_value.is_empty() {","highlight_start":1,"highlight_end":55},{"text":"                                let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":68},{"text":"                                let mut cidrs = vec![];","highlight_start":1,"highlight_end":56},{"text":"                                mem::swap(cur_value, &mut cidrs);","highlight_start":1,"highlight_end":66},{"text":"                                iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":60},{"text":"                                    *s = From::from(cidrs);","highlight_start":1,"highlight_end":60},{"text":"                                });","highlight_start":1,"highlight_end":36},{"text":"                                notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":96},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"add\" => {","highlight_start":1,"highlight_end":31},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":64},{"text":"                            let mut cidrs = iface.ip_addrs().to_vec();","highlight_start":1,"highlight_end":71},{"text":"                            for cidr in cur_value {","highlight_start":1,"highlight_end":52},{"text":"                                cidrs.insert(0, *cidr);","highlight_start":1,"highlight_end":56},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":56},{"text":"                                *s = From::from(cidrs);","highlight_start":1,"highlight_end":56},{"text":"                            });","highlight_start":1,"highlight_end":32},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":92},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"rm\" => {","highlight_start":1,"highlight_end":30},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":64},{"text":"                            let mut cidrs = iface.ip_addrs().to_vec();","highlight_start":1,"highlight_end":71},{"text":"                            for cidr in cur_value {","highlight_start":1,"highlight_end":52},{"text":"                                let pre_retain_len = cidrs.len();","highlight_start":1,"highlight_end":66},{"text":"                                cidrs.retain(|&c| c != *cidr);","highlight_start":1,"highlight_end":63},{"text":"                                if pre_retain_len == cidrs.len() {","highlight_start":1,"highlight_end":67},{"text":"                                    return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":84},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":56},{"text":"                                *s = From::from(cidrs);","highlight_start":1,"highlight_end":56},{"text":"                            });","highlight_start":1,"highlight_end":32},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":92},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4512,"byte_end":4512,"line_start":225,"line_end":225,"column_start":55,"column_end":55,"is_primary":true,"text":[{"text":"            let new_writer = move || -> Box<NodeWriter> {","highlight_start":55,"highlight_end":55}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":6209,"byte_end":6226,"line_start":266,"line_end":266,"column_start":42,"column_end":59,"is_primary":false,"text":[{"text":"            $(children.insert($e.into(), cfg_node!($($t)*));)*","highlight_start":42,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":6209,"byte_end":6226,"line_start":266,"line_end":266,"column_start":42,"column_end":59,"is_primary":false,"text":[{"text":"            $(children.insert($e.into(), cfg_node!($($t)*));)*","highlight_start":42,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/smolnetd/scheme/netcfg/mod.rs","byte_start":1546,"byte_end":11568,"line_start":51,"line_end":273,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    cfg_node!{","highlight_start":5,"highlight_end":15},{"text":"        \"resolv\" => {","highlight_start":1,"highlight_end":22},{"text":"            \"nameserver\" => {","highlight_start":1,"highlight_end":30},{"text":"                rw [dns_config, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":70},{"text":"                || {","highlight_start":1,"highlight_end":21},{"text":"                    format!(\"{}\\n\", dns_config.borrow().name_server)","highlight_start":1,"highlight_end":69},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let ip = Ipv4Address::from_str(line.trim())","highlight_start":1,"highlight_end":68},{"text":"                            .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":79},{"text":"                        if !ip.is_unicast() {","highlight_start":1,"highlight_end":46},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(ip);","highlight_start":1,"highlight_end":47},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(ip) = *cur_value {","highlight_start":1,"highlight_end":51},{"text":"                        dns_config.borrow_mut().name_server = ip;","highlight_start":1,"highlight_end":66},{"text":"                        notifier.borrow_mut().schedule_notify(\"resolv/nameserver\");","highlight_start":1,"highlight_end":84},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    Ok(())","highlight_start":1,"highlight_end":27},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        \"route\" => {","highlight_start":1,"highlight_end":21},{"text":"            \"list\" => {","highlight_start":1,"highlight_end":24},{"text":"                ro [iface] || {","highlight_start":1,"highlight_end":32},{"text":"                    let mut gateway = None;","highlight_start":1,"highlight_end":44},{"text":"                    iface.borrow_mut().routes_mut().update(|map| {","highlight_start":1,"highlight_end":67},{"text":"                        gateway = map.get(&gateway_cidr()).map(|route| route.via_router);","highlight_start":1,"highlight_end":90},{"text":"                    });","highlight_start":1,"highlight_end":24},{"text":"                    if let Some(ip) = gateway {","highlight_start":1,"highlight_end":48},{"text":"                        format!(\"default via {}\\n\", ip)","highlight_start":1,"highlight_end":56},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        String::new()","highlight_start":1,"highlight_end":38},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            \"add\" => {","highlight_start":1,"highlight_end":23},{"text":"                wo [iface, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":65},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let default_gw = parse_default_gw(line)?;","highlight_start":1,"highlight_end":66},{"text":"                        if !default_gw.is_unicast() {","highlight_start":1,"highlight_end":54},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(default_gw);","highlight_start":1,"highlight_end":55},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(default_gw) = *cur_value {","highlight_start":1,"highlight_end":59},{"text":"                        if iface.borrow_mut().routes_mut().add_default_ipv4_route(default_gw).is_err() {","highlight_start":1,"highlight_end":105},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        notifier.borrow_mut().schedule_notify(\"route/list\");","highlight_start":1,"highlight_end":77},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            \"rm\" => {","highlight_start":1,"highlight_end":22},{"text":"                wo [iface, notifier] (Option<Ipv4Address>, None)","highlight_start":1,"highlight_end":65},{"text":"                |cur_value, line| {","highlight_start":1,"highlight_end":36},{"text":"                    if cur_value.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                        let default_gw = parse_default_gw(line)?;","highlight_start":1,"highlight_end":66},{"text":"                        if !default_gw.is_unicast() {","highlight_start":1,"highlight_end":54},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        *cur_value = Some(default_gw);","highlight_start":1,"highlight_end":55},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                |cur_value| {","highlight_start":1,"highlight_end":30},{"text":"                    if let Some(default_gw) = *cur_value {","highlight_start":1,"highlight_end":59},{"text":"                        let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":60},{"text":"                        let mut gateway = None;","highlight_start":1,"highlight_end":48},{"text":"                        iface.routes_mut().update(|map| {","highlight_start":1,"highlight_end":58},{"text":"                            gateway = map.get(&gateway_cidr()).map(|route| route.via_router);","highlight_start":1,"highlight_end":94},{"text":"                        });","highlight_start":1,"highlight_end":28},{"text":"                        if gateway != Some(IpAddress::Ipv4(default_gw)) {","highlight_start":1,"highlight_end":74},{"text":"                            return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":76},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        iface.routes_mut().update(|map| {","highlight_start":1,"highlight_end":58},{"text":"                            map.remove(&gateway_cidr());","highlight_start":1,"highlight_end":57},{"text":"                        });","highlight_start":1,"highlight_end":28},{"text":"                        notifier.borrow_mut().schedule_notify(\"route/list\");","highlight_start":1,"highlight_end":77},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":64},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        \"ifaces\" => {","highlight_start":1,"highlight_end":22},{"text":"            \"eth0\" => {","highlight_start":1,"highlight_end":24},{"text":"                \"mac\" => {","highlight_start":1,"highlight_end":27},{"text":"                    rw [iface, notifier] (Option<EthernetAddress>, None)","highlight_start":1,"highlight_end":73},{"text":"                    || {","highlight_start":1,"highlight_end":25},{"text":"                        format!(\"{}\\n\", iface.borrow().ethernet_addr())","highlight_start":1,"highlight_end":72},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    |cur_value, line| {","highlight_start":1,"highlight_end":40},{"text":"                        if cur_value.is_none() {","highlight_start":1,"highlight_end":49},{"text":"                            let mac = EthernetAddress::from_str(line).","highlight_start":1,"highlight_end":71},{"text":"                                map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":82},{"text":"                            if !mac.is_unicast() {","highlight_start":1,"highlight_end":51},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            *cur_value = Some(mac);","highlight_start":1,"highlight_end":52},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        } else {","highlight_start":1,"highlight_end":33},{"text":"                            Err(SyscallError::new(syscall::EINVAL))","highlight_start":1,"highlight_end":68},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    |cur_value| {","highlight_start":1,"highlight_end":34},{"text":"                        if let Some(mac) = *cur_value {","highlight_start":1,"highlight_end":56},{"text":"                            iface.borrow_mut().set_ethernet_addr(mac);","highlight_start":1,"highlight_end":71},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/mac\");","highlight_start":1,"highlight_end":86},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        Ok(())","highlight_start":1,"highlight_end":31},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"                \"addr\" => {","highlight_start":1,"highlight_end":28},{"text":"                    \"list\" => {","highlight_start":1,"highlight_end":32},{"text":"                        ro [iface]","highlight_start":1,"highlight_end":35},{"text":"                        || {","highlight_start":1,"highlight_end":29},{"text":"                            let mut ips = String::new();","highlight_start":1,"highlight_end":57},{"text":"                            for cidr in iface.borrow().ip_addrs() {","highlight_start":1,"highlight_end":68},{"text":"                                ips += &format!(\"{}\\n\", cidr);","highlight_start":1,"highlight_end":63},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            ips","highlight_start":1,"highlight_end":32},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"set\" => {","highlight_start":1,"highlight_end":31},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            if !cur_value.is_empty() {","highlight_start":1,"highlight_end":55},{"text":"                                let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":68},{"text":"                                let mut cidrs = vec![];","highlight_start":1,"highlight_end":56},{"text":"                                mem::swap(cur_value, &mut cidrs);","highlight_start":1,"highlight_end":66},{"text":"                                iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":60},{"text":"                                    *s = From::from(cidrs);","highlight_start":1,"highlight_end":60},{"text":"                                });","highlight_start":1,"highlight_end":36},{"text":"                                notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":96},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"add\" => {","highlight_start":1,"highlight_end":31},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":64},{"text":"                            let mut cidrs = iface.ip_addrs().to_vec();","highlight_start":1,"highlight_end":71},{"text":"                            for cidr in cur_value {","highlight_start":1,"highlight_end":52},{"text":"                                cidrs.insert(0, *cidr);","highlight_start":1,"highlight_end":56},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":56},{"text":"                                *s = From::from(cidrs);","highlight_start":1,"highlight_end":56},{"text":"                            });","highlight_start":1,"highlight_end":32},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":92},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    \"rm\" => {","highlight_start":1,"highlight_end":30},{"text":"                        wo [iface, notifier] (Vec<IpCidr>, Vec::new())","highlight_start":1,"highlight_end":71},{"text":"                        |cur_value, line| {","highlight_start":1,"highlight_end":44},{"text":"                            let cidr = IpCidr::from_str(line)","highlight_start":1,"highlight_end":62},{"text":"                                .map_err(|_| SyscallError::new(syscall::EINVAL))?;","highlight_start":1,"highlight_end":83},{"text":"                            if !cidr.address().is_unicast() {","highlight_start":1,"highlight_end":62},{"text":"                                return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":80},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            cur_value.push(cidr);","highlight_start":1,"highlight_end":50},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        |cur_value| {","highlight_start":1,"highlight_end":38},{"text":"                            let mut iface = iface.borrow_mut();","highlight_start":1,"highlight_end":64},{"text":"                            let mut cidrs = iface.ip_addrs().to_vec();","highlight_start":1,"highlight_end":71},{"text":"                            for cidr in cur_value {","highlight_start":1,"highlight_end":52},{"text":"                                let pre_retain_len = cidrs.len();","highlight_start":1,"highlight_end":66},{"text":"                                cidrs.retain(|&c| c != *cidr);","highlight_start":1,"highlight_end":63},{"text":"                                if pre_retain_len == cidrs.len() {","highlight_start":1,"highlight_end":67},{"text":"                                    return Err(SyscallError::new(syscall::EINVAL));","highlight_start":1,"highlight_end":84},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            iface.update_ip_addrs(|s| {","highlight_start":1,"highlight_end":56},{"text":"                                *s = From::from(cidrs);","highlight_start":1,"highlight_end":56},{"text":"                            });","highlight_start":1,"highlight_end":32},{"text":"                            notifier.borrow_mut().schedule_notify(\"ifaces/eth0/addr/list\");","highlight_start":1,"highlight_end":92},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"cfg_node!","def_site_span":{"file_name":"src/smolnetd/scheme/netcfg/nodes.rs","byte_start":4032,"byte_end":4053,"line_start":211,"line_end":211,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! cfg_node {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trait objects without an explicit `dyn` are deprecated\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/smolnetd/scheme/netcfg/nodes.rs:225:45\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m225\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m            let new_writer = move || -> Box<NodeWriter> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                              \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0msrc/smolnetd/scheme/netcfg/mod.rs:51:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m51\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    cfg_node!{\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m52\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        \"resolv\" => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m53\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            \"nameserver\" => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m54\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                rw [dns_config, notifier] (Option<Ipv4Address>, None)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m272\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m273\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_____-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `cfg_node` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: use `dyn`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m225\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m            let new_writer = move || -> Box<NodeWriter> {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m225\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m            let new_writer = move || -> Box<\u001b[0m\u001b[0m\u001b[38;5;10mdyn \u001b[0m\u001b[0mNodeWriter> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\n\n"}
{"message":"64 warnings emitted","code":null,"level":"warning","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: 64 warnings emitted\u001b[0m\n\n"}
