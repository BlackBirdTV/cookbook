--- a/aclocal.m4	2015-12-02 15:22:19.000000000 +0100
+++ b/aclocal.m4	2018-08-03 17:26:40.798221239 +0200
@@ -576,49 +576,7 @@
 fi
 ])
 
-AC_DEFUN(BASH_FUNC_GETENV,
-[AC_MSG_CHECKING(to see if getenv can be redefined)
-AC_CACHE_VAL(bash_cv_getenv_redef,
-[AC_TRY_RUN([
-#ifdef HAVE_UNISTD_H
-#  include <unistd.h>
-#endif
-#ifndef __STDC__
-#  ifndef const
-#    define const
-#  endif
-#endif
-char *
-getenv (name)
-#if defined (__linux__) || defined (__bsdi__) || defined (convex)
-     const char *name;
-#else
-     char const *name;
-#endif /* !__linux__ && !__bsdi__ && !convex */
-{
-return "42";
-}
-main()
-{
-char *s;
-/* The next allows this program to run, but does not allow bash to link
-   when it redefines getenv.  I'm not really interested in figuring out
-   why not. */
-#if defined (NeXT)
-exit(1);
-#endif
-s = getenv("ABCDE");
-exit(s == 0);	/* force optimizer to leave getenv in */
-}
-], bash_cv_getenv_redef=yes, bash_cv_getenv_redef=no,
-   [AC_MSG_WARN(cannot check getenv redefinition if cross compiling -- defaulting to yes)
-    bash_cv_getenv_redef=yes]
-)])
-AC_MSG_RESULT($bash_cv_getenv_redef)
-if test $bash_cv_getenv_redef = yes; then
-AC_DEFINE(CAN_REDEFINE_GETENV)
-fi
-])
+bash_cv_getenv_redef=no
 
 # We should check for putenv before calling this
 AC_DEFUN(BASH_FUNC_STD_PUTENV,
@@ -1200,7 +1158,7 @@
   AC_TRY_LINK([#include <signal.h>],[
     sigset_t ss;
     struct sigaction sa;
-    sigemptyset(&ss); sigsuspend(&ss);
+    sigemptyset(&ss); /* sigsuspend(&ss); */
     sigaction(SIGINT, &sa, (struct sigaction *) 0);
     sigprocmask(SIG_BLOCK, &ss, (sigset_t *) 0);
   ], bash_cv_signal_vintage=posix,
--- a/configure.ac	2016-09-07 22:56:28.000000000 +0200
+++ b/configure.ac	2018-08-03 09:10:42.818015670 +0200
@@ -52,7 +52,7 @@
 AC_CANONICAL_BUILD
 
 dnl configure defaults
-opt_bash_malloc=yes
+opt_bash_malloc=no
 opt_afs=no
 opt_curses=no
 opt_with_installed_readline=no
